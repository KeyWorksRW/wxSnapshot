// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxadv_adv.cpp was generated by genwxbind.lua
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------


#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#ifndef WX_PRECOMP
     #include "wx/wx.h"
#endif

#include "wxlua/wxlstate.h"
#include "wxbind/include/wxadv_bind.h"

#ifdef __GNUC__
    #pragma GCC diagnostic ignored "-Wunused-variable"
#endif // __GNUC__

#if LUA_VERSION_NUM < 503
#define lua_pushinteger lua_pushnumber
#endif


#if wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog
// ---------------------------------------------------------------------------
// Bind class wxAboutDialogInfo
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAboutDialogInfo'
int wxluatype_wxAboutDialogInfo = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_AddArtist[] = { &wxluatype_wxAboutDialogInfo, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_AddArtist(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_AddArtist[1] = {{ wxLua_wxAboutDialogInfo_AddArtist, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAboutDialogInfo_AddArtist }};
//     void AddArtist(const wxString& artist);
static int LUACALL wxLua_wxAboutDialogInfo_AddArtist(lua_State *L)
{
    // const wxString artist
    const wxString artist = wxlua_getwxStringtype(L, 2);
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call AddArtist
    self->AddArtist(artist);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_AddDeveloper[] = { &wxluatype_wxAboutDialogInfo, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_AddDeveloper(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_AddDeveloper[1] = {{ wxLua_wxAboutDialogInfo_AddDeveloper, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAboutDialogInfo_AddDeveloper }};
//     void AddDeveloper(const wxString& developer);
static int LUACALL wxLua_wxAboutDialogInfo_AddDeveloper(lua_State *L)
{
    // const wxString developer
    const wxString developer = wxlua_getwxStringtype(L, 2);
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call AddDeveloper
    self->AddDeveloper(developer);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_AddDocWriter[] = { &wxluatype_wxAboutDialogInfo, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_AddDocWriter(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_AddDocWriter[1] = {{ wxLua_wxAboutDialogInfo_AddDocWriter, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAboutDialogInfo_AddDocWriter }};
//     void AddDocWriter(const wxString& docwriter);
static int LUACALL wxLua_wxAboutDialogInfo_AddDocWriter(lua_State *L)
{
    // const wxString docwriter
    const wxString docwriter = wxlua_getwxStringtype(L, 2);
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call AddDocWriter
    self->AddDocWriter(docwriter);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_AddTranslator[] = { &wxluatype_wxAboutDialogInfo, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_AddTranslator(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_AddTranslator[1] = {{ wxLua_wxAboutDialogInfo_AddTranslator, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAboutDialogInfo_AddTranslator }};
//     void AddTranslator(const wxString& translator);
static int LUACALL wxLua_wxAboutDialogInfo_AddTranslator(lua_State *L)
{
    // const wxString translator
    const wxString translator = wxlua_getwxStringtype(L, 2);
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call AddTranslator
    self->AddTranslator(translator);

    return 0;
}


#if (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetArtists[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_GetArtists(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_GetArtists[1] = {{ wxLua_wxAboutDialogInfo_GetArtists, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetArtists }};
//     wxArrayString GetArtists() const;
static int LUACALL wxLua_wxAboutDialogInfo_GetArtists(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call GetArtists
    // allocate a new object using the copy constructor
    wxArrayString* returns = new wxArrayString(self->GetArtists());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxArrayString);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetCopyright[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_GetCopyright(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_GetCopyright[1] = {{ wxLua_wxAboutDialogInfo_GetCopyright, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetCopyright }};
//     wxString GetCopyright() const;
static int LUACALL wxLua_wxAboutDialogInfo_GetCopyright(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call GetCopyright
    wxString returns = (self->GetCopyright());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetDescription[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_GetDescription(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_GetDescription[1] = {{ wxLua_wxAboutDialogInfo_GetDescription, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetDescription }};
//     wxString GetDescription() const;
static int LUACALL wxLua_wxAboutDialogInfo_GetDescription(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call GetDescription
    wxString returns = (self->GetDescription());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetDescriptionAndCredits[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_GetDescriptionAndCredits(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_GetDescriptionAndCredits[1] = {{ wxLua_wxAboutDialogInfo_GetDescriptionAndCredits, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetDescriptionAndCredits }};
//     wxString GetDescriptionAndCredits() const;
static int LUACALL wxLua_wxAboutDialogInfo_GetDescriptionAndCredits(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call GetDescriptionAndCredits
    wxString returns = (self->GetDescriptionAndCredits());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetDevelopers[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_GetDevelopers(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_GetDevelopers[1] = {{ wxLua_wxAboutDialogInfo_GetDevelopers, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetDevelopers }};
//     const wxArrayString& GetDevelopers() const;
static int LUACALL wxLua_wxAboutDialogInfo_GetDevelopers(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call GetDevelopers
    const wxArrayString* returns = (const wxArrayString*)&self->GetDevelopers();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetDocWriters[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_GetDocWriters(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_GetDocWriters[1] = {{ wxLua_wxAboutDialogInfo_GetDocWriters, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetDocWriters }};
//     wxArrayString GetDocWriters() const;
static int LUACALL wxLua_wxAboutDialogInfo_GetDocWriters(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call GetDocWriters
    // allocate a new object using the copy constructor
    wxArrayString* returns = new wxArrayString(self->GetDocWriters());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxArrayString);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)

#if (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetIcon[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_GetIcon(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_GetIcon[1] = {{ wxLua_wxAboutDialogInfo_GetIcon, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetIcon }};
//     wxIcon GetIcon() const;
static int LUACALL wxLua_wxAboutDialogInfo_GetIcon(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call GetIcon
    // allocate a new object using the copy constructor
    wxIcon* returns = new wxIcon(self->GetIcon());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxIcon);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxIcon)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetLicence[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_GetLicence(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_GetLicence[1] = {{ wxLua_wxAboutDialogInfo_GetLicence, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetLicence }};
//     wxString GetLicence() const;
static int LUACALL wxLua_wxAboutDialogInfo_GetLicence(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call GetLicence
    wxString returns = (self->GetLicence());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetName[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_GetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_GetName[1] = {{ wxLua_wxAboutDialogInfo_GetName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetName }};
//     wxString GetName() const;
static int LUACALL wxLua_wxAboutDialogInfo_GetName(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call GetName
    wxString returns = (self->GetName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetTranslators[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_GetTranslators(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_GetTranslators[1] = {{ wxLua_wxAboutDialogInfo_GetTranslators, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetTranslators }};
//     wxArrayString GetTranslators() const;
static int LUACALL wxLua_wxAboutDialogInfo_GetTranslators(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call GetTranslators
    // allocate a new object using the copy constructor
    wxArrayString* returns = new wxArrayString(self->GetTranslators());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxArrayString);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetVersion[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_GetVersion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_GetVersion[1] = {{ wxLua_wxAboutDialogInfo_GetVersion, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetVersion }};
//     wxString GetVersion() const;
static int LUACALL wxLua_wxAboutDialogInfo_GetVersion(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call GetVersion
    wxString returns = (self->GetVersion());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetWebSiteDescription[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_GetWebSiteDescription(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_GetWebSiteDescription[1] = {{ wxLua_wxAboutDialogInfo_GetWebSiteDescription, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetWebSiteDescription }};
//     wxString GetWebSiteDescription() const;
static int LUACALL wxLua_wxAboutDialogInfo_GetWebSiteDescription(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call GetWebSiteDescription
    wxString returns = (self->GetWebSiteDescription());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetWebSiteURL[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_GetWebSiteURL(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_GetWebSiteURL[1] = {{ wxLua_wxAboutDialogInfo_GetWebSiteURL, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_GetWebSiteURL }};
//     wxString GetWebSiteURL() const;
static int LUACALL wxLua_wxAboutDialogInfo_GetWebSiteURL(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call GetWebSiteURL
    wxString returns = (self->GetWebSiteURL());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_HasArtists[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_HasArtists(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_HasArtists[1] = {{ wxLua_wxAboutDialogInfo_HasArtists, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_HasArtists }};
//     bool HasArtists() const;
static int LUACALL wxLua_wxAboutDialogInfo_HasArtists(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call HasArtists
    bool returns = (self->HasArtists());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_HasCopyright[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_HasCopyright(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_HasCopyright[1] = {{ wxLua_wxAboutDialogInfo_HasCopyright, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_HasCopyright }};
//     bool HasCopyright() const;
static int LUACALL wxLua_wxAboutDialogInfo_HasCopyright(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call HasCopyright
    bool returns = (self->HasCopyright());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_HasDescription[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_HasDescription(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_HasDescription[1] = {{ wxLua_wxAboutDialogInfo_HasDescription, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_HasDescription }};
//     bool HasDescription() const;
static int LUACALL wxLua_wxAboutDialogInfo_HasDescription(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call HasDescription
    bool returns = (self->HasDescription());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_HasDevelopers[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_HasDevelopers(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_HasDevelopers[1] = {{ wxLua_wxAboutDialogInfo_HasDevelopers, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_HasDevelopers }};
//     bool HasDevelopers() const;
static int LUACALL wxLua_wxAboutDialogInfo_HasDevelopers(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call HasDevelopers
    bool returns = (self->HasDevelopers());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_HasDocWriters[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_HasDocWriters(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_HasDocWriters[1] = {{ wxLua_wxAboutDialogInfo_HasDocWriters, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_HasDocWriters }};
//     bool HasDocWriters() const;
static int LUACALL wxLua_wxAboutDialogInfo_HasDocWriters(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call HasDocWriters
    bool returns = (self->HasDocWriters());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_HasIcon[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_HasIcon(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_HasIcon[1] = {{ wxLua_wxAboutDialogInfo_HasIcon, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_HasIcon }};
//     bool HasIcon() const;
static int LUACALL wxLua_wxAboutDialogInfo_HasIcon(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call HasIcon
    bool returns = (self->HasIcon());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_HasLicence[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_HasLicence(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_HasLicence[1] = {{ wxLua_wxAboutDialogInfo_HasLicence, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_HasLicence }};
//     bool HasLicence() const;
static int LUACALL wxLua_wxAboutDialogInfo_HasLicence(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call HasLicence
    bool returns = (self->HasLicence());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_HasTranslators[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_HasTranslators(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_HasTranslators[1] = {{ wxLua_wxAboutDialogInfo_HasTranslators, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_HasTranslators }};
//     bool HasTranslators() const;
static int LUACALL wxLua_wxAboutDialogInfo_HasTranslators(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call HasTranslators
    bool returns = (self->HasTranslators());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_HasVersion[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_HasVersion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_HasVersion[1] = {{ wxLua_wxAboutDialogInfo_HasVersion, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_HasVersion }};
//     bool HasVersion() const;
static int LUACALL wxLua_wxAboutDialogInfo_HasVersion(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call HasVersion
    bool returns = (self->HasVersion());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_HasWebSite[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_HasWebSite(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_HasWebSite[1] = {{ wxLua_wxAboutDialogInfo_HasWebSite, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_HasWebSite }};
//     bool HasWebSite() const;
static int LUACALL wxLua_wxAboutDialogInfo_HasWebSite(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call HasWebSite
    bool returns = (self->HasWebSite());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_IsSimple[] = { &wxluatype_wxAboutDialogInfo, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_IsSimple(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_IsSimple[1] = {{ wxLua_wxAboutDialogInfo_IsSimple, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_IsSimple }};
//     bool IsSimple() const;
static int LUACALL wxLua_wxAboutDialogInfo_IsSimple(lua_State *L)
{
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call IsSimple
    bool returns = (self->IsSimple());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetArtists[] = { &wxluatype_wxAboutDialogInfo, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_SetArtists(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_SetArtists[1] = {{ wxLua_wxAboutDialogInfo_SetArtists, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetArtists }};
//     void SetArtists(const wxArrayString& artists);
static int LUACALL wxLua_wxAboutDialogInfo_SetArtists(lua_State *L)
{
    // const wxArrayString artists
    wxLuaSmartwxArrayString artists = wxlua_getwxArrayString(L, 2);
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call SetArtists
    self->SetArtists(artists);

    return 0;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetCopyright[] = { &wxluatype_wxAboutDialogInfo, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_SetCopyright(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_SetCopyright[1] = {{ wxLua_wxAboutDialogInfo_SetCopyright, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetCopyright }};
//     void SetCopyright(const wxString& copyright);
static int LUACALL wxLua_wxAboutDialogInfo_SetCopyright(lua_State *L)
{
    // const wxString copyright
    const wxString copyright = wxlua_getwxStringtype(L, 2);
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call SetCopyright
    self->SetCopyright(copyright);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetDescription[] = { &wxluatype_wxAboutDialogInfo, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_SetDescription(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_SetDescription[1] = {{ wxLua_wxAboutDialogInfo_SetDescription, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetDescription }};
//     void SetDescription(const wxString& desc);
static int LUACALL wxLua_wxAboutDialogInfo_SetDescription(lua_State *L)
{
    // const wxString desc
    const wxString desc = wxlua_getwxStringtype(L, 2);
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call SetDescription
    self->SetDescription(desc);

    return 0;
}


#if (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetDevelopers[] = { &wxluatype_wxAboutDialogInfo, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_SetDevelopers(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_SetDevelopers[1] = {{ wxLua_wxAboutDialogInfo_SetDevelopers, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetDevelopers }};
//     void SetDevelopers(const wxArrayString& developers);
static int LUACALL wxLua_wxAboutDialogInfo_SetDevelopers(lua_State *L)
{
    // const wxArrayString developers
    wxLuaSmartwxArrayString developers = wxlua_getwxArrayString(L, 2);
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call SetDevelopers
    self->SetDevelopers(developers);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetDocWriters[] = { &wxluatype_wxAboutDialogInfo, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_SetDocWriters(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_SetDocWriters[1] = {{ wxLua_wxAboutDialogInfo_SetDocWriters, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetDocWriters }};
//     void SetDocWriters(const wxArrayString& docwriters);
static int LUACALL wxLua_wxAboutDialogInfo_SetDocWriters(lua_State *L)
{
    // const wxArrayString docwriters
    wxLuaSmartwxArrayString docwriters = wxlua_getwxArrayString(L, 2);
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call SetDocWriters
    self->SetDocWriters(docwriters);

    return 0;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)

#if (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetIcon[] = { &wxluatype_wxAboutDialogInfo, &wxluatype_wxIcon, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_SetIcon(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_SetIcon[1] = {{ wxLua_wxAboutDialogInfo_SetIcon, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetIcon }};
//     void SetIcon(const wxIcon& icon);
static int LUACALL wxLua_wxAboutDialogInfo_SetIcon(lua_State *L)
{
    // const wxIcon icon
    const wxIcon * icon = (const wxIcon *)wxluaT_getuserdatatype(L, 2, wxluatype_wxIcon);
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call SetIcon
    self->SetIcon(*icon);

    return 0;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxIcon)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetLicence[] = { &wxluatype_wxAboutDialogInfo, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_SetLicence(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_SetLicence[1] = {{ wxLua_wxAboutDialogInfo_SetLicence, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetLicence }};
//     void SetLicence(const wxString& licence);
static int LUACALL wxLua_wxAboutDialogInfo_SetLicence(lua_State *L)
{
    // const wxString licence
    const wxString licence = wxlua_getwxStringtype(L, 2);
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call SetLicence
    self->SetLicence(licence);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetLicense[] = { &wxluatype_wxAboutDialogInfo, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_SetLicense(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_SetLicense[1] = {{ wxLua_wxAboutDialogInfo_SetLicense, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetLicense }};
//     void SetLicense(const wxString& licence);
static int LUACALL wxLua_wxAboutDialogInfo_SetLicense(lua_State *L)
{
    // const wxString licence
    const wxString licence = wxlua_getwxStringtype(L, 2);
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call SetLicense
    self->SetLicense(licence);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetName[] = { &wxluatype_wxAboutDialogInfo, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_SetName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_SetName[1] = {{ wxLua_wxAboutDialogInfo_SetName, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetName }};
//     void SetName(const wxString& name);
static int LUACALL wxLua_wxAboutDialogInfo_SetName(lua_State *L)
{
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call SetName
    self->SetName(name);

    return 0;
}


#if (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetTranslators[] = { &wxluatype_wxAboutDialogInfo, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_SetTranslators(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_SetTranslators[1] = {{ wxLua_wxAboutDialogInfo_SetTranslators, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetTranslators }};
//     void SetTranslators(const wxArrayString& translators);
static int LUACALL wxLua_wxAboutDialogInfo_SetTranslators(lua_State *L)
{
    // const wxArrayString translators
    wxLuaSmartwxArrayString translators = wxlua_getwxArrayString(L, 2);
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call SetTranslators
    self->SetTranslators(translators);

    return 0;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetVersion[] = { &wxluatype_wxAboutDialogInfo, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_SetVersion(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_SetVersion[1] = {{ wxLua_wxAboutDialogInfo_SetVersion, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetVersion }};
//     void SetVersion(const wxString& version);
static int LUACALL wxLua_wxAboutDialogInfo_SetVersion(lua_State *L)
{
    // const wxString version
    const wxString version = wxlua_getwxStringtype(L, 2);
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call SetVersion
    self->SetVersion(version);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetWebSite[] = { &wxluatype_wxAboutDialogInfo, &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAboutDialogInfo_SetWebSite(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_SetWebSite[1] = {{ wxLua_wxAboutDialogInfo_SetWebSite, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxAboutDialogInfo_SetWebSite }};
//     void SetWebSite(const wxString& url, const wxString& desc = "");
static int LUACALL wxLua_wxAboutDialogInfo_SetWebSite(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString desc = ""
    const wxString desc = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // const wxString url
    const wxString url = wxlua_getwxStringtype(L, 2);
    // get this
    wxAboutDialogInfo * self = (wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call SetWebSite
    self->SetWebSite(url, desc);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAboutDialogInfo_delete[] = { &wxluatype_wxAboutDialogInfo, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxAboutDialogInfo_delete }};

static int LUACALL wxLua_wxAboutDialogInfo_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAboutDialogInfo_constructor[1] = {{ wxLua_wxAboutDialogInfo_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxAboutDialogInfo();
static int LUACALL wxLua_wxAboutDialogInfo_constructor(lua_State *L)
{
    // call constructor
    wxAboutDialogInfo* returns = new wxAboutDialogInfo();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxAboutDialogInfo);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAboutDialogInfo);

    return 1;
}




void wxLua_wxAboutDialogInfo_delete_function(void** p)
{
    wxAboutDialogInfo* o = (wxAboutDialogInfo*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAboutDialogInfo_methods[] = {
    { "AddArtist", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_AddArtist, 1, NULL },
    { "AddDeveloper", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_AddDeveloper, 1, NULL },
    { "AddDocWriter", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_AddDocWriter, 1, NULL },
    { "AddTranslator", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_AddTranslator, 1, NULL },

#if (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)
    { "GetArtists", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_GetArtists, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)

    { "GetCopyright", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_GetCopyright, 1, NULL },
    { "GetDescription", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_GetDescription, 1, NULL },
    { "GetDescriptionAndCredits", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_GetDescriptionAndCredits, 1, NULL },

#if (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)
    { "GetDevelopers", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_GetDevelopers, 1, NULL },
    { "GetDocWriters", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_GetDocWriters, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)

#if (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxIcon)
    { "GetIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_GetIcon, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxIcon)

    { "GetLicence", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_GetLicence, 1, NULL },
    { "GetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_GetName, 1, NULL },

#if (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)
    { "GetTranslators", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_GetTranslators, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)

    { "GetVersion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_GetVersion, 1, NULL },
    { "GetWebSiteDescription", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_GetWebSiteDescription, 1, NULL },
    { "GetWebSiteURL", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_GetWebSiteURL, 1, NULL },
    { "HasArtists", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_HasArtists, 1, NULL },
    { "HasCopyright", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_HasCopyright, 1, NULL },
    { "HasDescription", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_HasDescription, 1, NULL },
    { "HasDevelopers", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_HasDevelopers, 1, NULL },
    { "HasDocWriters", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_HasDocWriters, 1, NULL },
    { "HasIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_HasIcon, 1, NULL },
    { "HasLicence", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_HasLicence, 1, NULL },
    { "HasTranslators", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_HasTranslators, 1, NULL },
    { "HasVersion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_HasVersion, 1, NULL },
    { "HasWebSite", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_HasWebSite, 1, NULL },
    { "IsSimple", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_IsSimple, 1, NULL },

#if (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)
    { "SetArtists", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_SetArtists, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)

    { "SetCopyright", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_SetCopyright, 1, NULL },
    { "SetDescription", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_SetDescription, 1, NULL },

#if (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)
    { "SetDevelopers", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_SetDevelopers, 1, NULL },
    { "SetDocWriters", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_SetDocWriters, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)

#if (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxIcon)
    { "SetIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_SetIcon, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxIcon)

    { "SetLicence", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_SetLicence, 1, NULL },
    { "SetLicense", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_SetLicense, 1, NULL },
    { "SetName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_SetName, 1, NULL },

#if (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)
    { "SetTranslators", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_SetTranslators, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog) && (wxLUA_USE_wxArrayString)

    { "SetVersion", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_SetVersion, 1, NULL },
    { "SetWebSite", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAboutDialogInfo_SetWebSite, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxAboutDialogInfo_delete, 1, NULL },
    { "wxAboutDialogInfo", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAboutDialogInfo_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxAboutDialogInfo_methodCount = sizeof(wxAboutDialogInfo_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog


#if wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL
// ---------------------------------------------------------------------------
// Bind class wxAnimation
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAnimation'
int wxluatype_wxAnimation = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxAnimation_GetDelay[] = { &wxluatype_wxAnimation, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAnimation_GetDelay(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimation_GetDelay[1] = {{ wxLua_wxAnimation_GetDelay, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAnimation_GetDelay }};
//     virtual int GetDelay(unsigned int frame) const; // can be -1
static int LUACALL wxLua_wxAnimation_GetDelay(lua_State *L)
{
    // unsigned int frame
    unsigned int frame = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxAnimation * self = (wxAnimation *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAnimation);
    // call GetDelay
    int returns = (self->GetDelay(frame));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAnimation_GetFrame[] = { &wxluatype_wxAnimation, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAnimation_GetFrame(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimation_GetFrame[1] = {{ wxLua_wxAnimation_GetFrame, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAnimation_GetFrame }};
//     virtual wxImage GetFrame(unsigned int frame) const;
static int LUACALL wxLua_wxAnimation_GetFrame(lua_State *L)
{
    // unsigned int frame
    unsigned int frame = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxAnimation * self = (wxAnimation *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAnimation);
    // call GetFrame
    // allocate a new object using the copy constructor
    wxImage* returns = new wxImage(self->GetFrame(frame));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxImage);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxImage);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAnimation_GetFrameCount[] = { &wxluatype_wxAnimation, NULL };
static int LUACALL wxLua_wxAnimation_GetFrameCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimation_GetFrameCount[1] = {{ wxLua_wxAnimation_GetFrameCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAnimation_GetFrameCount }};
//     virtual unsigned int GetFrameCount() const;
static int LUACALL wxLua_wxAnimation_GetFrameCount(lua_State *L)
{
    // get this
    wxAnimation * self = (wxAnimation *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAnimation);
    // call GetFrameCount
    unsigned int returns = (self->GetFrameCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAnimation_GetSize[] = { &wxluatype_wxAnimation, NULL };
static int LUACALL wxLua_wxAnimation_GetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimation_GetSize[1] = {{ wxLua_wxAnimation_GetSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAnimation_GetSize }};
//     virtual wxSize GetSize() const;
static int LUACALL wxLua_wxAnimation_GetSize(lua_State *L)
{
    // get this
    wxAnimation * self = (wxAnimation *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAnimation);
    // call GetSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSize);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAnimation_IsOk[] = { &wxluatype_wxAnimation, NULL };
static int LUACALL wxLua_wxAnimation_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimation_IsOk[1] = {{ wxLua_wxAnimation_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAnimation_IsOk }};
//     virtual bool IsOk() const;
static int LUACALL wxLua_wxAnimation_IsOk(lua_State *L)
{
    // get this
    wxAnimation * self = (wxAnimation *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAnimation);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxUSE_STREAMS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAnimation_Load[] = { &wxluatype_wxAnimation, &wxluatype_wxInputStream, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAnimation_Load(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimation_Load[1] = {{ wxLua_wxAnimation_Load, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxAnimation_Load }};
//     virtual bool Load(wxInputStream& stream, wxAnimationType type = wxANIMATION_TYPE_ANY);
static int LUACALL wxLua_wxAnimation_Load(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxAnimationType type = wxANIMATION_TYPE_ANY
    wxAnimationType type = (argCount >= 3 ? (wxAnimationType)wxlua_getenumtype(L, 3) : wxANIMATION_TYPE_ANY);
    // wxInputStream stream
    wxInputStream * stream = (wxInputStream *)wxluaT_getuserdatatype(L, 2, wxluatype_wxInputStream);
    // get this
    wxAnimation * self = (wxAnimation *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAnimation);
    // call Load
    bool returns = (self->Load(*stream, type));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxUSE_STREAMS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAnimation_LoadFile[] = { &wxluatype_wxAnimation, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAnimation_LoadFile(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimation_LoadFile[1] = {{ wxLua_wxAnimation_LoadFile, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxAnimation_LoadFile }};
//     virtual bool LoadFile(const wxString& name, wxAnimationType type = wxANIMATION_TYPE_ANY);
static int LUACALL wxLua_wxAnimation_LoadFile(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxAnimationType type = wxANIMATION_TYPE_ANY
    wxAnimationType type = (argCount >= 3 ? (wxAnimationType)wxlua_getenumtype(L, 3) : wxANIMATION_TYPE_ANY);
    // const wxString name
    const wxString name = wxlua_getwxStringtype(L, 2);
    // get this
    wxAnimation * self = (wxAnimation *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAnimation);
    // call LoadFile
    bool returns = (self->LoadFile(name, type));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAnimation_delete[] = { &wxluatype_wxAnimation, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimation_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxAnimation_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxAnimation_constructor1[] = { &wxluatype_wxAnimation, NULL };
static int LUACALL wxLua_wxAnimation_constructor1(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimation_constructor1[1] = {{ wxLua_wxAnimation_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxAnimation_constructor1 }};
//     wxAnimation(const wxAnimation& anim);
static int LUACALL wxLua_wxAnimation_constructor1(lua_State *L)
{
    // const wxAnimation anim
    const wxAnimation * anim = (const wxAnimation *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAnimation);
    // call constructor
    wxAnimation* returns = new wxAnimation(*anim);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxAnimation);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAnimation);

    return 1;
}

static int LUACALL wxLua_wxAnimation_constructor(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimation_constructor[1] = {{ wxLua_wxAnimation_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxAnimation();
static int LUACALL wxLua_wxAnimation_constructor(lua_State *L)
{
    // call constructor
    wxAnimation* returns = new wxAnimation();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxAnimation);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAnimation);

    return 1;
}




#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimation_constructor_overload[] =
{
    { wxLua_wxAnimation_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxAnimation_constructor1 },
    { wxLua_wxAnimation_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxAnimation_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxAnimation_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL)

void wxLua_wxAnimation_delete_function(void** p)
{
    wxAnimation* o = (wxAnimation*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAnimation_methods[] = {
    { "GetDelay", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAnimation_GetDelay, 1, NULL },

#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxImage && wxUSE_IMAGE)
    { "GetFrame", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAnimation_GetFrame, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxImage && wxUSE_IMAGE)

    { "GetFrameCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAnimation_GetFrameCount, 1, NULL },

#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxPointSizeRect)
    { "GetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAnimation_GetSize, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxPointSizeRect)

    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAnimation_IsOk, 1, NULL },

#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxUSE_STREAMS)
    { "Load", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAnimation_Load, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxUSE_STREAMS)

    { "LoadFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAnimation_LoadFile, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxAnimation_delete, 1, NULL },

#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL)
    { "wxAnimation", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAnimation_constructor_overload, s_wxluafunc_wxLua_wxAnimation_constructor_overload_count, 0 },
#endif // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL)

    { 0, 0, 0, 0 },
};

int wxAnimation_methodCount = sizeof(wxAnimation_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL


#if wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL
// ---------------------------------------------------------------------------
// Bind class wxAnimationCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxAnimationCtrl'
int wxluatype_wxAnimationCtrl = WXLUA_TUNKNOWN;

#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAnimationCtrl_Create[] = { &wxluatype_wxAnimationCtrl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxAnimation, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAnimationCtrl_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimationCtrl_Create[1] = {{ wxLua_wxAnimationCtrl_Create, WXLUAMETHOD_METHOD, 4, 8, s_wxluatypeArray_wxLua_wxAnimationCtrl_Create }};
//     bool Create(wxWindow *parent, wxWindowID id, const wxAnimation& anim, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxAC_DEFAULT_STYLE, const wxString& name = "wxAnimationCtrl");
static int LUACALL wxLua_wxAnimationCtrl_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxAnimationCtrl"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxAnimationCtrl")));
    // long style = wxAC_DEFAULT_STYLE
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : wxAC_DEFAULT_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxAnimation anim
    const wxAnimation * anim = (const wxAnimation *)wxluaT_getuserdatatype(L, 4, wxluatype_wxAnimation);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxAnimationCtrl * self = (wxAnimationCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAnimationCtrl);
    // call Create
    bool returns = (self->Create(parent, id, *anim, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAnimationCtrl_GetAnimation[] = { &wxluatype_wxAnimationCtrl, NULL };
static int LUACALL wxLua_wxAnimationCtrl_GetAnimation(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimationCtrl_GetAnimation[1] = {{ wxLua_wxAnimationCtrl_GetAnimation, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAnimationCtrl_GetAnimation }};
//     wxAnimation GetAnimation() const;
static int LUACALL wxLua_wxAnimationCtrl_GetAnimation(lua_State *L)
{
    // get this
    wxAnimationCtrl * self = (wxAnimationCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAnimationCtrl);
    // call GetAnimation
    // allocate a new object using the copy constructor
    wxAnimation* returns = new wxAnimation(self->GetAnimation());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxAnimation);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAnimation);

    return 1;
}


#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAnimationCtrl_GetInactiveBitmap[] = { &wxluatype_wxAnimationCtrl, NULL };
static int LUACALL wxLua_wxAnimationCtrl_GetInactiveBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimationCtrl_GetInactiveBitmap[1] = {{ wxLua_wxAnimationCtrl_GetInactiveBitmap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAnimationCtrl_GetInactiveBitmap }};
//     wxBitmap GetInactiveBitmap() const;
static int LUACALL wxLua_wxAnimationCtrl_GetInactiveBitmap(lua_State *L)
{
    // get this
    wxAnimationCtrl * self = (wxAnimationCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAnimationCtrl);
    // call GetInactiveBitmap
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetInactiveBitmap());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxBitmap);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAnimationCtrl_IsPlaying[] = { &wxluatype_wxAnimationCtrl, NULL };
static int LUACALL wxLua_wxAnimationCtrl_IsPlaying(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimationCtrl_IsPlaying[1] = {{ wxLua_wxAnimationCtrl_IsPlaying, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAnimationCtrl_IsPlaying }};
//     virtual bool IsPlaying() const;
static int LUACALL wxLua_wxAnimationCtrl_IsPlaying(lua_State *L)
{
    // get this
    wxAnimationCtrl * self = (wxAnimationCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAnimationCtrl);
    // call IsPlaying
    bool returns = (self->IsPlaying());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAnimationCtrl_LoadFile1[] = { &wxluatype_wxAnimationCtrl, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAnimationCtrl_LoadFile1(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimationCtrl_LoadFile1[1] = {{ wxLua_wxAnimationCtrl_LoadFile1, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxAnimationCtrl_LoadFile1 }};
//     bool LoadFile(const wxString& file, wxAnimationType  animType = wxANIMATION_TYPE_ANY);
static int LUACALL wxLua_wxAnimationCtrl_LoadFile1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxAnimationType animType = wxANIMATION_TYPE_ANY
    wxAnimationType animType = (argCount >= 3 ? (wxAnimationType)wxlua_getenumtype(L, 3) : wxANIMATION_TYPE_ANY);
    // const wxString file
    const wxString file = wxlua_getwxStringtype(L, 2);
    // get this
    wxAnimationCtrl * self = (wxAnimationCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAnimationCtrl);
    // call LoadFile
    bool returns = (self->LoadFile(file, animType));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAnimationCtrl_LoadFile[] = { &wxluatype_wxAnimationCtrl, &wxluatype_TSTRING, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxAnimationCtrl_LoadFile(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimationCtrl_LoadFile[1] = {{ wxLua_wxAnimationCtrl_LoadFile, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxAnimationCtrl_LoadFile }};
//     virtual bool LoadFile(const wxString& filename, wxAnimationType type = wxANIMATION_TYPE_ANY);
static int LUACALL wxLua_wxAnimationCtrl_LoadFile(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxAnimationType type = wxANIMATION_TYPE_ANY
    wxAnimationType type = (argCount >= 3 ? (wxAnimationType)wxlua_getenumtype(L, 3) : wxANIMATION_TYPE_ANY);
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 2);
    // get this
    wxAnimationCtrl * self = (wxAnimationCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAnimationCtrl);
    // call LoadFile
    bool returns = (self->LoadFile(filename, type));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAnimationCtrl_Play[] = { &wxluatype_wxAnimationCtrl, NULL };
static int LUACALL wxLua_wxAnimationCtrl_Play(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimationCtrl_Play[1] = {{ wxLua_wxAnimationCtrl_Play, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAnimationCtrl_Play }};
//     virtual bool Play();
static int LUACALL wxLua_wxAnimationCtrl_Play(lua_State *L)
{
    // get this
    wxAnimationCtrl * self = (wxAnimationCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAnimationCtrl);
    // call Play
    bool returns = (self->Play());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxAnimationCtrl_SetAnimation[] = { &wxluatype_wxAnimationCtrl, &wxluatype_wxAnimation, NULL };
static int LUACALL wxLua_wxAnimationCtrl_SetAnimation(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimationCtrl_SetAnimation[1] = {{ wxLua_wxAnimationCtrl_SetAnimation, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAnimationCtrl_SetAnimation }};
//     virtual void SetAnimation(const wxAnimation &anim);
static int LUACALL wxLua_wxAnimationCtrl_SetAnimation(lua_State *L)
{
    // const wxAnimation anim
    const wxAnimation * anim = (const wxAnimation *)wxluaT_getuserdatatype(L, 2, wxluatype_wxAnimation);
    // get this
    wxAnimationCtrl * self = (wxAnimationCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAnimationCtrl);
    // call SetAnimation
    self->SetAnimation(*anim);

    return 0;
}


#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAnimationCtrl_SetInactiveBitmap[] = { &wxluatype_wxAnimationCtrl, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxAnimationCtrl_SetInactiveBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimationCtrl_SetInactiveBitmap[1] = {{ wxLua_wxAnimationCtrl_SetInactiveBitmap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxAnimationCtrl_SetInactiveBitmap }};
//     virtual void SetInactiveBitmap(const wxBitmap &bmp);
static int LUACALL wxLua_wxAnimationCtrl_SetInactiveBitmap(lua_State *L)
{
    // const wxBitmap bmp
    const wxBitmap * bmp = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxAnimationCtrl * self = (wxAnimationCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAnimationCtrl);
    // call SetInactiveBitmap
    self->SetInactiveBitmap(*bmp);

    return 0;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxAnimationCtrl_Stop[] = { &wxluatype_wxAnimationCtrl, NULL };
static int LUACALL wxLua_wxAnimationCtrl_Stop(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimationCtrl_Stop[1] = {{ wxLua_wxAnimationCtrl_Stop, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxAnimationCtrl_Stop }};
//     virtual void Stop();
static int LUACALL wxLua_wxAnimationCtrl_Stop(lua_State *L)
{
    // get this
    wxAnimationCtrl * self = (wxAnimationCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAnimationCtrl);
    // call Stop
    self->Stop();

    return 0;
}


#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxAnimationCtrl_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxAnimation, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxAnimationCtrl_constructor1(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimationCtrl_constructor1[1] = {{ wxLua_wxAnimationCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 7, s_wxluatypeArray_wxLua_wxAnimationCtrl_constructor1 }};
//     wxAnimationCtrl(wxWindow *parent, wxWindowID id, const wxAnimation& anim, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxAC_DEFAULT_STYLE, const wxString& name = "wxAnimationCtrl");
static int LUACALL wxLua_wxAnimationCtrl_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxAnimationCtrl"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxAnimationCtrl")));
    // long style = wxAC_DEFAULT_STYLE
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxAC_DEFAULT_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxAnimation anim
    const wxAnimation * anim = (const wxAnimation *)wxluaT_getuserdatatype(L, 3, wxluatype_wxAnimation);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxAnimationCtrl* returns = new wxAnimationCtrl(parent, id, *anim, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAnimationCtrl);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxAnimationCtrl_constructor(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimationCtrl_constructor[1] = {{ wxLua_wxAnimationCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxAnimationCtrl();
static int LUACALL wxLua_wxAnimationCtrl_constructor(lua_State *L)
{
    // call constructor
    wxAnimationCtrl* returns = new wxAnimationCtrl();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxAnimationCtrl);

    return 1;
}




#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimationCtrl_LoadFile_overload[] =
{
    { wxLua_wxAnimationCtrl_LoadFile1, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxAnimationCtrl_LoadFile1 },
    { wxLua_wxAnimationCtrl_LoadFile, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxAnimationCtrl_LoadFile },
};
static int s_wxluafunc_wxLua_wxAnimationCtrl_LoadFile_overload_count = sizeof(s_wxluafunc_wxLua_wxAnimationCtrl_LoadFile_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL)

#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxPointSizeRect))||(wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxAnimationCtrl_constructor_overload[] =
{

#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxAnimationCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 7, s_wxluatypeArray_wxLua_wxAnimationCtrl_constructor1 },
#endif // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxAnimationCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxAnimationCtrl_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxAnimationCtrl_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxPointSizeRect))||(wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL)

void wxLua_wxAnimationCtrl_delete_function(void** p)
{
    wxAnimationCtrl* o = (wxAnimationCtrl*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxAnimationCtrl_methods[] = {
#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAnimationCtrl_Create, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxPointSizeRect)

    { "GetAnimation", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAnimationCtrl_GetAnimation, 1, NULL },

#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxBitmap)
    { "GetInactiveBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAnimationCtrl_GetInactiveBitmap, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxBitmap)

    { "IsPlaying", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAnimationCtrl_IsPlaying, 1, NULL },

#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL)
    { "LoadFile", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAnimationCtrl_LoadFile_overload, s_wxluafunc_wxLua_wxAnimationCtrl_LoadFile_overload_count, 0 },
#endif // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL)

    { "Play", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAnimationCtrl_Play, 1, NULL },
    { "SetAnimation", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAnimationCtrl_SetAnimation, 1, NULL },

#if (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxBitmap)
    { "SetInactiveBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAnimationCtrl_SetInactiveBitmap, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxBitmap)

    { "Stop", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxAnimationCtrl_Stop, 1, NULL },

#if ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxPointSizeRect))||(wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL)
    { "wxAnimationCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxAnimationCtrl_constructor_overload, s_wxluafunc_wxLua_wxAnimationCtrl_constructor_overload_count, 0 },
#endif // ((wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL) && (wxLUA_USE_wxPointSizeRect))||(wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL)

    { 0, 0, 0, 0 },
};

int wxAnimationCtrl_methodCount = sizeof(wxAnimationCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL


#if wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX
// ---------------------------------------------------------------------------
// Bind class wxBitmapComboBox
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxBitmapComboBox'
int wxluatype_wxBitmapComboBox = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_Append2[] = { &wxluatype_wxBitmapComboBox, &wxluatype_TSTRING, &wxluatype_wxBitmap, &wxluatype_wxClientData, NULL };
static int LUACALL wxLua_wxBitmapComboBox_Append2(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_Append2[1] = {{ wxLua_wxBitmapComboBox_Append2, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxBitmapComboBox_Append2 }};
//     int Append(const wxString& item, const wxBitmap& bitmap, wxClientData *clientData);
static int LUACALL wxLua_wxBitmapComboBox_Append2(lua_State *L)
{
    // wxClientData clientData
    wxClientData * clientData = (wxClientData *)wxluaT_getuserdatatype(L, 4, wxluatype_wxClientData);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 3, wxluatype_wxBitmap);
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 2);
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call Append
    int returns = (self->Append(item, *bitmap, clientData));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_Append1[] = { &wxluatype_wxBitmapComboBox, &wxluatype_TSTRING, &wxluatype_wxBitmap, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBitmapComboBox_Append1(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_Append1[1] = {{ wxLua_wxBitmapComboBox_Append1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxBitmapComboBox_Append1 }};
//     int Append(const wxString& item, const wxBitmap& bitmap, voidptr_long data); // C++ is (void *clientData) You can put a number here
static int LUACALL wxLua_wxBitmapComboBox_Append1(lua_State *L)
{
    // voidptr_long data
    wxUIntPtr data = (wxUIntPtr)wxlua_getnumbertype(L, 4);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 3, wxluatype_wxBitmap);
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 2);
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call Append
    int returns = (self->Append(item, *bitmap, (void*)data));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_Append[] = { &wxluatype_wxBitmapComboBox, &wxluatype_TSTRING, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxBitmapComboBox_Append(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_Append[1] = {{ wxLua_wxBitmapComboBox_Append, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxBitmapComboBox_Append }};
//     int Append(const wxString& item, const wxBitmap& bitmap = wxNullBitmap);
static int LUACALL wxLua_wxBitmapComboBox_Append(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxBitmap bitmap = wxNullBitmap
    const wxBitmap * bitmap = (argCount >= 3 ? (const wxBitmap *)wxluaT_getuserdatatype(L, 3, wxluatype_wxBitmap) : &wxNullBitmap);
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 2);
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call Append
    int returns = (self->Append(item, *bitmap));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_Clear[] = { &wxluatype_wxBitmapComboBox, NULL };
static int LUACALL wxLua_wxBitmapComboBox_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_Clear[1] = {{ wxLua_wxBitmapComboBox_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBitmapComboBox_Clear }};
//     void Clear();
static int LUACALL wxLua_wxBitmapComboBox_Clear(lua_State *L)
{
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call Clear
    self->Clear();

    return 0;
}


#if (((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_Create[] = { &wxluatype_wxBitmapComboBox, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayString, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxBitmapComboBox_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_Create[1] = {{ wxLua_wxBitmapComboBox_Create, WXLUAMETHOD_METHOD, 4, 10, s_wxluatypeArray_wxLua_wxBitmapComboBox_Create }};
//     bool Create(wxWindow* parent, wxWindowID id, const wxString& value, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, const wxArrayString& choices = wxLuaNullSmartwxArrayString, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxBitmapComboBox");
static int LUACALL wxLua_wxBitmapComboBox_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxBitmapComboBox"
    const wxString name = (argCount >= 10 ? wxlua_getwxStringtype(L, 10) : wxString(wxT("wxBitmapComboBox")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 9 ? (const wxValidator *)wxluaT_getuserdatatype(L, 9, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 8 ? (long)wxlua_getnumbertype(L, 8) : 0);
    // const wxArrayString choices = wxLuaNullSmartwxArrayString
    wxLuaSmartwxArrayString choices = (argCount >= 7 ? wxlua_getwxArrayString(L, 7) : wxLuaNullSmartwxArrayString);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 4);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call Create
    bool returns = (self->Create(parent, id, value, *pos, *size, choices, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_Delete[] = { &wxluatype_wxBitmapComboBox, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxBitmapComboBox_Delete(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_Delete[1] = {{ wxLua_wxBitmapComboBox_Delete, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmapComboBox_Delete }};
//     void Delete(unsigned int n);
static int LUACALL wxLua_wxBitmapComboBox_Delete(lua_State *L)
{
    // unsigned int n
    unsigned int n = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call Delete
    self->Delete(n);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_FindString[] = { &wxluatype_wxBitmapComboBox, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxBitmapComboBox_FindString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_FindString[1] = {{ wxLua_wxBitmapComboBox_FindString, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxBitmapComboBox_FindString }};
//     int FindString(const wxString& s, bool bCase = false) const;
static int LUACALL wxLua_wxBitmapComboBox_FindString(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool bCase = false
    bool bCase = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // const wxString s
    const wxString s = wxlua_getwxStringtype(L, 2);
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call FindString
    int returns = (self->FindString(s, bCase));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_GetBitmapSize[] = { &wxluatype_wxBitmapComboBox, NULL };
static int LUACALL wxLua_wxBitmapComboBox_GetBitmapSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_GetBitmapSize[1] = {{ wxLua_wxBitmapComboBox_GetBitmapSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBitmapComboBox_GetBitmapSize }};
//     wxSize GetBitmapSize() const;
static int LUACALL wxLua_wxBitmapComboBox_GetBitmapSize(lua_State *L)
{
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call GetBitmapSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetBitmapSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSize);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_GetCount[] = { &wxluatype_wxBitmapComboBox, NULL };
static int LUACALL wxLua_wxBitmapComboBox_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_GetCount[1] = {{ wxLua_wxBitmapComboBox_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBitmapComboBox_GetCount }};
//     unsigned int GetCount() const;
static int LUACALL wxLua_wxBitmapComboBox_GetCount(lua_State *L)
{
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call GetCount
    unsigned int returns = (self->GetCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_GetItemBitmap[] = { &wxluatype_wxBitmapComboBox, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxBitmapComboBox_GetItemBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_GetItemBitmap[1] = {{ wxLua_wxBitmapComboBox_GetItemBitmap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmapComboBox_GetItemBitmap }};
//     wxBitmap GetItemBitmap(unsigned int n) const;
static int LUACALL wxLua_wxBitmapComboBox_GetItemBitmap(lua_State *L)
{
    // unsigned int n
    unsigned int n = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call GetItemBitmap
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetItemBitmap(n));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxBitmap);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_GetSelection[] = { &wxluatype_wxBitmapComboBox, NULL };
static int LUACALL wxLua_wxBitmapComboBox_GetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_GetSelection[1] = {{ wxLua_wxBitmapComboBox_GetSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxBitmapComboBox_GetSelection }};
//     int GetSelection() const;
static int LUACALL wxLua_wxBitmapComboBox_GetSelection(lua_State *L)
{
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call GetSelection
    int returns = (self->GetSelection());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_GetString[] = { &wxluatype_wxBitmapComboBox, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxBitmapComboBox_GetString(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_GetString[1] = {{ wxLua_wxBitmapComboBox_GetString, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmapComboBox_GetString }};
//     wxString GetString(unsigned int n) const;
static int LUACALL wxLua_wxBitmapComboBox_GetString(lua_State *L)
{
    // unsigned int n
    unsigned int n = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call GetString
    wxString returns = (self->GetString(n));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_Insert2[] = { &wxluatype_wxBitmapComboBox, &wxluatype_TSTRING, &wxluatype_wxBitmap, &wxluatype_TINTEGER, &wxluatype_wxClientData, NULL };
static int LUACALL wxLua_wxBitmapComboBox_Insert2(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_Insert2[1] = {{ wxLua_wxBitmapComboBox_Insert2, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxBitmapComboBox_Insert2 }};
//     int Insert(const wxString& item, const wxBitmap& bitmap, unsigned int pos, wxClientData *clientData);
static int LUACALL wxLua_wxBitmapComboBox_Insert2(lua_State *L)
{
    // wxClientData clientData
    wxClientData * clientData = (wxClientData *)wxluaT_getuserdatatype(L, 5, wxluatype_wxClientData);
    // unsigned int pos
    unsigned int pos = (unsigned int)wxlua_getuintegertype(L, 4);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 3, wxluatype_wxBitmap);
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 2);
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call Insert
    int returns = (self->Insert(item, *bitmap, pos, clientData));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)

#if ((!wxCHECK_VERSION(2,9,0) || wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_Insert1[] = { &wxluatype_wxBitmapComboBox, &wxluatype_TSTRING, &wxluatype_wxBitmap, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBitmapComboBox_Insert1(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_Insert1[1] = {{ wxLua_wxBitmapComboBox_Insert1, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxBitmapComboBox_Insert1 }};
//     int Insert(const wxString& item, const wxBitmap& bitmap, unsigned int pos, voidptr_long data); // C++ is (void *clientData) You can put a number here
static int LUACALL wxLua_wxBitmapComboBox_Insert1(lua_State *L)
{
    // voidptr_long data
    wxUIntPtr data = (wxUIntPtr)wxlua_getnumbertype(L, 5);
    // unsigned int pos
    unsigned int pos = (unsigned int)wxlua_getuintegertype(L, 4);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 3, wxluatype_wxBitmap);
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 2);
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call Insert
    int returns = (self->Insert(item, *bitmap, pos, (void*)data));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // ((!wxCHECK_VERSION(2,9,0) || wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)) && (wxLUA_USE_wxBitmap)

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_Insert[] = { &wxluatype_wxBitmapComboBox, &wxluatype_TSTRING, &wxluatype_wxBitmap, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxBitmapComboBox_Insert(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_Insert[1] = {{ wxLua_wxBitmapComboBox_Insert, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxBitmapComboBox_Insert }};
//     int Insert(const wxString& item, const wxBitmap& bitmap, unsigned int pos);
static int LUACALL wxLua_wxBitmapComboBox_Insert(lua_State *L)
{
    // unsigned int pos
    unsigned int pos = (unsigned int)wxlua_getuintegertype(L, 4);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 3, wxluatype_wxBitmap);
    // const wxString item
    const wxString item = wxlua_getwxStringtype(L, 2);
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call Insert
    int returns = (self->Insert(item, *bitmap, pos));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_Select[] = { &wxluatype_wxBitmapComboBox, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBitmapComboBox_Select(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_Select[1] = {{ wxLua_wxBitmapComboBox_Select, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmapComboBox_Select }};
//     void Select(int n);
static int LUACALL wxLua_wxBitmapComboBox_Select(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call Select
    self->Select(n);

    return 0;
}


#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_SetItemBitmap[] = { &wxluatype_wxBitmapComboBox, &wxluatype_TINTEGER, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxBitmapComboBox_SetItemBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_SetItemBitmap[1] = {{ wxLua_wxBitmapComboBox_SetItemBitmap, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxBitmapComboBox_SetItemBitmap }};
//     void SetItemBitmap(unsigned int n, const wxBitmap& bitmap);
static int LUACALL wxLua_wxBitmapComboBox_SetItemBitmap(lua_State *L)
{
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 3, wxluatype_wxBitmap);
    // unsigned int n
    unsigned int n = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call SetItemBitmap
    self->SetItemBitmap(n, *bitmap);

    return 0;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_SetSelection[] = { &wxluatype_wxBitmapComboBox, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxBitmapComboBox_SetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_SetSelection[1] = {{ wxLua_wxBitmapComboBox_SetSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmapComboBox_SetSelection }};
//     void SetSelection(int n);
static int LUACALL wxLua_wxBitmapComboBox_SetSelection(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call SetSelection
    self->SetSelection(n);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_SetString1[] = { &wxluatype_wxBitmapComboBox, &wxluatype_TINTEGER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxBitmapComboBox_SetString1(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_SetString1[1] = {{ wxLua_wxBitmapComboBox_SetString1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxBitmapComboBox_SetString1 }};
//     void SetString(unsigned int n, const wxString& s);
static int LUACALL wxLua_wxBitmapComboBox_SetString1(lua_State *L)
{
    // const wxString s
    const wxString s = wxlua_getwxStringtype(L, 3);
    // unsigned int n
    unsigned int n = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call SetString
    self->SetString(n, s);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_SetString[] = { &wxluatype_wxBitmapComboBox, &wxluatype_TINTEGER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxBitmapComboBox_SetString(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_SetString[1] = {{ wxLua_wxBitmapComboBox_SetString, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxBitmapComboBox_SetString }};
//     void SetString(unsigned int n, const wxString& s);
static int LUACALL wxLua_wxBitmapComboBox_SetString(lua_State *L)
{
    // const wxString s
    const wxString s = wxlua_getwxStringtype(L, 3);
    // unsigned int n
    unsigned int n = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call SetString
    self->SetString(n, s);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_SetStringSelection[] = { &wxluatype_wxBitmapComboBox, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxBitmapComboBox_SetStringSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_SetStringSelection[1] = {{ wxLua_wxBitmapComboBox_SetStringSelection, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmapComboBox_SetStringSelection }};
//     bool SetStringSelection(const wxString& s);
static int LUACALL wxLua_wxBitmapComboBox_SetStringSelection(lua_State *L)
{
    // const wxString s
    const wxString s = wxlua_getwxStringtype(L, 2);
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call SetStringSelection
    bool returns = (self->SetStringSelection(s));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_SetValue[] = { &wxluatype_wxBitmapComboBox, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxBitmapComboBox_SetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_SetValue[1] = {{ wxLua_wxBitmapComboBox_SetValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxBitmapComboBox_SetValue }};
//     void SetValue(const wxString& value);
static int LUACALL wxLua_wxBitmapComboBox_SetValue(lua_State *L)
{
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 2);
    // get this
    wxBitmapComboBox * self = (wxBitmapComboBox *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmapComboBox);
    // call SetValue
    self->SetValue(value);

    return 0;
}


#if (((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxBitmapComboBox_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_wxArrayString, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxBitmapComboBox_constructor1(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_constructor1[1] = {{ wxLua_wxBitmapComboBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 9, s_wxluatypeArray_wxLua_wxBitmapComboBox_constructor1 }};
//     wxBitmapComboBox(wxWindow* parent, wxWindowID id, const wxString& value, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, const wxArrayString& choices = wxLuaNullSmartwxArrayString, long style = 0, const wxValidator& validator = wxDefaultValidator, const wxString& name = "wxBitmapComboBox");
static int LUACALL wxLua_wxBitmapComboBox_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxBitmapComboBox"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxBitmapComboBox")));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 8 ? (const wxValidator *)wxluaT_getuserdatatype(L, 8, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : 0);
    // const wxArrayString choices = wxLuaNullSmartwxArrayString
    wxLuaSmartwxArrayString choices = (argCount >= 6 ? wxlua_getwxArrayString(L, 6) : wxLuaNullSmartwxArrayString);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 3);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxBitmapComboBox* returns = new wxBitmapComboBox(parent, id, value, *pos, *size, choices, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmapComboBox);

    return 1;
}

#endif // (((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)

static int LUACALL wxLua_wxBitmapComboBox_constructor(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_constructor[1] = {{ wxLua_wxBitmapComboBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxBitmapComboBox();
static int LUACALL wxLua_wxBitmapComboBox_constructor(lua_State *L)
{
    // call constructor
    wxBitmapComboBox* returns = new wxBitmapComboBox();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmapComboBox);

    return 1;
}




#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_Append_overload[] =
{

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)
    { wxLua_wxBitmapComboBox_Append2, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxBitmapComboBox_Append2 },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)
    { wxLua_wxBitmapComboBox_Append1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxBitmapComboBox_Append1 },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)
    { wxLua_wxBitmapComboBox_Append, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxBitmapComboBox_Append },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)
};
static int s_wxluafunc_wxLua_wxBitmapComboBox_Append_overload_count = sizeof(s_wxluafunc_wxLua_wxBitmapComboBox_Append_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX))

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX))||(((!wxCHECK_VERSION(2,9,0) || wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)) && (wxLUA_USE_wxBitmap))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_Insert_overload[] =
{

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)
    { wxLua_wxBitmapComboBox_Insert2, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxBitmapComboBox_Insert2 },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)

#if ((!wxCHECK_VERSION(2,9,0) || wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)) && (wxLUA_USE_wxBitmap)
    { wxLua_wxBitmapComboBox_Insert1, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxBitmapComboBox_Insert1 },
#endif // ((!wxCHECK_VERSION(2,9,0) || wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)) && (wxLUA_USE_wxBitmap)

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)
    { wxLua_wxBitmapComboBox_Insert, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxBitmapComboBox_Insert },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)
};
static int s_wxluafunc_wxLua_wxBitmapComboBox_Insert_overload_count = sizeof(s_wxluafunc_wxLua_wxBitmapComboBox_Insert_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX))||(((!wxCHECK_VERSION(2,9,0) || wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)) && (wxLUA_USE_wxBitmap))

#if (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_SetString_overload[] =
{
    { wxLua_wxBitmapComboBox_SetString1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxBitmapComboBox_SetString1 },
    { wxLua_wxBitmapComboBox_SetString, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxBitmapComboBox_SetString },
};
static int s_wxluafunc_wxLua_wxBitmapComboBox_SetString_overload_count = sizeof(s_wxluafunc_wxLua_wxBitmapComboBox_SetString_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)

#if ((((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS))||(wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxBitmapComboBox_constructor_overload[] =
{

#if (((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)
    { wxLua_wxBitmapComboBox_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 9, s_wxluatypeArray_wxLua_wxBitmapComboBox_constructor1 },
#endif // (((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)
    { wxLua_wxBitmapComboBox_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxBitmapComboBox_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxBitmapComboBox_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS))||(wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)

void wxLua_wxBitmapComboBox_delete_function(void** p)
{
    wxBitmapComboBox* o = (wxBitmapComboBox*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxBitmapComboBox_methods[] = {
#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX))
    { "Append", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapComboBox_Append_overload, s_wxluafunc_wxLua_wxBitmapComboBox_Append_overload_count, 0 },
#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX))

    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapComboBox_Clear, 1, NULL },

#if (((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapComboBox_Create, 1, NULL },
#endif // (((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)

    { "Delete", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapComboBox_Delete, 1, NULL },
    { "FindString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapComboBox_FindString, 1, NULL },

#if (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX) && (wxLUA_USE_wxPointSizeRect)
    { "GetBitmapSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapComboBox_GetBitmapSize, 1, NULL },
#endif // (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX) && (wxLUA_USE_wxPointSizeRect)

    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapComboBox_GetCount, 1, NULL },

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)
    { "GetItemBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapComboBox_GetItemBitmap, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)

    { "GetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapComboBox_GetSelection, 1, NULL },
    { "GetString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapComboBox_GetString, 1, NULL },

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX))||(((!wxCHECK_VERSION(2,9,0) || wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)) && (wxLUA_USE_wxBitmap))
    { "Insert", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapComboBox_Insert_overload, s_wxluafunc_wxLua_wxBitmapComboBox_Insert_overload_count, 0 },
#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX))||(((!wxCHECK_VERSION(2,9,0) || wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)) && (wxLUA_USE_wxBitmap))

    { "Select", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapComboBox_Select, 1, NULL },

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)
    { "SetItemBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapComboBox_SetItemBitmap, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)

    { "SetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapComboBox_SetSelection, 1, NULL },

#if (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)
    { "SetString", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapComboBox_SetString_overload, s_wxluafunc_wxLua_wxBitmapComboBox_SetString_overload_count, 0 },
#endif // (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)

    { "SetStringSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapComboBox_SetStringSelection, 1, NULL },
    { "SetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxBitmapComboBox_SetValue, 1, NULL },

#if ((((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS))||(wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)
    { "wxBitmapComboBox", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxBitmapComboBox_constructor_overload, s_wxluafunc_wxLua_wxBitmapComboBox_constructor_overload_count, 0 },
#endif // ((((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS))||(wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX)

    { 0, 0, 0, 0 },
};

int wxBitmapComboBox_methodCount = sizeof(wxBitmapComboBox_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX


#if wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL
// ---------------------------------------------------------------------------
// Bind class wxCalendarCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxCalendarCtrl'
int wxluatype_wxCalendarCtrl = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarCtrl_EnableHolidayDisplay[] = { &wxluatype_wxCalendarCtrl, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxCalendarCtrl_EnableHolidayDisplay(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarCtrl_EnableHolidayDisplay[1] = {{ wxLua_wxCalendarCtrl_EnableHolidayDisplay, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxCalendarCtrl_EnableHolidayDisplay }};
//     void     EnableHolidayDisplay(bool display = true);
static int LUACALL wxLua_wxCalendarCtrl_EnableHolidayDisplay(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool display = true
    bool display = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxCalendarCtrl * self = (wxCalendarCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarCtrl);
    // call EnableHolidayDisplay
    self->EnableHolidayDisplay(display);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarCtrl_EnableMonthChange[] = { &wxluatype_wxCalendarCtrl, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxCalendarCtrl_EnableMonthChange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarCtrl_EnableMonthChange[1] = {{ wxLua_wxCalendarCtrl_EnableMonthChange, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxCalendarCtrl_EnableMonthChange }};
//     void     EnableMonthChange(bool enable = true);
static int LUACALL wxLua_wxCalendarCtrl_EnableMonthChange(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool enable = true
    bool enable = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxCalendarCtrl * self = (wxCalendarCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarCtrl);
    // call EnableMonthChange
    self->EnableMonthChange(enable);

    return 0;
}


#if (!wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarCtrl_EnableYearChange[] = { &wxluatype_wxCalendarCtrl, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxCalendarCtrl_EnableYearChange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarCtrl_EnableYearChange[1] = {{ wxLua_wxCalendarCtrl_EnableYearChange, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxCalendarCtrl_EnableYearChange }};
//         void     EnableYearChange(bool enable = true);
static int LUACALL wxLua_wxCalendarCtrl_EnableYearChange(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool enable = true
    bool enable = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxCalendarCtrl * self = (wxCalendarCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarCtrl);
    // call EnableYearChange
    self->EnableYearChange(enable);

    return 0;
}

#endif // (!wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarCtrl_GetAttr[] = { &wxluatype_wxCalendarCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxCalendarCtrl_GetAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarCtrl_GetAttr[1] = {{ wxLua_wxCalendarCtrl_GetAttr, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCalendarCtrl_GetAttr }};
//     wxCalendarDateAttr* GetAttr(size_t day) const;
static int LUACALL wxLua_wxCalendarCtrl_GetAttr(lua_State *L)
{
    // size_t day
    size_t day = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxCalendarCtrl * self = (wxCalendarCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarCtrl);
    // call GetAttr
    wxCalendarDateAttr* returns = (wxCalendarDateAttr*)self->GetAttr(day);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCalendarDateAttr);

    return 1;
}


#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarCtrl_GetDate[] = { &wxluatype_wxCalendarCtrl, NULL };
static int LUACALL wxLua_wxCalendarCtrl_GetDate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarCtrl_GetDate[1] = {{ wxLua_wxCalendarCtrl_GetDate, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCalendarCtrl_GetDate }};
//     wxDateTime GetDate() const;
static int LUACALL wxLua_wxCalendarCtrl_GetDate(lua_State *L)
{
    // get this
    wxCalendarCtrl * self = (wxCalendarCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarCtrl);
    // call GetDate
    // allocate a new object using the copy constructor
    wxDateTime* returns = new wxDateTime(self->GetDate());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDateTime);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarCtrl_GetHeaderColourBg[] = { &wxluatype_wxCalendarCtrl, NULL };
static int LUACALL wxLua_wxCalendarCtrl_GetHeaderColourBg(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarCtrl_GetHeaderColourBg[1] = {{ wxLua_wxCalendarCtrl_GetHeaderColourBg, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCalendarCtrl_GetHeaderColourBg }};
//     wxColour GetHeaderColourBg() const;
static int LUACALL wxLua_wxCalendarCtrl_GetHeaderColourBg(lua_State *L)
{
    // get this
    wxCalendarCtrl * self = (wxCalendarCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarCtrl);
    // call GetHeaderColourBg
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetHeaderColourBg());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarCtrl_GetHeaderColourFg[] = { &wxluatype_wxCalendarCtrl, NULL };
static int LUACALL wxLua_wxCalendarCtrl_GetHeaderColourFg(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarCtrl_GetHeaderColourFg[1] = {{ wxLua_wxCalendarCtrl_GetHeaderColourFg, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCalendarCtrl_GetHeaderColourFg }};
//     wxColour GetHeaderColourFg() const;
static int LUACALL wxLua_wxCalendarCtrl_GetHeaderColourFg(lua_State *L)
{
    // get this
    wxCalendarCtrl * self = (wxCalendarCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarCtrl);
    // call GetHeaderColourFg
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetHeaderColourFg());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarCtrl_GetHighlightColourBg[] = { &wxluatype_wxCalendarCtrl, NULL };
static int LUACALL wxLua_wxCalendarCtrl_GetHighlightColourBg(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarCtrl_GetHighlightColourBg[1] = {{ wxLua_wxCalendarCtrl_GetHighlightColourBg, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCalendarCtrl_GetHighlightColourBg }};
//     wxColour GetHighlightColourBg() const;
static int LUACALL wxLua_wxCalendarCtrl_GetHighlightColourBg(lua_State *L)
{
    // get this
    wxCalendarCtrl * self = (wxCalendarCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarCtrl);
    // call GetHighlightColourBg
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetHighlightColourBg());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarCtrl_GetHighlightColourFg[] = { &wxluatype_wxCalendarCtrl, NULL };
static int LUACALL wxLua_wxCalendarCtrl_GetHighlightColourFg(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarCtrl_GetHighlightColourFg[1] = {{ wxLua_wxCalendarCtrl_GetHighlightColourFg, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCalendarCtrl_GetHighlightColourFg }};
//     wxColour GetHighlightColourFg() const;
static int LUACALL wxLua_wxCalendarCtrl_GetHighlightColourFg(lua_State *L)
{
    // get this
    wxCalendarCtrl * self = (wxCalendarCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarCtrl);
    // call GetHighlightColourFg
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetHighlightColourFg());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarCtrl_GetHolidayColourBg[] = { &wxluatype_wxCalendarCtrl, NULL };
static int LUACALL wxLua_wxCalendarCtrl_GetHolidayColourBg(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarCtrl_GetHolidayColourBg[1] = {{ wxLua_wxCalendarCtrl_GetHolidayColourBg, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCalendarCtrl_GetHolidayColourBg }};
//     wxColour GetHolidayColourBg() const;
static int LUACALL wxLua_wxCalendarCtrl_GetHolidayColourBg(lua_State *L)
{
    // get this
    wxCalendarCtrl * self = (wxCalendarCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarCtrl);
    // call GetHolidayColourBg
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetHolidayColourBg());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarCtrl_GetHolidayColourFg[] = { &wxluatype_wxCalendarCtrl, NULL };
static int LUACALL wxLua_wxCalendarCtrl_GetHolidayColourFg(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarCtrl_GetHolidayColourFg[1] = {{ wxLua_wxCalendarCtrl_GetHolidayColourFg, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCalendarCtrl_GetHolidayColourFg }};
//     wxColour GetHolidayColourFg() const;
static int LUACALL wxLua_wxCalendarCtrl_GetHolidayColourFg(lua_State *L)
{
    // get this
    wxCalendarCtrl * self = (wxCalendarCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarCtrl);
    // call GetHolidayColourFg
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetHolidayColourFg());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarCtrl_HitTest[] = { &wxluatype_wxCalendarCtrl, &wxluatype_wxPoint, NULL };
static int LUACALL wxLua_wxCalendarCtrl_HitTest(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarCtrl_HitTest[1] = {{ wxLua_wxCalendarCtrl_HitTest, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCalendarCtrl_HitTest }};
// %override wxLua_wxCalendarCtrl_HitTest
//     wxCalendarHitTestResult HitTest(const wxPoint& pos) //, wxDateTime* date = NULL, wxDateTime::WeekDay* wd = NULL)
static int LUACALL wxLua_wxCalendarCtrl_HitTest(lua_State *L)
{
    // const wxPoint pos
    const wxPoint * pos = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxCalendarCtrl * self = (wxCalendarCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarCtrl);
    // call HitTest
    wxDateTime* date = new wxDateTime();
    wxDateTime::WeekDay wd = wxDateTime::Inv_WeekDay;

    wxCalendarHitTestResult returns = self->HitTest(*pos, date, &wd);
    // push the result number
    lua_pushinteger(L, returns);
    wxluaT_pushuserdatatype(L, date, wxluatype_wxDateTime);
    lua_pushinteger(L, wd);

    return 3;
}


#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarCtrl_ResetAttr[] = { &wxluatype_wxCalendarCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxCalendarCtrl_ResetAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarCtrl_ResetAttr[1] = {{ wxLua_wxCalendarCtrl_ResetAttr, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCalendarCtrl_ResetAttr }};
//     void     ResetAttr(size_t day);
static int LUACALL wxLua_wxCalendarCtrl_ResetAttr(lua_State *L)
{
    // size_t day
    size_t day = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxCalendarCtrl * self = (wxCalendarCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarCtrl);
    // call ResetAttr
    self->ResetAttr(day);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarCtrl_SetAttr[] = { &wxluatype_wxCalendarCtrl, &wxluatype_TINTEGER, &wxluatype_wxCalendarDateAttr, NULL };
static int LUACALL wxLua_wxCalendarCtrl_SetAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarCtrl_SetAttr[1] = {{ wxLua_wxCalendarCtrl_SetAttr, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxCalendarCtrl_SetAttr }};
//     void     SetAttr(size_t day, %ungc wxCalendarDateAttr* attr); // will delete previously set attr as well
static int LUACALL wxLua_wxCalendarCtrl_SetAttr(lua_State *L)
{
    // wxCalendarDateAttr attr
    wxCalendarDateAttr * attr = (wxCalendarDateAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxCalendarDateAttr);
    // size_t day
    size_t day = (size_t)wxlua_getuintegertype(L, 2);
    if (wxluaO_isgcobject(L, attr)) wxluaO_undeletegcobject(L, attr);
    // get this
    wxCalendarCtrl * self = (wxCalendarCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarCtrl);
    // call SetAttr
    self->SetAttr(day, attr);

    return 0;
}


#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarCtrl_SetDate[] = { &wxluatype_wxCalendarCtrl, &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxCalendarCtrl_SetDate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarCtrl_SetDate[1] = {{ wxLua_wxCalendarCtrl_SetDate, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCalendarCtrl_SetDate }};
//     void     SetDate(const wxDateTime& date);
static int LUACALL wxLua_wxCalendarCtrl_SetDate(lua_State *L)
{
    // const wxDateTime date
    const wxDateTime * date = (const wxDateTime *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateTime);
    // get this
    wxCalendarCtrl * self = (wxCalendarCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarCtrl);
    // call SetDate
    self->SetDate(*date);

    return 0;
}

#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarCtrl_SetHeaderColours[] = { &wxluatype_wxCalendarCtrl, &wxluatype_wxColour, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxCalendarCtrl_SetHeaderColours(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarCtrl_SetHeaderColours[1] = {{ wxLua_wxCalendarCtrl_SetHeaderColours, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxCalendarCtrl_SetHeaderColours }};
//     void     SetHeaderColours(const wxColour& colFg, const wxColour& colBg);
static int LUACALL wxLua_wxCalendarCtrl_SetHeaderColours(lua_State *L)
{
    // const wxColour colBg
    const wxColour * colBg = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // const wxColour colFg
    const wxColour * colFg = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxCalendarCtrl * self = (wxCalendarCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarCtrl);
    // call SetHeaderColours
    self->SetHeaderColours(*colFg, *colBg);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarCtrl_SetHighlightColours[] = { &wxluatype_wxCalendarCtrl, &wxluatype_wxColour, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxCalendarCtrl_SetHighlightColours(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarCtrl_SetHighlightColours[1] = {{ wxLua_wxCalendarCtrl_SetHighlightColours, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxCalendarCtrl_SetHighlightColours }};
//     void     SetHighlightColours(const wxColour& colFg, const wxColour& colBg);
static int LUACALL wxLua_wxCalendarCtrl_SetHighlightColours(lua_State *L)
{
    // const wxColour colBg
    const wxColour * colBg = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // const wxColour colFg
    const wxColour * colFg = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxCalendarCtrl * self = (wxCalendarCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarCtrl);
    // call SetHighlightColours
    self->SetHighlightColours(*colFg, *colBg);

    return 0;
}

#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarCtrl_SetHoliday[] = { &wxluatype_wxCalendarCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxCalendarCtrl_SetHoliday(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarCtrl_SetHoliday[1] = {{ wxLua_wxCalendarCtrl_SetHoliday, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCalendarCtrl_SetHoliday }};
//     void     SetHoliday(size_t day);
static int LUACALL wxLua_wxCalendarCtrl_SetHoliday(lua_State *L)
{
    // size_t day
    size_t day = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxCalendarCtrl * self = (wxCalendarCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarCtrl);
    // call SetHoliday
    self->SetHoliday(day);

    return 0;
}


#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarCtrl_SetHolidayColours[] = { &wxluatype_wxCalendarCtrl, &wxluatype_wxColour, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxCalendarCtrl_SetHolidayColours(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarCtrl_SetHolidayColours[1] = {{ wxLua_wxCalendarCtrl_SetHolidayColours, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxCalendarCtrl_SetHolidayColours }};
//     void     SetHolidayColours(const wxColour& colFg, const wxColour& colBg);
static int LUACALL wxLua_wxCalendarCtrl_SetHolidayColours(lua_State *L)
{
    // const wxColour colBg
    const wxColour * colBg = (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour);
    // const wxColour colFg
    const wxColour * colFg = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxCalendarCtrl * self = (wxCalendarCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarCtrl);
    // call SetHolidayColours
    self->SetHolidayColours(*colFg, *colBg);

    return 0;
}

#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)

#if ((wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarCtrl_constructor[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxDateTime, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxCalendarCtrl_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarCtrl_constructor[1] = {{ wxLua_wxCalendarCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 7, s_wxluatypeArray_wxLua_wxCalendarCtrl_constructor }};
//     wxCalendarCtrl(wxWindow* parent, wxWindowID id, const wxDateTime& date = wxDefaultDateTime, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxCAL_SHOW_HOLIDAYS, const wxString& name = "wxCalendarCtrl");
static int LUACALL wxLua_wxCalendarCtrl_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxCalendarCtrl"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxCalendarCtrl")));
    // long style = wxCAL_SHOW_HOLIDAYS
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxCAL_SHOW_HOLIDAYS);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxDateTime date = wxDefaultDateTime
    const wxDateTime * date = (argCount >= 3 ? (const wxDateTime *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDateTime) : &wxDefaultDateTime);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxCalendarCtrl* returns = new wxCalendarCtrl(parent, id, *date, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCalendarCtrl);

    return 1;
}

#endif // ((wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)) && (wxLUA_USE_wxPointSizeRect)



void wxLua_wxCalendarCtrl_delete_function(void** p)
{
    wxCalendarCtrl* o = (wxCalendarCtrl*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxCalendarCtrl_methods[] = {
    { "EnableHolidayDisplay", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarCtrl_EnableHolidayDisplay, 1, NULL },
    { "EnableMonthChange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarCtrl_EnableMonthChange, 1, NULL },

#if (!wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)
    { "EnableYearChange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarCtrl_EnableYearChange, 1, NULL },
#endif // (!wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)

    { "GetAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarCtrl_GetAttr, 1, NULL },

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
    { "GetDate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarCtrl_GetDate, 1, NULL },
#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "GetHeaderColourBg", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarCtrl_GetHeaderColourBg, 1, NULL },
    { "GetHeaderColourFg", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarCtrl_GetHeaderColourFg, 1, NULL },
    { "GetHighlightColourBg", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarCtrl_GetHighlightColourBg, 1, NULL },
    { "GetHighlightColourFg", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarCtrl_GetHighlightColourFg, 1, NULL },
    { "GetHolidayColourBg", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarCtrl_GetHolidayColourBg, 1, NULL },
    { "GetHolidayColourFg", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarCtrl_GetHolidayColourFg, 1, NULL },
#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxPointSizeRect)
    { "HitTest", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarCtrl_HitTest, 1, NULL },
#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxPointSizeRect)

    { "ResetAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarCtrl_ResetAttr, 1, NULL },
    { "SetAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarCtrl_SetAttr, 1, NULL },

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
    { "SetDate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarCtrl_SetDate, 1, NULL },
#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "SetHeaderColours", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarCtrl_SetHeaderColours, 1, NULL },
    { "SetHighlightColours", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarCtrl_SetHighlightColours, 1, NULL },
#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)

    { "SetHoliday", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarCtrl_SetHoliday, 1, NULL },

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "SetHolidayColours", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarCtrl_SetHolidayColours, 1, NULL },
#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)

#if ((wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)) && (wxLUA_USE_wxPointSizeRect)
    { "wxCalendarCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxCalendarCtrl_constructor, 1, NULL },
#endif // ((wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)) && (wxLUA_USE_wxPointSizeRect)

    { 0, 0, 0, 0 },
};

int wxCalendarCtrl_methodCount = sizeof(wxCalendarCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL


#if wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL
// ---------------------------------------------------------------------------
// Bind class wxCalendarDateAttr
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxCalendarDateAttr'
int wxluatype_wxCalendarDateAttr = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarDateAttr_GetBackgroundColour[] = { &wxluatype_wxCalendarDateAttr, NULL };
static int LUACALL wxLua_wxCalendarDateAttr_GetBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_GetBackgroundColour[1] = {{ wxLua_wxCalendarDateAttr_GetBackgroundColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCalendarDateAttr_GetBackgroundColour }};
//     wxColour GetBackgroundColour();
static int LUACALL wxLua_wxCalendarDateAttr_GetBackgroundColour(lua_State *L)
{
    // get this
    wxCalendarDateAttr * self = (wxCalendarDateAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarDateAttr);
    // call GetBackgroundColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetBackgroundColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarDateAttr_GetBorder[] = { &wxluatype_wxCalendarDateAttr, NULL };
static int LUACALL wxLua_wxCalendarDateAttr_GetBorder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_GetBorder[1] = {{ wxLua_wxCalendarDateAttr_GetBorder, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCalendarDateAttr_GetBorder }};
//     wxCalendarDateBorder GetBorder();
static int LUACALL wxLua_wxCalendarDateAttr_GetBorder(lua_State *L)
{
    // get this
    wxCalendarDateAttr * self = (wxCalendarDateAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarDateAttr);
    // call GetBorder
    wxCalendarDateBorder returns = (self->GetBorder());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarDateAttr_GetBorderColour[] = { &wxluatype_wxCalendarDateAttr, NULL };
static int LUACALL wxLua_wxCalendarDateAttr_GetBorderColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_GetBorderColour[1] = {{ wxLua_wxCalendarDateAttr_GetBorderColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCalendarDateAttr_GetBorderColour }};
//     wxColour GetBorderColour() const;
static int LUACALL wxLua_wxCalendarDateAttr_GetBorderColour(lua_State *L)
{
    // get this
    wxCalendarDateAttr * self = (wxCalendarDateAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarDateAttr);
    // call GetBorderColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetBorderColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarDateAttr_GetFont[] = { &wxluatype_wxCalendarDateAttr, NULL };
static int LUACALL wxLua_wxCalendarDateAttr_GetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_GetFont[1] = {{ wxLua_wxCalendarDateAttr_GetFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCalendarDateAttr_GetFont }};
//     wxFont GetFont() const;
static int LUACALL wxLua_wxCalendarDateAttr_GetFont(lua_State *L)
{
    // get this
    wxCalendarDateAttr * self = (wxCalendarDateAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarDateAttr);
    // call GetFont
    // allocate a new object using the copy constructor
    wxFont* returns = new wxFont(self->GetFont());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxFont);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxFont)

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarDateAttr_GetTextColour[] = { &wxluatype_wxCalendarDateAttr, NULL };
static int LUACALL wxLua_wxCalendarDateAttr_GetTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_GetTextColour[1] = {{ wxLua_wxCalendarDateAttr_GetTextColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCalendarDateAttr_GetTextColour }};
//     wxColour GetTextColour() const;
static int LUACALL wxLua_wxCalendarDateAttr_GetTextColour(lua_State *L)
{
    // get this
    wxCalendarDateAttr * self = (wxCalendarDateAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarDateAttr);
    // call GetTextColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetTextColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarDateAttr_HasBackgroundColour[] = { &wxluatype_wxCalendarDateAttr, NULL };
static int LUACALL wxLua_wxCalendarDateAttr_HasBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_HasBackgroundColour[1] = {{ wxLua_wxCalendarDateAttr_HasBackgroundColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCalendarDateAttr_HasBackgroundColour }};
//     bool HasBackgroundColour() const;
static int LUACALL wxLua_wxCalendarDateAttr_HasBackgroundColour(lua_State *L)
{
    // get this
    wxCalendarDateAttr * self = (wxCalendarDateAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarDateAttr);
    // call HasBackgroundColour
    bool returns = (self->HasBackgroundColour());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarDateAttr_HasBorder[] = { &wxluatype_wxCalendarDateAttr, NULL };
static int LUACALL wxLua_wxCalendarDateAttr_HasBorder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_HasBorder[1] = {{ wxLua_wxCalendarDateAttr_HasBorder, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCalendarDateAttr_HasBorder }};
//     bool HasBorder() const;
static int LUACALL wxLua_wxCalendarDateAttr_HasBorder(lua_State *L)
{
    // get this
    wxCalendarDateAttr * self = (wxCalendarDateAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarDateAttr);
    // call HasBorder
    bool returns = (self->HasBorder());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarDateAttr_HasBorderColour[] = { &wxluatype_wxCalendarDateAttr, NULL };
static int LUACALL wxLua_wxCalendarDateAttr_HasBorderColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_HasBorderColour[1] = {{ wxLua_wxCalendarDateAttr_HasBorderColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCalendarDateAttr_HasBorderColour }};
//     bool HasBorderColour() const;
static int LUACALL wxLua_wxCalendarDateAttr_HasBorderColour(lua_State *L)
{
    // get this
    wxCalendarDateAttr * self = (wxCalendarDateAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarDateAttr);
    // call HasBorderColour
    bool returns = (self->HasBorderColour());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarDateAttr_HasFont[] = { &wxluatype_wxCalendarDateAttr, NULL };
static int LUACALL wxLua_wxCalendarDateAttr_HasFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_HasFont[1] = {{ wxLua_wxCalendarDateAttr_HasFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCalendarDateAttr_HasFont }};
//     bool HasFont() const;
static int LUACALL wxLua_wxCalendarDateAttr_HasFont(lua_State *L)
{
    // get this
    wxCalendarDateAttr * self = (wxCalendarDateAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarDateAttr);
    // call HasFont
    bool returns = (self->HasFont());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarDateAttr_HasTextColour[] = { &wxluatype_wxCalendarDateAttr, NULL };
static int LUACALL wxLua_wxCalendarDateAttr_HasTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_HasTextColour[1] = {{ wxLua_wxCalendarDateAttr_HasTextColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCalendarDateAttr_HasTextColour }};
//     bool HasTextColour() const;
static int LUACALL wxLua_wxCalendarDateAttr_HasTextColour(lua_State *L)
{
    // get this
    wxCalendarDateAttr * self = (wxCalendarDateAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarDateAttr);
    // call HasTextColour
    bool returns = (self->HasTextColour());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarDateAttr_IsHoliday[] = { &wxluatype_wxCalendarDateAttr, NULL };
static int LUACALL wxLua_wxCalendarDateAttr_IsHoliday(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_IsHoliday[1] = {{ wxLua_wxCalendarDateAttr_IsHoliday, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCalendarDateAttr_IsHoliday }};
//     bool IsHoliday() const;
static int LUACALL wxLua_wxCalendarDateAttr_IsHoliday(lua_State *L)
{
    // get this
    wxCalendarDateAttr * self = (wxCalendarDateAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarDateAttr);
    // call IsHoliday
    bool returns = (self->IsHoliday());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarDateAttr_SetBackgroundColour[] = { &wxluatype_wxCalendarDateAttr, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxCalendarDateAttr_SetBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_SetBackgroundColour[1] = {{ wxLua_wxCalendarDateAttr_SetBackgroundColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCalendarDateAttr_SetBackgroundColour }};
//     void SetBackgroundColour(const wxColour& colBack);
static int LUACALL wxLua_wxCalendarDateAttr_SetBackgroundColour(lua_State *L)
{
    // const wxColour colBack
    const wxColour * colBack = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxCalendarDateAttr * self = (wxCalendarDateAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarDateAttr);
    // call SetBackgroundColour
    self->SetBackgroundColour(*colBack);

    return 0;
}

#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarDateAttr_SetBorder[] = { &wxluatype_wxCalendarDateAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxCalendarDateAttr_SetBorder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_SetBorder[1] = {{ wxLua_wxCalendarDateAttr_SetBorder, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCalendarDateAttr_SetBorder }};
//     void SetBorder(wxCalendarDateBorder border);
static int LUACALL wxLua_wxCalendarDateAttr_SetBorder(lua_State *L)
{
    // wxCalendarDateBorder border
    wxCalendarDateBorder border = (wxCalendarDateBorder)wxlua_getenumtype(L, 2);
    // get this
    wxCalendarDateAttr * self = (wxCalendarDateAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarDateAttr);
    // call SetBorder
    self->SetBorder(border);

    return 0;
}


#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarDateAttr_SetBorderColour[] = { &wxluatype_wxCalendarDateAttr, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxCalendarDateAttr_SetBorderColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_SetBorderColour[1] = {{ wxLua_wxCalendarDateAttr_SetBorderColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCalendarDateAttr_SetBorderColour }};
//     void SetBorderColour(const wxColour& col);
static int LUACALL wxLua_wxCalendarDateAttr_SetBorderColour(lua_State *L)
{
    // const wxColour col
    const wxColour * col = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxCalendarDateAttr * self = (wxCalendarDateAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarDateAttr);
    // call SetBorderColour
    self->SetBorderColour(*col);

    return 0;
}

#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarDateAttr_SetFont[] = { &wxluatype_wxCalendarDateAttr, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxCalendarDateAttr_SetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_SetFont[1] = {{ wxLua_wxCalendarDateAttr_SetFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCalendarDateAttr_SetFont }};
//     void SetFont(const wxFont& font);
static int LUACALL wxLua_wxCalendarDateAttr_SetFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxCalendarDateAttr * self = (wxCalendarDateAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarDateAttr);
    // call SetFont
    self->SetFont(*font);

    return 0;
}

#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxFont)

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarDateAttr_SetHoliday[] = { &wxluatype_wxCalendarDateAttr, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxCalendarDateAttr_SetHoliday(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_SetHoliday[1] = {{ wxLua_wxCalendarDateAttr_SetHoliday, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCalendarDateAttr_SetHoliday }};
//     void SetHoliday(bool holiday);
static int LUACALL wxLua_wxCalendarDateAttr_SetHoliday(lua_State *L)
{
    // bool holiday
    bool holiday = wxlua_getbooleantype(L, 2);
    // get this
    wxCalendarDateAttr * self = (wxCalendarDateAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarDateAttr);
    // call SetHoliday
    self->SetHoliday(holiday);

    return 0;
}


#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarDateAttr_SetTextColour[] = { &wxluatype_wxCalendarDateAttr, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxCalendarDateAttr_SetTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_SetTextColour[1] = {{ wxLua_wxCalendarDateAttr_SetTextColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCalendarDateAttr_SetTextColour }};
//     void SetTextColour(const wxColour& colText);
static int LUACALL wxLua_wxCalendarDateAttr_SetTextColour(lua_State *L)
{
    // const wxColour colText
    const wxColour * colText = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxCalendarDateAttr * self = (wxCalendarDateAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarDateAttr);
    // call SetTextColour
    self->SetTextColour(*colText);

    return 0;
}

#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarDateAttr_delete[] = { &wxluatype_wxCalendarDateAttr, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxCalendarDateAttr_delete }};


#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarDateAttr_constructor2[] = { &wxluatype_TINTEGER, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxCalendarDateAttr_constructor2(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_constructor2[1] = {{ wxLua_wxCalendarDateAttr_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxCalendarDateAttr_constructor2 }};
//     wxCalendarDateAttr(wxCalendarDateBorder border, const wxColour& colBorder = wxNullColour);
static int LUACALL wxLua_wxCalendarDateAttr_constructor2(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxColour colBorder = wxNullColour
    const wxColour * colBorder = (argCount >= 2 ? (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour) : &wxNullColour);
    // wxCalendarDateBorder border
    wxCalendarDateBorder border = (wxCalendarDateBorder)wxlua_getenumtype(L, 1);
    // call constructor
    wxCalendarDateAttr* returns = new wxCalendarDateAttr(border, *colBorder);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxCalendarDateAttr);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCalendarDateAttr);

    return 1;
}

#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)

#if ((wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarDateAttr_constructor1[] = { &wxluatype_wxColour, &wxluatype_wxColour, &wxluatype_wxColour, &wxluatype_wxFont, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxCalendarDateAttr_constructor1(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_constructor1[1] = {{ wxLua_wxCalendarDateAttr_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 5, s_wxluatypeArray_wxLua_wxCalendarDateAttr_constructor1 }};
//     wxCalendarDateAttr(const wxColour& colText, const wxColour& colBack = wxNullColour, const wxColour& colBorder = wxNullColour, const wxFont& font = wxNullFont, wxCalendarDateBorder border = wxCAL_BORDER_NONE);
static int LUACALL wxLua_wxCalendarDateAttr_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxCalendarDateBorder border = wxCAL_BORDER_NONE
    wxCalendarDateBorder border = (argCount >= 5 ? (wxCalendarDateBorder)wxlua_getenumtype(L, 5) : wxCAL_BORDER_NONE);
    // const wxFont font = wxNullFont
    const wxFont * font = (argCount >= 4 ? (const wxFont *)wxluaT_getuserdatatype(L, 4, wxluatype_wxFont) : &wxNullFont);
    // const wxColour colBorder = wxNullColour
    const wxColour * colBorder = (argCount >= 3 ? (const wxColour *)wxluaT_getuserdatatype(L, 3, wxluatype_wxColour) : &wxNullColour);
    // const wxColour colBack = wxNullColour
    const wxColour * colBack = (argCount >= 2 ? (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour) : &wxNullColour);
    // const wxColour colText
    const wxColour * colText = (const wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call constructor
    wxCalendarDateAttr* returns = new wxCalendarDateAttr(*colText, *colBack, *colBorder, *font, border);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxCalendarDateAttr);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCalendarDateAttr);

    return 1;
}

#endif // ((wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)) && (wxLUA_USE_wxFont)

static int LUACALL wxLua_wxCalendarDateAttr_constructor(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_constructor[1] = {{ wxLua_wxCalendarDateAttr_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxCalendarDateAttr();
static int LUACALL wxLua_wxCalendarDateAttr_constructor(lua_State *L)
{
    // call constructor
    wxCalendarDateAttr* returns = new wxCalendarDateAttr();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxCalendarDateAttr);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCalendarDateAttr);

    return 1;
}




#if ((wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush))||(((wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)) && (wxLUA_USE_wxFont))||(wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarDateAttr_constructor_overload[] =
{

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)
    { wxLua_wxCalendarDateAttr_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxCalendarDateAttr_constructor2 },
#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)

#if ((wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)) && (wxLUA_USE_wxFont)
    { wxLua_wxCalendarDateAttr_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 5, s_wxluatypeArray_wxLua_wxCalendarDateAttr_constructor1 },
#endif // ((wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)) && (wxLUA_USE_wxFont)
    { wxLua_wxCalendarDateAttr_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxCalendarDateAttr_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxCalendarDateAttr_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush))||(((wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)) && (wxLUA_USE_wxFont))||(wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)

void wxLua_wxCalendarDateAttr_delete_function(void** p)
{
    wxCalendarDateAttr* o = (wxCalendarDateAttr*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxCalendarDateAttr_methods[] = {
#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "GetBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarDateAttr_GetBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)

    { "GetBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarDateAttr_GetBorder, 1, NULL },

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "GetBorderColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarDateAttr_GetBorderColour, 1, NULL },
#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxFont)
    { "GetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarDateAttr_GetFont, 1, NULL },
#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxFont)

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "GetTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarDateAttr_GetTextColour, 1, NULL },
#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)

    { "HasBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarDateAttr_HasBackgroundColour, 1, NULL },
    { "HasBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarDateAttr_HasBorder, 1, NULL },
    { "HasBorderColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarDateAttr_HasBorderColour, 1, NULL },
    { "HasFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarDateAttr_HasFont, 1, NULL },
    { "HasTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarDateAttr_HasTextColour, 1, NULL },
    { "IsHoliday", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarDateAttr_IsHoliday, 1, NULL },

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "SetBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarDateAttr_SetBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)

    { "SetBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarDateAttr_SetBorder, 1, NULL },

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "SetBorderColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarDateAttr_SetBorderColour, 1, NULL },
#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxFont)
    { "SetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarDateAttr_SetFont, 1, NULL },
#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxFont)

    { "SetHoliday", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarDateAttr_SetHoliday, 1, NULL },

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)
    { "SetTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarDateAttr_SetTextColour, 1, NULL },
#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxCalendarDateAttr_delete, 1, NULL },

#if ((wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush))||(((wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)) && (wxLUA_USE_wxFont))||(wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)
    { "wxCalendarDateAttr", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxCalendarDateAttr_constructor_overload, s_wxluafunc_wxLua_wxCalendarDateAttr_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush))||(((wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxColourPenBrush)) && (wxLUA_USE_wxFont))||(wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)

    { 0, 0, 0, 0 },
};

int wxCalendarDateAttr_methodCount = sizeof(wxCalendarDateAttr_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL


#if wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL
// ---------------------------------------------------------------------------
// Bind class wxDateEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDateEvent'
int wxluatype_wxDateEvent = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDateEvent_GetDate[] = { &wxluatype_wxDateEvent, NULL };
static int LUACALL wxLua_wxDateEvent_GetDate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateEvent_GetDate[1] = {{ wxLua_wxDateEvent_GetDate, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDateEvent_GetDate }};
//     wxDateTime GetDate() const;
static int LUACALL wxLua_wxDateEvent_GetDate(lua_State *L)
{
    // get this
    wxDateEvent * self = (wxDateEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateEvent);
    // call GetDate
    // allocate a new object using the copy constructor
    wxDateTime* returns = new wxDateTime(self->GetDate());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDateTime);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateTime);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateEvent_SetDate[] = { &wxluatype_wxDateEvent, &wxluatype_wxDateTime, NULL };
static int LUACALL wxLua_wxDateEvent_SetDate(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateEvent_SetDate[1] = {{ wxLua_wxDateEvent_SetDate, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDateEvent_SetDate }};
//     void SetDate(const wxDateTime &date);
static int LUACALL wxLua_wxDateEvent_SetDate(lua_State *L)
{
    // const wxDateTime date
    const wxDateTime * date = (const wxDateTime *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateTime);
    // get this
    wxDateEvent * self = (wxDateEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDateEvent);
    // call SetDate
    self->SetDate(*date);

    return 0;
}

#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDateEvent_delete[] = { &wxluatype_wxDateEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDateEvent_delete }};


#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDateEvent_constructor[] = { &wxluatype_wxWindow, &wxluatype_wxDateTime, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDateEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDateEvent_constructor[1] = {{ wxLua_wxDateEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxDateEvent_constructor }};
//     wxDateEvent(wxWindow *win, const wxDateTime& dt, wxEventType type);
static int LUACALL wxLua_wxDateEvent_constructor(lua_State *L)
{
    // wxEventType type
    wxEventType type = (wxEventType)wxlua_getnumbertype(L, 3);
    // const wxDateTime dt
    const wxDateTime * dt = (const wxDateTime *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateTime);
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxDateEvent* returns = new wxDateEvent(win, *dt, type);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDateEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDateEvent);

    return 1;
}

#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)



void wxLua_wxDateEvent_delete_function(void** p)
{
    wxDateEvent* o = (wxDateEvent*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDateEvent_methods[] = {
#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
    { "GetDate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateEvent_GetDate, 1, NULL },
    { "SetDate", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDateEvent_SetDate, 1, NULL },
#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDateEvent_delete, 1, NULL },

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
    { "wxDateEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDateEvent_constructor, 1, NULL },
#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

    { 0, 0, 0, 0 },
};

int wxDateEvent_methodCount = sizeof(wxDateEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL


#if wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL
// ---------------------------------------------------------------------------
// Bind class wxCalendarEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxCalendarEvent'
int wxluatype_wxCalendarEvent = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarEvent_GetWeekDay[] = { &wxluatype_wxCalendarEvent, NULL };
static int LUACALL wxLua_wxCalendarEvent_GetWeekDay(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarEvent_GetWeekDay[1] = {{ wxLua_wxCalendarEvent_GetWeekDay, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCalendarEvent_GetWeekDay }};
//     wxDateTime::WeekDay GetWeekDay() const;
static int LUACALL wxLua_wxCalendarEvent_GetWeekDay(lua_State *L)
{
    // get this
    wxCalendarEvent * self = (wxCalendarEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarEvent);
    // call GetWeekDay
    wxDateTime::WeekDay returns = (self->GetWeekDay());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarEvent_SetWeekDay[] = { &wxluatype_wxCalendarEvent, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxCalendarEvent_SetWeekDay(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarEvent_SetWeekDay[1] = {{ wxLua_wxCalendarEvent_SetWeekDay, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCalendarEvent_SetWeekDay }};
//     void SetWeekDay(const wxDateTime::WeekDay wd);
static int LUACALL wxLua_wxCalendarEvent_SetWeekDay(lua_State *L)
{
    // const wxDateTime::WeekDay wd
    const wxDateTime::WeekDay wd = (const wxDateTime::WeekDay)wxlua_getenumtype(L, 2);
    // get this
    wxCalendarEvent * self = (wxCalendarEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarEvent);
    // call SetWeekDay
    self->SetWeekDay(wd);

    return 0;
}

#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarEvent_delete[] = { &wxluatype_wxCalendarEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxCalendarEvent_delete }};


#if (((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarEvent_constructor2[] = { &wxluatype_wxWindow, &wxluatype_wxDateTime, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxCalendarEvent_constructor2(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarEvent_constructor2[1] = {{ wxLua_wxCalendarEvent_constructor2, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxCalendarEvent_constructor2 }};
//     %wxchkver_2_9_2 wxCalendarEvent(wxWindow *win, const wxDateTime& dt, wxEventType type);
static int LUACALL wxLua_wxCalendarEvent_constructor2(lua_State *L)
{
    // wxEventType type
    wxEventType type = (wxEventType)wxlua_getnumbertype(L, 3);
    // const wxDateTime dt
    const wxDateTime * dt = (const wxDateTime *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDateTime);
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxCalendarEvent* returns = new wxCalendarEvent(win, *dt, type);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxCalendarEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCalendarEvent);

    return 1;
}

#endif // (((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

#if ((!wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarEvent_constructor1[] = { &wxluatype_wxCalendarCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxCalendarEvent_constructor1(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarEvent_constructor1[1] = {{ wxLua_wxCalendarEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxCalendarEvent_constructor1 }};
//     !%wxchkver_2_9_2 wxCalendarEvent(wxCalendarCtrl *cal, wxEventType type);
static int LUACALL wxLua_wxCalendarEvent_constructor1(lua_State *L)
{
    // wxEventType type
    wxEventType type = (wxEventType)wxlua_getnumbertype(L, 2);
    // wxCalendarCtrl cal
    wxCalendarCtrl * cal = (wxCalendarCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarCtrl);
    // call constructor
    wxCalendarEvent* returns = new wxCalendarEvent(cal, type);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxCalendarEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCalendarEvent);

    return 1;
}

#endif // ((!wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)

#if ((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalendarEvent_constructor[] = { &wxluatype_wxCalendarEvent, NULL };
static int LUACALL wxLua_wxCalendarEvent_constructor(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarEvent_constructor[1] = {{ wxLua_wxCalendarEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxCalendarEvent_constructor }};
//     %wxchkver_2_9_2 wxCalendarEvent(const wxCalendarEvent& event);
static int LUACALL wxLua_wxCalendarEvent_constructor(lua_State *L)
{
    // const wxCalendarEvent event
    const wxCalendarEvent * event = (const wxCalendarEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalendarEvent);
    // call constructor
    wxCalendarEvent* returns = new wxCalendarEvent(*event);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxCalendarEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCalendarEvent);

    return 1;
}

#endif // ((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)



#if ((((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME))||(((!wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL))||(((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalendarEvent_constructor_overload[] =
{

#if (((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
    { wxLua_wxCalendarEvent_constructor2, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxCalendarEvent_constructor2 },
#endif // (((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

#if ((!wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)
    { wxLua_wxCalendarEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxCalendarEvent_constructor1 },
#endif // ((!wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)

#if ((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)
    { wxLua_wxCalendarEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxCalendarEvent_constructor },
#endif // ((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)
};
static int s_wxluafunc_wxLua_wxCalendarEvent_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxCalendarEvent_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME))||(((!wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL))||(((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL))

void wxLua_wxCalendarEvent_delete_function(void** p)
{
    wxCalendarEvent* o = (wxCalendarEvent*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxCalendarEvent_methods[] = {
#if (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)
    { "GetWeekDay", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarEvent_GetWeekDay, 1, NULL },
    { "SetWeekDay", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalendarEvent_SetWeekDay, 1, NULL },
#endif // (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxCalendarEvent_delete, 1, NULL },

#if ((((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME))||(((!wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL))||(((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL))
    { "wxCalendarEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxCalendarEvent_constructor_overload, s_wxluafunc_wxLua_wxCalendarEvent_constructor_overload_count, 0 },
#endif // ((((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxDateTime && wxUSE_DATETIME))||(((!wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL))||(((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL)) && (wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL))

    { 0, 0, 0, 0 },
};

int wxCalendarEvent_methodCount = sizeof(wxCalendarEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL


#if wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl
// ---------------------------------------------------------------------------
// Bind class wxHyperlinkCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHyperlinkCtrl'
int wxluatype_wxHyperlinkCtrl = WXLUA_TUNKNOWN;

#if (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHyperlinkCtrl_Create[] = { &wxluatype_wxHyperlinkCtrl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHyperlinkCtrl_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHyperlinkCtrl_Create[1] = {{ wxLua_wxHyperlinkCtrl_Create, WXLUAMETHOD_METHOD, 5, 9, s_wxluatypeArray_wxLua_wxHyperlinkCtrl_Create }};
//     bool Create(wxWindow *parent, wxWindowID id, const wxString& label, const wxString& url, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxHL_DEFAULT_STYLE, const wxString& name = "wxHyperlinkCtrl");
static int LUACALL wxLua_wxHyperlinkCtrl_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxHyperlinkCtrl"
    const wxString name = (argCount >= 9 ? wxlua_getwxStringtype(L, 9) : wxString(wxT("wxHyperlinkCtrl")));
    // long style = wxHL_DEFAULT_STYLE
    long style = (argCount >= 8 ? (long)wxlua_getnumbertype(L, 8) : wxHL_DEFAULT_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 7 ? (const wxSize *)wxluaT_getuserdatatype(L, 7, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 6 ? (const wxPoint *)wxluaT_getuserdatatype(L, 6, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString url
    const wxString url = wxlua_getwxStringtype(L, 5);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 4);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxHyperlinkCtrl * self = (wxHyperlinkCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHyperlinkCtrl);
    // call Create
    bool returns = (self->Create(parent, id, label, url, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxPointSizeRect)

#if (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHyperlinkCtrl_GetHoverColour[] = { &wxluatype_wxHyperlinkCtrl, NULL };
static int LUACALL wxLua_wxHyperlinkCtrl_GetHoverColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHyperlinkCtrl_GetHoverColour[1] = {{ wxLua_wxHyperlinkCtrl_GetHoverColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHyperlinkCtrl_GetHoverColour }};
//     wxColour GetHoverColour() const;
static int LUACALL wxLua_wxHyperlinkCtrl_GetHoverColour(lua_State *L)
{
    // get this
    wxHyperlinkCtrl * self = (wxHyperlinkCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHyperlinkCtrl);
    // call GetHoverColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetHoverColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHyperlinkCtrl_GetNormalColour[] = { &wxluatype_wxHyperlinkCtrl, NULL };
static int LUACALL wxLua_wxHyperlinkCtrl_GetNormalColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHyperlinkCtrl_GetNormalColour[1] = {{ wxLua_wxHyperlinkCtrl_GetNormalColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHyperlinkCtrl_GetNormalColour }};
//     wxColour GetNormalColour() const;
static int LUACALL wxLua_wxHyperlinkCtrl_GetNormalColour(lua_State *L)
{
    // get this
    wxHyperlinkCtrl * self = (wxHyperlinkCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHyperlinkCtrl);
    // call GetNormalColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetNormalColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHyperlinkCtrl_GetURL[] = { &wxluatype_wxHyperlinkCtrl, NULL };
static int LUACALL wxLua_wxHyperlinkCtrl_GetURL(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHyperlinkCtrl_GetURL[1] = {{ wxLua_wxHyperlinkCtrl_GetURL, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHyperlinkCtrl_GetURL }};
//     wxString GetURL() const;
static int LUACALL wxLua_wxHyperlinkCtrl_GetURL(lua_State *L)
{
    // get this
    wxHyperlinkCtrl * self = (wxHyperlinkCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHyperlinkCtrl);
    // call GetURL
    wxString returns = (self->GetURL());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHyperlinkCtrl_GetVisited[] = { &wxluatype_wxHyperlinkCtrl, NULL };
static int LUACALL wxLua_wxHyperlinkCtrl_GetVisited(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHyperlinkCtrl_GetVisited[1] = {{ wxLua_wxHyperlinkCtrl_GetVisited, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHyperlinkCtrl_GetVisited }};
//     bool     GetVisited() const;
static int LUACALL wxLua_wxHyperlinkCtrl_GetVisited(lua_State *L)
{
    // get this
    wxHyperlinkCtrl * self = (wxHyperlinkCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHyperlinkCtrl);
    // call GetVisited
    bool returns = (self->GetVisited());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHyperlinkCtrl_GetVisitedColour[] = { &wxluatype_wxHyperlinkCtrl, NULL };
static int LUACALL wxLua_wxHyperlinkCtrl_GetVisitedColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHyperlinkCtrl_GetVisitedColour[1] = {{ wxLua_wxHyperlinkCtrl_GetVisitedColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHyperlinkCtrl_GetVisitedColour }};
//     wxColour GetVisitedColour() const;
static int LUACALL wxLua_wxHyperlinkCtrl_GetVisitedColour(lua_State *L)
{
    // get this
    wxHyperlinkCtrl * self = (wxHyperlinkCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHyperlinkCtrl);
    // call GetVisitedColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetVisitedColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHyperlinkCtrl_SetHoverColour[] = { &wxluatype_wxHyperlinkCtrl, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxHyperlinkCtrl_SetHoverColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHyperlinkCtrl_SetHoverColour[1] = {{ wxLua_wxHyperlinkCtrl_SetHoverColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHyperlinkCtrl_SetHoverColour }};
//     void SetHoverColour(const wxColour &colour);
static int LUACALL wxLua_wxHyperlinkCtrl_SetHoverColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxHyperlinkCtrl * self = (wxHyperlinkCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHyperlinkCtrl);
    // call SetHoverColour
    self->SetHoverColour(*colour);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHyperlinkCtrl_SetNormalColour[] = { &wxluatype_wxHyperlinkCtrl, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxHyperlinkCtrl_SetNormalColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHyperlinkCtrl_SetNormalColour[1] = {{ wxLua_wxHyperlinkCtrl_SetNormalColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHyperlinkCtrl_SetNormalColour }};
//     void SetNormalColour(const wxColour &colour);
static int LUACALL wxLua_wxHyperlinkCtrl_SetNormalColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxHyperlinkCtrl * self = (wxHyperlinkCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHyperlinkCtrl);
    // call SetNormalColour
    self->SetNormalColour(*colour);

    return 0;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHyperlinkCtrl_SetURL[] = { &wxluatype_wxHyperlinkCtrl, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHyperlinkCtrl_SetURL(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHyperlinkCtrl_SetURL[1] = {{ wxLua_wxHyperlinkCtrl_SetURL, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHyperlinkCtrl_SetURL }};
//     void SetURL (const wxString &url);
static int LUACALL wxLua_wxHyperlinkCtrl_SetURL(lua_State *L)
{
    // const wxString url
    const wxString url = wxlua_getwxStringtype(L, 2);
    // get this
    wxHyperlinkCtrl * self = (wxHyperlinkCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHyperlinkCtrl);
    // call SetURL
    self->SetURL(url);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHyperlinkCtrl_SetVisited[] = { &wxluatype_wxHyperlinkCtrl, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxHyperlinkCtrl_SetVisited(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHyperlinkCtrl_SetVisited[1] = {{ wxLua_wxHyperlinkCtrl_SetVisited, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxHyperlinkCtrl_SetVisited }};
//     void SetVisited(bool visited = true);
static int LUACALL wxLua_wxHyperlinkCtrl_SetVisited(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool visited = true
    bool visited = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxHyperlinkCtrl * self = (wxHyperlinkCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHyperlinkCtrl);
    // call SetVisited
    self->SetVisited(visited);

    return 0;
}


#if (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHyperlinkCtrl_SetVisitedColour[] = { &wxluatype_wxHyperlinkCtrl, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxHyperlinkCtrl_SetVisitedColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHyperlinkCtrl_SetVisitedColour[1] = {{ wxLua_wxHyperlinkCtrl_SetVisitedColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHyperlinkCtrl_SetVisitedColour }};
//     void SetVisitedColour(const wxColour &colour);
static int LUACALL wxLua_wxHyperlinkCtrl_SetVisitedColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxHyperlinkCtrl * self = (wxHyperlinkCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHyperlinkCtrl);
    // call SetVisitedColour
    self->SetVisitedColour(*colour);

    return 0;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxColourPenBrush)

#if (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHyperlinkCtrl_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHyperlinkCtrl_constructor1(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxHyperlinkCtrl_constructor1[1] = {{ wxLua_wxHyperlinkCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 4, 8, s_wxluatypeArray_wxLua_wxHyperlinkCtrl_constructor1 }};
//     wxHyperlinkCtrl(wxWindow *parent, wxWindowID id, const wxString& label, const wxString& url, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxHL_DEFAULT_STYLE, const wxString& name = "wxHyperlinkCtrl");
static int LUACALL wxLua_wxHyperlinkCtrl_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxHyperlinkCtrl"
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxT("wxHyperlinkCtrl")));
    // long style = wxHL_DEFAULT_STYLE
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : wxHL_DEFAULT_STYLE);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 6 ? (const wxSize *)wxluaT_getuserdatatype(L, 6, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxString url
    const wxString url = wxlua_getwxStringtype(L, 4);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 3);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxHyperlinkCtrl* returns = new wxHyperlinkCtrl(parent, id, label, url, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHyperlinkCtrl);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxPointSizeRect)

static int LUACALL wxLua_wxHyperlinkCtrl_constructor(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxHyperlinkCtrl_constructor[1] = {{ wxLua_wxHyperlinkCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxHyperlinkCtrl();
static int LUACALL wxLua_wxHyperlinkCtrl_constructor(lua_State *L)
{
    // call constructor
    wxHyperlinkCtrl* returns = new wxHyperlinkCtrl();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHyperlinkCtrl);

    return 1;
}




#if ((wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxPointSizeRect))||(wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHyperlinkCtrl_constructor_overload[] =
{

#if (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxHyperlinkCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 4, 8, s_wxluatypeArray_wxLua_wxHyperlinkCtrl_constructor1 },
#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxHyperlinkCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxHyperlinkCtrl_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxHyperlinkCtrl_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxPointSizeRect))||(wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl)

void wxLua_wxHyperlinkCtrl_delete_function(void** p)
{
    wxHyperlinkCtrl* o = (wxHyperlinkCtrl*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHyperlinkCtrl_methods[] = {
#if (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxPointSizeRect)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHyperlinkCtrl_Create, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxPointSizeRect)

#if (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxColourPenBrush)
    { "GetHoverColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHyperlinkCtrl_GetHoverColour, 1, NULL },
    { "GetNormalColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHyperlinkCtrl_GetNormalColour, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxColourPenBrush)

    { "GetURL", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHyperlinkCtrl_GetURL, 1, NULL },
    { "GetVisited", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHyperlinkCtrl_GetVisited, 1, NULL },

#if (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxColourPenBrush)
    { "GetVisitedColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHyperlinkCtrl_GetVisitedColour, 1, NULL },
    { "SetHoverColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHyperlinkCtrl_SetHoverColour, 1, NULL },
    { "SetNormalColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHyperlinkCtrl_SetNormalColour, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxColourPenBrush)

    { "SetURL", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHyperlinkCtrl_SetURL, 1, NULL },
    { "SetVisited", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHyperlinkCtrl_SetVisited, 1, NULL },

#if (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxColourPenBrush)
    { "SetVisitedColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHyperlinkCtrl_SetVisitedColour, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxColourPenBrush)

#if ((wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxPointSizeRect))||(wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl)
    { "wxHyperlinkCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxHyperlinkCtrl_constructor_overload, s_wxluafunc_wxLua_wxHyperlinkCtrl_constructor_overload_count, 0 },
#endif // ((wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxPointSizeRect))||(wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl)

    { 0, 0, 0, 0 },
};

int wxHyperlinkCtrl_methodCount = sizeof(wxHyperlinkCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl


#if wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl
// ---------------------------------------------------------------------------
// Bind class wxHyperlinkEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHyperlinkEvent'
int wxluatype_wxHyperlinkEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxHyperlinkEvent_GetURL[] = { &wxluatype_wxHyperlinkEvent, NULL };
static int LUACALL wxLua_wxHyperlinkEvent_GetURL(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHyperlinkEvent_GetURL[1] = {{ wxLua_wxHyperlinkEvent_GetURL, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHyperlinkEvent_GetURL }};
//     wxString GetURL() const;
static int LUACALL wxLua_wxHyperlinkEvent_GetURL(lua_State *L)
{
    // get this
    wxHyperlinkEvent * self = (wxHyperlinkEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHyperlinkEvent);
    // call GetURL
    wxString returns = (self->GetURL());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHyperlinkEvent_SetURL[] = { &wxluatype_wxHyperlinkEvent, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHyperlinkEvent_SetURL(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHyperlinkEvent_SetURL[1] = {{ wxLua_wxHyperlinkEvent_SetURL, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHyperlinkEvent_SetURL }};
//     void SetURL(const wxString &url);
static int LUACALL wxLua_wxHyperlinkEvent_SetURL(lua_State *L)
{
    // const wxString url
    const wxString url = wxlua_getwxStringtype(L, 2);
    // get this
    wxHyperlinkEvent * self = (wxHyperlinkEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHyperlinkEvent);
    // call SetURL
    self->SetURL(url);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHyperlinkEvent_delete[] = { &wxluatype_wxHyperlinkEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHyperlinkEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxHyperlinkEvent_delete }};


#if (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxObject)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHyperlinkEvent_constructor[] = { &wxluatype_wxObject, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxHyperlinkEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHyperlinkEvent_constructor[1] = {{ wxLua_wxHyperlinkEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxHyperlinkEvent_constructor }};
//     wxHyperlinkEvent(wxObject *generator, wxWindowID id, const wxString& url);
static int LUACALL wxLua_wxHyperlinkEvent_constructor(lua_State *L)
{
    // const wxString url
    const wxString url = wxlua_getwxStringtype(L, 3);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxObject generator
    wxObject * generator = (wxObject *)wxluaT_getuserdatatype(L, 1, wxluatype_wxObject);
    // call constructor
    wxHyperlinkEvent* returns = new wxHyperlinkEvent(generator, id, url);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxHyperlinkEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHyperlinkEvent);

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxObject)



void wxLua_wxHyperlinkEvent_delete_function(void** p)
{
    wxHyperlinkEvent* o = (wxHyperlinkEvent*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHyperlinkEvent_methods[] = {
    { "GetURL", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHyperlinkEvent_GetURL, 1, NULL },
    { "SetURL", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHyperlinkEvent_SetURL, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxHyperlinkEvent_delete, 1, NULL },

#if (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxObject)
    { "wxHyperlinkEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxHyperlinkEvent_constructor, 1, NULL },
#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxLUA_USE_wxObject)

    { 0, 0, 0, 0 },
};

int wxHyperlinkEvent_methodCount = sizeof(wxHyperlinkEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl


#if wxLUA_USE_wxSashWindow && wxUSE_SASH
// ---------------------------------------------------------------------------
// Bind class wxSashWindow
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSashWindow'
int wxluatype_wxSashWindow = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxSashWindow_GetMaximumSizeX[] = { &wxluatype_wxSashWindow, NULL };
static int LUACALL wxLua_wxSashWindow_GetMaximumSizeX(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashWindow_GetMaximumSizeX[1] = {{ wxLua_wxSashWindow_GetMaximumSizeX, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSashWindow_GetMaximumSizeX }};
//     int GetMaximumSizeX() const;
static int LUACALL wxLua_wxSashWindow_GetMaximumSizeX(lua_State *L)
{
    // get this
    wxSashWindow * self = (wxSashWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashWindow);
    // call GetMaximumSizeX
    int returns = (self->GetMaximumSizeX());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSashWindow_GetMaximumSizeY[] = { &wxluatype_wxSashWindow, NULL };
static int LUACALL wxLua_wxSashWindow_GetMaximumSizeY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashWindow_GetMaximumSizeY[1] = {{ wxLua_wxSashWindow_GetMaximumSizeY, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSashWindow_GetMaximumSizeY }};
//     int GetMaximumSizeY() const;
static int LUACALL wxLua_wxSashWindow_GetMaximumSizeY(lua_State *L)
{
    // get this
    wxSashWindow * self = (wxSashWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashWindow);
    // call GetMaximumSizeY
    int returns = (self->GetMaximumSizeY());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSashWindow_GetMinimumSizeX[] = { &wxluatype_wxSashWindow, NULL };
static int LUACALL wxLua_wxSashWindow_GetMinimumSizeX(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashWindow_GetMinimumSizeX[1] = {{ wxLua_wxSashWindow_GetMinimumSizeX, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSashWindow_GetMinimumSizeX }};
//     int GetMinimumSizeX() const;
static int LUACALL wxLua_wxSashWindow_GetMinimumSizeX(lua_State *L)
{
    // get this
    wxSashWindow * self = (wxSashWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashWindow);
    // call GetMinimumSizeX
    int returns = (self->GetMinimumSizeX());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSashWindow_GetMinimumSizeY[] = { &wxluatype_wxSashWindow, NULL };
static int LUACALL wxLua_wxSashWindow_GetMinimumSizeY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashWindow_GetMinimumSizeY[1] = {{ wxLua_wxSashWindow_GetMinimumSizeY, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSashWindow_GetMinimumSizeY }};
//     int GetMinimumSizeY() const;
static int LUACALL wxLua_wxSashWindow_GetMinimumSizeY(lua_State *L)
{
    // get this
    wxSashWindow * self = (wxSashWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashWindow);
    // call GetMinimumSizeY
    int returns = (self->GetMinimumSizeY());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSashWindow_GetSashVisible[] = { &wxluatype_wxSashWindow, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSashWindow_GetSashVisible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashWindow_GetSashVisible[1] = {{ wxLua_wxSashWindow_GetSashVisible, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSashWindow_GetSashVisible }};
//     bool GetSashVisible(wxSashEdgePosition edge) const;
static int LUACALL wxLua_wxSashWindow_GetSashVisible(lua_State *L)
{
    // wxSashEdgePosition edge
    wxSashEdgePosition edge = (wxSashEdgePosition)wxlua_getenumtype(L, 2);
    // get this
    wxSashWindow * self = (wxSashWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashWindow);
    // call GetSashVisible
    bool returns = (self->GetSashVisible(edge));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (((defined(WXWIN_COMPATIBILITY_2_6) && WXWIN_COMPATIBILITY_2_6)) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSashWindow_HasBorder[] = { &wxluatype_wxSashWindow, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSashWindow_HasBorder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashWindow_HasBorder[1] = {{ wxLua_wxSashWindow_HasBorder, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSashWindow_HasBorder }};
//     %wxcompat_2_6 bool HasBorder(wxSashEdgePosition edge) const;
static int LUACALL wxLua_wxSashWindow_HasBorder(lua_State *L)
{
    // wxSashEdgePosition edge
    wxSashEdgePosition edge = (wxSashEdgePosition)wxlua_getenumtype(L, 2);
    // get this
    wxSashWindow * self = (wxSashWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashWindow);
    // call HasBorder
    bool returns = (self->HasBorder(edge));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (((defined(WXWIN_COMPATIBILITY_2_6) && WXWIN_COMPATIBILITY_2_6)) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSashWindow_SetMaximumSizeX[] = { &wxluatype_wxSashWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSashWindow_SetMaximumSizeX(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashWindow_SetMaximumSizeX[1] = {{ wxLua_wxSashWindow_SetMaximumSizeX, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSashWindow_SetMaximumSizeX }};
//     void SetMaximumSizeX(int min);
static int LUACALL wxLua_wxSashWindow_SetMaximumSizeX(lua_State *L)
{
    // int min
    int min = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSashWindow * self = (wxSashWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashWindow);
    // call SetMaximumSizeX
    self->SetMaximumSizeX(min);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSashWindow_SetMaximumSizeY[] = { &wxluatype_wxSashWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSashWindow_SetMaximumSizeY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashWindow_SetMaximumSizeY[1] = {{ wxLua_wxSashWindow_SetMaximumSizeY, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSashWindow_SetMaximumSizeY }};
//     void SetMaximumSizeY(int min);
static int LUACALL wxLua_wxSashWindow_SetMaximumSizeY(lua_State *L)
{
    // int min
    int min = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSashWindow * self = (wxSashWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashWindow);
    // call SetMaximumSizeY
    self->SetMaximumSizeY(min);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSashWindow_SetMinimumSizeX[] = { &wxluatype_wxSashWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSashWindow_SetMinimumSizeX(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashWindow_SetMinimumSizeX[1] = {{ wxLua_wxSashWindow_SetMinimumSizeX, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSashWindow_SetMinimumSizeX }};
//     void SetMinimumSizeX(int min);
static int LUACALL wxLua_wxSashWindow_SetMinimumSizeX(lua_State *L)
{
    // int min
    int min = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSashWindow * self = (wxSashWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashWindow);
    // call SetMinimumSizeX
    self->SetMinimumSizeX(min);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSashWindow_SetMinimumSizeY[] = { &wxluatype_wxSashWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSashWindow_SetMinimumSizeY(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashWindow_SetMinimumSizeY[1] = {{ wxLua_wxSashWindow_SetMinimumSizeY, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSashWindow_SetMinimumSizeY }};
//     void SetMinimumSizeY(int min);
static int LUACALL wxLua_wxSashWindow_SetMinimumSizeY(lua_State *L)
{
    // int min
    int min = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSashWindow * self = (wxSashWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashWindow);
    // call SetMinimumSizeY
    self->SetMinimumSizeY(min);

    return 0;
}


#if (((defined(WXWIN_COMPATIBILITY_2_6) && WXWIN_COMPATIBILITY_2_6)) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSashWindow_SetSashBorder[] = { &wxluatype_wxSashWindow, &wxluatype_TINTEGER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSashWindow_SetSashBorder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashWindow_SetSashBorder[1] = {{ wxLua_wxSashWindow_SetSashBorder, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSashWindow_SetSashBorder }};
//     %wxcompat_2_6 void SetSashBorder(wxSashEdgePosition edge, bool hasBorder);
static int LUACALL wxLua_wxSashWindow_SetSashBorder(lua_State *L)
{
    // bool hasBorder
    bool hasBorder = wxlua_getbooleantype(L, 3);
    // wxSashEdgePosition edge
    wxSashEdgePosition edge = (wxSashEdgePosition)wxlua_getenumtype(L, 2);
    // get this
    wxSashWindow * self = (wxSashWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashWindow);
    // call SetSashBorder
    self->SetSashBorder(edge, hasBorder);

    return 0;
}

#endif // (((defined(WXWIN_COMPATIBILITY_2_6) && WXWIN_COMPATIBILITY_2_6)) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSashWindow_SetSashVisible[] = { &wxluatype_wxSashWindow, &wxluatype_TINTEGER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSashWindow_SetSashVisible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashWindow_SetSashVisible[1] = {{ wxLua_wxSashWindow_SetSashVisible, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSashWindow_SetSashVisible }};
//     void SetSashVisible(wxSashEdgePosition edge, bool visible);
static int LUACALL wxLua_wxSashWindow_SetSashVisible(lua_State *L)
{
    // bool visible
    bool visible = wxlua_getbooleantype(L, 3);
    // wxSashEdgePosition edge
    wxSashEdgePosition edge = (wxSashEdgePosition)wxlua_getenumtype(L, 2);
    // get this
    wxSashWindow * self = (wxSashWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashWindow);
    // call SetSashVisible
    self->SetSashVisible(edge, visible);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSashWindow_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSashWindow_constructor1(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashWindow_constructor1[1] = {{ wxLua_wxSashWindow_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 6, s_wxluatypeArray_wxLua_wxSashWindow_constructor1 }};
//     wxSashWindow(wxWindow *parent, wxWindowID id = -1, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSW_3D|wxCLIP_CHILDREN, const wxString& name = "wxSashWindow");
static int LUACALL wxLua_wxSashWindow_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxSashWindow"
    const wxString name = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxT("wxSashWindow")));
    // long style = wxSW_3D | wxCLIP_CHILDREN
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxSW_3D | wxCLIP_CHILDREN);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = -1
    wxWindowID id = (argCount >= 2 ? (wxWindowID)wxlua_getnumbertype(L, 2) : -1);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxSashWindow* returns = new wxSashWindow(parent, id, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSashWindow);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

static int LUACALL wxLua_wxSashWindow_constructor(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashWindow_constructor[1] = {{ wxLua_wxSashWindow_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxSashWindow();
static int LUACALL wxLua_wxSashWindow_constructor(lua_State *L)
{
    // call constructor
    wxSashWindow* returns = new wxSashWindow();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSashWindow);

    return 1;
}




#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH))||(wxLUA_USE_wxSashWindow && wxUSE_SASH)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashWindow_constructor_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
    { wxLua_wxSashWindow_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 6, s_wxluatypeArray_wxLua_wxSashWindow_constructor1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
    { wxLua_wxSashWindow_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxSashWindow_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxSashWindow_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH))||(wxLUA_USE_wxSashWindow && wxUSE_SASH)

void wxLua_wxSashWindow_delete_function(void** p)
{
    wxSashWindow* o = (wxSashWindow*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSashWindow_methods[] = {
    { "GetMaximumSizeX", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashWindow_GetMaximumSizeX, 1, NULL },
    { "GetMaximumSizeY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashWindow_GetMaximumSizeY, 1, NULL },
    { "GetMinimumSizeX", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashWindow_GetMinimumSizeX, 1, NULL },
    { "GetMinimumSizeY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashWindow_GetMinimumSizeY, 1, NULL },
    { "GetSashVisible", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashWindow_GetSashVisible, 1, NULL },

#if (((defined(WXWIN_COMPATIBILITY_2_6) && WXWIN_COMPATIBILITY_2_6)) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
    { "HasBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashWindow_HasBorder, 1, NULL },
#endif // (((defined(WXWIN_COMPATIBILITY_2_6) && WXWIN_COMPATIBILITY_2_6)) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

    { "SetMaximumSizeX", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashWindow_SetMaximumSizeX, 1, NULL },
    { "SetMaximumSizeY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashWindow_SetMaximumSizeY, 1, NULL },
    { "SetMinimumSizeX", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashWindow_SetMinimumSizeX, 1, NULL },
    { "SetMinimumSizeY", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashWindow_SetMinimumSizeY, 1, NULL },

#if (((defined(WXWIN_COMPATIBILITY_2_6) && WXWIN_COMPATIBILITY_2_6)) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
    { "SetSashBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashWindow_SetSashBorder, 1, NULL },
#endif // (((defined(WXWIN_COMPATIBILITY_2_6) && WXWIN_COMPATIBILITY_2_6)) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

    { "SetSashVisible", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashWindow_SetSashVisible, 1, NULL },

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH))||(wxLUA_USE_wxSashWindow && wxUSE_SASH)
    { "wxSashWindow", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSashWindow_constructor_overload, s_wxluafunc_wxLua_wxSashWindow_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH))||(wxLUA_USE_wxSashWindow && wxUSE_SASH)

    { 0, 0, 0, 0 },
};

int wxSashWindow_methodCount = sizeof(wxSashWindow_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSashWindow && wxUSE_SASH


#if wxLUA_USE_wxSashWindow && wxUSE_SASH
// ---------------------------------------------------------------------------
// Bind class wxSashLayoutWindow
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSashLayoutWindow'
int wxluatype_wxSashLayoutWindow = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSashLayoutWindow_Create[] = { &wxluatype_wxSashLayoutWindow, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSashLayoutWindow_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashLayoutWindow_Create[1] = {{ wxLua_wxSashLayoutWindow_Create, WXLUAMETHOD_METHOD, 2, 7, s_wxluatypeArray_wxLua_wxSashLayoutWindow_Create }};
//     bool Create(wxWindow *parent, wxWindowID id = -1, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSW_3D|wxCLIP_CHILDREN, const wxString& name = "wxSashLayoutWindow");
static int LUACALL wxLua_wxSashLayoutWindow_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxSashLayoutWindow"
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxT("wxSashLayoutWindow")));
    // long style = wxSW_3D | wxCLIP_CHILDREN
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxSW_3D | wxCLIP_CHILDREN);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = -1
    wxWindowID id = (argCount >= 3 ? (wxWindowID)wxlua_getnumbertype(L, 3) : -1);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxSashLayoutWindow * self = (wxSashLayoutWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashLayoutWindow);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSashLayoutWindow_GetAlignment[] = { &wxluatype_wxSashLayoutWindow, NULL };
static int LUACALL wxLua_wxSashLayoutWindow_GetAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashLayoutWindow_GetAlignment[1] = {{ wxLua_wxSashLayoutWindow_GetAlignment, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSashLayoutWindow_GetAlignment }};
//     wxLayoutAlignment GetAlignment() const;
static int LUACALL wxLua_wxSashLayoutWindow_GetAlignment(lua_State *L)
{
    // get this
    wxSashLayoutWindow * self = (wxSashLayoutWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashLayoutWindow);
    // call GetAlignment
    wxLayoutAlignment returns = (self->GetAlignment());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSashLayoutWindow_GetOrientation[] = { &wxluatype_wxSashLayoutWindow, NULL };
static int LUACALL wxLua_wxSashLayoutWindow_GetOrientation(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashLayoutWindow_GetOrientation[1] = {{ wxLua_wxSashLayoutWindow_GetOrientation, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSashLayoutWindow_GetOrientation }};
//     wxLayoutOrientation GetOrientation() const;
static int LUACALL wxLua_wxSashLayoutWindow_GetOrientation(lua_State *L)
{
    // get this
    wxSashLayoutWindow * self = (wxSashLayoutWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashLayoutWindow);
    // call GetOrientation
    wxLayoutOrientation returns = (self->GetOrientation());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSashLayoutWindow_SetAlignment[] = { &wxluatype_wxSashLayoutWindow, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSashLayoutWindow_SetAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashLayoutWindow_SetAlignment[1] = {{ wxLua_wxSashLayoutWindow_SetAlignment, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSashLayoutWindow_SetAlignment }};
//     void SetAlignment(wxLayoutAlignment alignment);
static int LUACALL wxLua_wxSashLayoutWindow_SetAlignment(lua_State *L)
{
    // wxLayoutAlignment alignment
    wxLayoutAlignment alignment = (wxLayoutAlignment)wxlua_getenumtype(L, 2);
    // get this
    wxSashLayoutWindow * self = (wxSashLayoutWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashLayoutWindow);
    // call SetAlignment
    self->SetAlignment(alignment);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSashLayoutWindow_SetDefaultSize[] = { &wxluatype_wxSashLayoutWindow, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxSashLayoutWindow_SetDefaultSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashLayoutWindow_SetDefaultSize[1] = {{ wxLua_wxSashLayoutWindow_SetDefaultSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSashLayoutWindow_SetDefaultSize }};
//     void SetDefaultSize(const wxSize& size);
static int LUACALL wxLua_wxSashLayoutWindow_SetDefaultSize(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxSashLayoutWindow * self = (wxSashLayoutWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashLayoutWindow);
    // call SetDefaultSize
    self->SetDefaultSize(*size);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSashLayoutWindow_SetOrientation[] = { &wxluatype_wxSashLayoutWindow, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSashLayoutWindow_SetOrientation(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashLayoutWindow_SetOrientation[1] = {{ wxLua_wxSashLayoutWindow_SetOrientation, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSashLayoutWindow_SetOrientation }};
//     void SetOrientation(wxLayoutOrientation orientation);
static int LUACALL wxLua_wxSashLayoutWindow_SetOrientation(lua_State *L)
{
    // wxLayoutOrientation orientation
    wxLayoutOrientation orientation = (wxLayoutOrientation)wxlua_getenumtype(L, 2);
    // get this
    wxSashLayoutWindow * self = (wxSashLayoutWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashLayoutWindow);
    // call SetOrientation
    self->SetOrientation(orientation);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSashLayoutWindow_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSashLayoutWindow_constructor1(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashLayoutWindow_constructor1[1] = {{ wxLua_wxSashLayoutWindow_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 6, s_wxluatypeArray_wxLua_wxSashLayoutWindow_constructor1 }};
//     wxSashLayoutWindow(wxWindow *parent, wxWindowID id = -1, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSW_3D|wxCLIP_CHILDREN, const wxString& name = "wxSashLayoutWindow");
static int LUACALL wxLua_wxSashLayoutWindow_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxSashLayoutWindow"
    const wxString name = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxT("wxSashLayoutWindow")));
    // long style = wxSW_3D | wxCLIP_CHILDREN
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxSW_3D | wxCLIP_CHILDREN);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id = -1
    wxWindowID id = (argCount >= 2 ? (wxWindowID)wxlua_getnumbertype(L, 2) : -1);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxSashLayoutWindow* returns = new wxSashLayoutWindow(parent, id, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSashLayoutWindow);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

static int LUACALL wxLua_wxSashLayoutWindow_constructor(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashLayoutWindow_constructor[1] = {{ wxLua_wxSashLayoutWindow_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxSashLayoutWindow();
static int LUACALL wxLua_wxSashLayoutWindow_constructor(lua_State *L)
{
    // call constructor
    wxSashLayoutWindow* returns = new wxSashLayoutWindow();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSashLayoutWindow);

    return 1;
}




#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH))||(wxLUA_USE_wxSashWindow && wxUSE_SASH)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashLayoutWindow_constructor_overload[] =
{

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
    { wxLua_wxSashLayoutWindow_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 6, s_wxluatypeArray_wxLua_wxSashLayoutWindow_constructor1 },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
    { wxLua_wxSashLayoutWindow_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxSashLayoutWindow_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxSashLayoutWindow_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH))||(wxLUA_USE_wxSashWindow && wxUSE_SASH)

void wxLua_wxSashLayoutWindow_delete_function(void** p)
{
    wxSashLayoutWindow* o = (wxSashLayoutWindow*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSashLayoutWindow_methods[] = {
#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashLayoutWindow_Create, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

    { "GetAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashLayoutWindow_GetAlignment, 1, NULL },
    { "GetOrientation", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashLayoutWindow_GetOrientation, 1, NULL },
    { "SetAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashLayoutWindow_SetAlignment, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
    { "SetDefaultSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashLayoutWindow_SetDefaultSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

    { "SetOrientation", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashLayoutWindow_SetOrientation, 1, NULL },

#if ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH))||(wxLUA_USE_wxSashWindow && wxUSE_SASH)
    { "wxSashLayoutWindow", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSashLayoutWindow_constructor_overload, s_wxluafunc_wxLua_wxSashLayoutWindow_constructor_overload_count, 0 },
#endif // ((wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH))||(wxLUA_USE_wxSashWindow && wxUSE_SASH)

    { 0, 0, 0, 0 },
};

int wxSashLayoutWindow_methodCount = sizeof(wxSashLayoutWindow_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSashWindow && wxUSE_SASH


#if wxLUA_USE_wxSashWindow && wxUSE_SASH
// ---------------------------------------------------------------------------
// Bind class wxLayoutAlgorithm
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxLayoutAlgorithm'
int wxluatype_wxLayoutAlgorithm = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxFrame) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
static wxLuaArgType s_wxluatypeArray_wxLua_wxLayoutAlgorithm_LayoutFrame[] = { &wxluatype_wxLayoutAlgorithm, &wxluatype_wxFrame, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxLayoutAlgorithm_LayoutFrame(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLayoutAlgorithm_LayoutFrame[1] = {{ wxLua_wxLayoutAlgorithm_LayoutFrame, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxLayoutAlgorithm_LayoutFrame }};
//     bool LayoutFrame(wxFrame* frame, wxWindow* mainWindow = NULL) const;
static int LUACALL wxLua_wxLayoutAlgorithm_LayoutFrame(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindow mainWindow = NULL
    wxWindow * mainWindow = (argCount >= 3 ? (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow) : NULL);
    // wxFrame frame
    wxFrame * frame = (wxFrame *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFrame);
    // get this
    wxLayoutAlgorithm * self = (wxLayoutAlgorithm *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLayoutAlgorithm);
    // call LayoutFrame
    bool returns = (self->LayoutFrame(frame, mainWindow));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxFrame) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

#if ((wxLUA_USE_MDI && wxUSE_MDI && wxUSE_DOC_VIEW_ARCHITECTURE) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
static wxLuaArgType s_wxluatypeArray_wxLua_wxLayoutAlgorithm_LayoutMDIFrame[] = { &wxluatype_wxLayoutAlgorithm, &wxluatype_wxMDIParentFrame, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxLayoutAlgorithm_LayoutMDIFrame(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLayoutAlgorithm_LayoutMDIFrame[1] = {{ wxLua_wxLayoutAlgorithm_LayoutMDIFrame, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxLayoutAlgorithm_LayoutMDIFrame }};
//     bool LayoutMDIFrame(wxMDIParentFrame* frame, wxRect* rect = NULL);
static int LUACALL wxLua_wxLayoutAlgorithm_LayoutMDIFrame(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxRect rect = NULL
    wxRect * rect = (argCount >= 3 ? (wxRect *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRect) : NULL);
    // wxMDIParentFrame frame
    wxMDIParentFrame * frame = (wxMDIParentFrame *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMDIParentFrame);
    // get this
    wxLayoutAlgorithm * self = (wxLayoutAlgorithm *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLayoutAlgorithm);
    // call LayoutMDIFrame
    bool returns = (self->LayoutMDIFrame(frame, rect));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_MDI && wxUSE_MDI && wxUSE_DOC_VIEW_ARCHITECTURE) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

static wxLuaArgType s_wxluatypeArray_wxLua_wxLayoutAlgorithm_LayoutWindow[] = { &wxluatype_wxLayoutAlgorithm, &wxluatype_wxWindow, &wxluatype_wxWindow, NULL };
static int LUACALL wxLua_wxLayoutAlgorithm_LayoutWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLayoutAlgorithm_LayoutWindow[1] = {{ wxLua_wxLayoutAlgorithm_LayoutWindow, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxLayoutAlgorithm_LayoutWindow }};
//     bool LayoutWindow(wxWindow* frame, wxWindow* mainWindow = NULL);
static int LUACALL wxLua_wxLayoutAlgorithm_LayoutWindow(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindow mainWindow = NULL
    wxWindow * mainWindow = (argCount >= 3 ? (wxWindow *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWindow) : NULL);
    // wxWindow frame
    wxWindow * frame = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxLayoutAlgorithm * self = (wxLayoutAlgorithm *)wxluaT_getuserdatatype(L, 1, wxluatype_wxLayoutAlgorithm);
    // call LayoutWindow
    bool returns = (self->LayoutWindow(frame, mainWindow));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxLayoutAlgorithm_delete[] = { &wxluatype_wxLayoutAlgorithm, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLayoutAlgorithm_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxLayoutAlgorithm_delete }};

static int LUACALL wxLua_wxLayoutAlgorithm_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLayoutAlgorithm_constructor[1] = {{ wxLua_wxLayoutAlgorithm_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxLayoutAlgorithm();
static int LUACALL wxLua_wxLayoutAlgorithm_constructor(lua_State *L)
{
    // call constructor
    wxLayoutAlgorithm* returns = new wxLayoutAlgorithm();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxLayoutAlgorithm);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLayoutAlgorithm);

    return 1;
}




void wxLua_wxLayoutAlgorithm_delete_function(void** p)
{
    wxLayoutAlgorithm* o = (wxLayoutAlgorithm*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxLayoutAlgorithm_methods[] = {
#if (wxLUA_USE_wxFrame) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
    { "LayoutFrame", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLayoutAlgorithm_LayoutFrame, 1, NULL },
#endif // (wxLUA_USE_wxFrame) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

#if ((wxLUA_USE_MDI && wxUSE_MDI && wxUSE_DOC_VIEW_ARCHITECTURE) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
    { "LayoutMDIFrame", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLayoutAlgorithm_LayoutMDIFrame, 1, NULL },
#endif // ((wxLUA_USE_MDI && wxUSE_MDI && wxUSE_DOC_VIEW_ARCHITECTURE) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

    { "LayoutWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxLayoutAlgorithm_LayoutWindow, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxLayoutAlgorithm_delete, 1, NULL },
    { "wxLayoutAlgorithm", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxLayoutAlgorithm_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxLayoutAlgorithm_methodCount = sizeof(wxLayoutAlgorithm_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSashWindow && wxUSE_SASH


#if wxLUA_USE_wxSashWindow && wxUSE_SASH
// ---------------------------------------------------------------------------
// Bind class wxQueryLayoutInfoEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxQueryLayoutInfoEvent'
int wxluatype_wxQueryLayoutInfoEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_GetAlignment[] = { &wxluatype_wxQueryLayoutInfoEvent, NULL };
static int LUACALL wxLua_wxQueryLayoutInfoEvent_GetAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_GetAlignment[1] = {{ wxLua_wxQueryLayoutInfoEvent_GetAlignment, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_GetAlignment }};
//     wxLayoutAlignment GetAlignment() const;
static int LUACALL wxLua_wxQueryLayoutInfoEvent_GetAlignment(lua_State *L)
{
    // get this
    wxQueryLayoutInfoEvent * self = (wxQueryLayoutInfoEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxQueryLayoutInfoEvent);
    // call GetAlignment
    wxLayoutAlignment returns = (self->GetAlignment());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_GetFlags[] = { &wxluatype_wxQueryLayoutInfoEvent, NULL };
static int LUACALL wxLua_wxQueryLayoutInfoEvent_GetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_GetFlags[1] = {{ wxLua_wxQueryLayoutInfoEvent_GetFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_GetFlags }};
//     int GetFlags() const;
static int LUACALL wxLua_wxQueryLayoutInfoEvent_GetFlags(lua_State *L)
{
    // get this
    wxQueryLayoutInfoEvent * self = (wxQueryLayoutInfoEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxQueryLayoutInfoEvent);
    // call GetFlags
    int returns = (self->GetFlags());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_GetOrientation[] = { &wxluatype_wxQueryLayoutInfoEvent, NULL };
static int LUACALL wxLua_wxQueryLayoutInfoEvent_GetOrientation(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_GetOrientation[1] = {{ wxLua_wxQueryLayoutInfoEvent_GetOrientation, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_GetOrientation }};
//     wxLayoutOrientation GetOrientation() const;
static int LUACALL wxLua_wxQueryLayoutInfoEvent_GetOrientation(lua_State *L)
{
    // get this
    wxQueryLayoutInfoEvent * self = (wxQueryLayoutInfoEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxQueryLayoutInfoEvent);
    // call GetOrientation
    wxLayoutOrientation returns = (self->GetOrientation());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_GetRequestedLength[] = { &wxluatype_wxQueryLayoutInfoEvent, NULL };
static int LUACALL wxLua_wxQueryLayoutInfoEvent_GetRequestedLength(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_GetRequestedLength[1] = {{ wxLua_wxQueryLayoutInfoEvent_GetRequestedLength, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_GetRequestedLength }};
//     int GetRequestedLength() const;
static int LUACALL wxLua_wxQueryLayoutInfoEvent_GetRequestedLength(lua_State *L)
{
    // get this
    wxQueryLayoutInfoEvent * self = (wxQueryLayoutInfoEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxQueryLayoutInfoEvent);
    // call GetRequestedLength
    int returns = (self->GetRequestedLength());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
static wxLuaArgType s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_GetSize[] = { &wxluatype_wxQueryLayoutInfoEvent, NULL };
static int LUACALL wxLua_wxQueryLayoutInfoEvent_GetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_GetSize[1] = {{ wxLua_wxQueryLayoutInfoEvent_GetSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_GetSize }};
//     wxSize GetSize() const;
static int LUACALL wxLua_wxQueryLayoutInfoEvent_GetSize(lua_State *L)
{
    // get this
    wxQueryLayoutInfoEvent * self = (wxQueryLayoutInfoEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxQueryLayoutInfoEvent);
    // call GetSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSize);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

static wxLuaArgType s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_SetAlignment[] = { &wxluatype_wxQueryLayoutInfoEvent, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxQueryLayoutInfoEvent_SetAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_SetAlignment[1] = {{ wxLua_wxQueryLayoutInfoEvent_SetAlignment, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_SetAlignment }};
//     void SetAlignment(wxLayoutAlignment alignment);
static int LUACALL wxLua_wxQueryLayoutInfoEvent_SetAlignment(lua_State *L)
{
    // wxLayoutAlignment alignment
    wxLayoutAlignment alignment = (wxLayoutAlignment)wxlua_getenumtype(L, 2);
    // get this
    wxQueryLayoutInfoEvent * self = (wxQueryLayoutInfoEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxQueryLayoutInfoEvent);
    // call SetAlignment
    self->SetAlignment(alignment);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_SetFlags[] = { &wxluatype_wxQueryLayoutInfoEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxQueryLayoutInfoEvent_SetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_SetFlags[1] = {{ wxLua_wxQueryLayoutInfoEvent_SetFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_SetFlags }};
//     void SetFlags(int flags);
static int LUACALL wxLua_wxQueryLayoutInfoEvent_SetFlags(lua_State *L)
{
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxQueryLayoutInfoEvent * self = (wxQueryLayoutInfoEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxQueryLayoutInfoEvent);
    // call SetFlags
    self->SetFlags(flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_SetOrientation[] = { &wxluatype_wxQueryLayoutInfoEvent, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxQueryLayoutInfoEvent_SetOrientation(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_SetOrientation[1] = {{ wxLua_wxQueryLayoutInfoEvent_SetOrientation, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_SetOrientation }};
//     void SetOrientation(wxLayoutOrientation orientation);
static int LUACALL wxLua_wxQueryLayoutInfoEvent_SetOrientation(lua_State *L)
{
    // wxLayoutOrientation orientation
    wxLayoutOrientation orientation = (wxLayoutOrientation)wxlua_getenumtype(L, 2);
    // get this
    wxQueryLayoutInfoEvent * self = (wxQueryLayoutInfoEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxQueryLayoutInfoEvent);
    // call SetOrientation
    self->SetOrientation(orientation);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_SetRequestedLength[] = { &wxluatype_wxQueryLayoutInfoEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxQueryLayoutInfoEvent_SetRequestedLength(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_SetRequestedLength[1] = {{ wxLua_wxQueryLayoutInfoEvent_SetRequestedLength, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_SetRequestedLength }};
//     void SetRequestedLength(int length);
static int LUACALL wxLua_wxQueryLayoutInfoEvent_SetRequestedLength(lua_State *L)
{
    // int length
    int length = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxQueryLayoutInfoEvent * self = (wxQueryLayoutInfoEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxQueryLayoutInfoEvent);
    // call SetRequestedLength
    self->SetRequestedLength(length);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
static wxLuaArgType s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_SetSize[] = { &wxluatype_wxQueryLayoutInfoEvent, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxQueryLayoutInfoEvent_SetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_SetSize[1] = {{ wxLua_wxQueryLayoutInfoEvent_SetSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_SetSize }};
//     void SetSize(const wxSize& size);
static int LUACALL wxLua_wxQueryLayoutInfoEvent_SetSize(lua_State *L)
{
    // const wxSize size
    const wxSize * size = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxQueryLayoutInfoEvent * self = (wxQueryLayoutInfoEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxQueryLayoutInfoEvent);
    // call SetSize
    self->SetSize(*size);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

static wxLuaArgType s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_delete[] = { &wxluatype_wxQueryLayoutInfoEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxQueryLayoutInfoEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_constructor[1] = {{ wxLua_wxQueryLayoutInfoEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxQueryLayoutInfoEvent_constructor }};
//     wxQueryLayoutInfoEvent(wxWindowID id = 0);
static int LUACALL wxLua_wxQueryLayoutInfoEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindowID id = 0
    wxWindowID id = (argCount >= 1 ? (wxWindowID)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxQueryLayoutInfoEvent* returns = new wxQueryLayoutInfoEvent(id);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxQueryLayoutInfoEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxQueryLayoutInfoEvent);

    return 1;
}




void wxLua_wxQueryLayoutInfoEvent_delete_function(void** p)
{
    wxQueryLayoutInfoEvent* o = (wxQueryLayoutInfoEvent*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxQueryLayoutInfoEvent_methods[] = {
    { "GetAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_GetAlignment, 1, NULL },
    { "GetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_GetFlags, 1, NULL },
    { "GetOrientation", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_GetOrientation, 1, NULL },
    { "GetRequestedLength", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_GetRequestedLength, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
    { "GetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_GetSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

    { "SetAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_SetAlignment, 1, NULL },
    { "SetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_SetFlags, 1, NULL },
    { "SetOrientation", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_SetOrientation, 1, NULL },
    { "SetRequestedLength", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_SetRequestedLength, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
    { "SetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_SetSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_delete, 1, NULL },
    { "wxQueryLayoutInfoEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxQueryLayoutInfoEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxQueryLayoutInfoEvent_methodCount = sizeof(wxQueryLayoutInfoEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSashWindow && wxUSE_SASH


#if wxLUA_USE_wxSashWindow && wxUSE_SASH
// ---------------------------------------------------------------------------
// Bind class wxCalculateLayoutEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxCalculateLayoutEvent'
int wxluatype_wxCalculateLayoutEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalculateLayoutEvent_GetFlags[] = { &wxluatype_wxCalculateLayoutEvent, NULL };
static int LUACALL wxLua_wxCalculateLayoutEvent_GetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalculateLayoutEvent_GetFlags[1] = {{ wxLua_wxCalculateLayoutEvent_GetFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCalculateLayoutEvent_GetFlags }};
//     int GetFlags() const;
static int LUACALL wxLua_wxCalculateLayoutEvent_GetFlags(lua_State *L)
{
    // get this
    wxCalculateLayoutEvent * self = (wxCalculateLayoutEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalculateLayoutEvent);
    // call GetFlags
    int returns = (self->GetFlags());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalculateLayoutEvent_GetRect[] = { &wxluatype_wxCalculateLayoutEvent, NULL };
static int LUACALL wxLua_wxCalculateLayoutEvent_GetRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalculateLayoutEvent_GetRect[1] = {{ wxLua_wxCalculateLayoutEvent_GetRect, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxCalculateLayoutEvent_GetRect }};
//     wxRect GetRect() const;
static int LUACALL wxLua_wxCalculateLayoutEvent_GetRect(lua_State *L)
{
    // get this
    wxCalculateLayoutEvent * self = (wxCalculateLayoutEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalculateLayoutEvent);
    // call GetRect
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->GetRect());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRect);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalculateLayoutEvent_SetFlags[] = { &wxluatype_wxCalculateLayoutEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxCalculateLayoutEvent_SetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalculateLayoutEvent_SetFlags[1] = {{ wxLua_wxCalculateLayoutEvent_SetFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCalculateLayoutEvent_SetFlags }};
//     void SetFlags(int flags);
static int LUACALL wxLua_wxCalculateLayoutEvent_SetFlags(lua_State *L)
{
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxCalculateLayoutEvent * self = (wxCalculateLayoutEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalculateLayoutEvent);
    // call SetFlags
    self->SetFlags(flags);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
static wxLuaArgType s_wxluatypeArray_wxLua_wxCalculateLayoutEvent_SetRect[] = { &wxluatype_wxCalculateLayoutEvent, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxCalculateLayoutEvent_SetRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalculateLayoutEvent_SetRect[1] = {{ wxLua_wxCalculateLayoutEvent_SetRect, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxCalculateLayoutEvent_SetRect }};
//     void SetRect(const wxRect& rect);
static int LUACALL wxLua_wxCalculateLayoutEvent_SetRect(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxCalculateLayoutEvent * self = (wxCalculateLayoutEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxCalculateLayoutEvent);
    // call SetRect
    self->SetRect(*rect);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalculateLayoutEvent_delete[] = { &wxluatype_wxCalculateLayoutEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalculateLayoutEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxCalculateLayoutEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxCalculateLayoutEvent_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxCalculateLayoutEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxCalculateLayoutEvent_constructor[1] = {{ wxLua_wxCalculateLayoutEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxCalculateLayoutEvent_constructor }};
//     wxCalculateLayoutEvent(wxWindowID id = 0);
static int LUACALL wxLua_wxCalculateLayoutEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindowID id = 0
    wxWindowID id = (argCount >= 1 ? (wxWindowID)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxCalculateLayoutEvent* returns = new wxCalculateLayoutEvent(id);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxCalculateLayoutEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxCalculateLayoutEvent);

    return 1;
}




void wxLua_wxCalculateLayoutEvent_delete_function(void** p)
{
    wxCalculateLayoutEvent* o = (wxCalculateLayoutEvent*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxCalculateLayoutEvent_methods[] = {
    { "GetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalculateLayoutEvent_GetFlags, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
    { "GetRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalculateLayoutEvent_GetRect, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

    { "SetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalculateLayoutEvent_SetFlags, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
    { "SetRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxCalculateLayoutEvent_SetRect, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxCalculateLayoutEvent_delete, 1, NULL },
    { "wxCalculateLayoutEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxCalculateLayoutEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxCalculateLayoutEvent_methodCount = sizeof(wxCalculateLayoutEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSashWindow && wxUSE_SASH


#if wxLUA_USE_wxSashWindow && wxUSE_SASH
// ---------------------------------------------------------------------------
// Bind class wxSashEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSashEvent'
int wxluatype_wxSashEvent = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSashEvent_GetDragRect[] = { &wxluatype_wxSashEvent, NULL };
static int LUACALL wxLua_wxSashEvent_GetDragRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashEvent_GetDragRect[1] = {{ wxLua_wxSashEvent_GetDragRect, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSashEvent_GetDragRect }};
//     wxRect GetDragRect();
static int LUACALL wxLua_wxSashEvent_GetDragRect(lua_State *L)
{
    // get this
    wxSashEvent * self = (wxSashEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashEvent);
    // call GetDragRect
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->GetDragRect());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRect);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSashEvent_GetDragStatus[] = { &wxluatype_wxSashEvent, NULL };
static int LUACALL wxLua_wxSashEvent_GetDragStatus(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashEvent_GetDragStatus[1] = {{ wxLua_wxSashEvent_GetDragStatus, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSashEvent_GetDragStatus }};
//     int GetDragStatus();
static int LUACALL wxLua_wxSashEvent_GetDragStatus(lua_State *L)
{
    // get this
    wxSashEvent * self = (wxSashEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashEvent);
    // call GetDragStatus
    int returns = (self->GetDragStatus());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSashEvent_GetEdge[] = { &wxluatype_wxSashEvent, NULL };
static int LUACALL wxLua_wxSashEvent_GetEdge(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashEvent_GetEdge[1] = {{ wxLua_wxSashEvent_GetEdge, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSashEvent_GetEdge }};
//     int GetEdge();
static int LUACALL wxLua_wxSashEvent_GetEdge(lua_State *L)
{
    // get this
    wxSashEvent * self = (wxSashEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashEvent);
    // call GetEdge
    int returns = (self->GetEdge());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSashEvent_SetDragRect[] = { &wxluatype_wxSashEvent, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxSashEvent_SetDragRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashEvent_SetDragRect[1] = {{ wxLua_wxSashEvent_SetDragRect, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSashEvent_SetDragRect }};
//     void SetDragRect(const wxRect& rect);
static int LUACALL wxLua_wxSashEvent_SetDragRect(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxSashEvent * self = (wxSashEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashEvent);
    // call SetDragRect
    self->SetDragRect(*rect);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSashEvent_SetDragStatus[] = { &wxluatype_wxSashEvent, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSashEvent_SetDragStatus(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashEvent_SetDragStatus[1] = {{ wxLua_wxSashEvent_SetDragStatus, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSashEvent_SetDragStatus }};
//     void SetDragStatus(wxSashDragStatus status);
static int LUACALL wxLua_wxSashEvent_SetDragStatus(lua_State *L)
{
    // wxSashDragStatus status
    wxSashDragStatus status = (wxSashDragStatus)wxlua_getenumtype(L, 2);
    // get this
    wxSashEvent * self = (wxSashEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashEvent);
    // call SetDragStatus
    self->SetDragStatus(status);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSashEvent_SetEdge[] = { &wxluatype_wxSashEvent, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSashEvent_SetEdge(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashEvent_SetEdge[1] = {{ wxLua_wxSashEvent_SetEdge, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSashEvent_SetEdge }};
//     void SetEdge(wxSashEdgePosition edge);
static int LUACALL wxLua_wxSashEvent_SetEdge(lua_State *L)
{
    // wxSashEdgePosition edge
    wxSashEdgePosition edge = (wxSashEdgePosition)wxlua_getenumtype(L, 2);
    // get this
    wxSashEvent * self = (wxSashEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSashEvent);
    // call SetEdge
    self->SetEdge(edge);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSashEvent_delete[] = { &wxluatype_wxSashEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxSashEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxSashEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSashEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSashEvent_constructor[1] = {{ wxLua_wxSashEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxSashEvent_constructor }};
//     wxSashEvent(int id = 0, wxSashEdgePosition edge = wxSASH_NONE);
static int LUACALL wxLua_wxSashEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxSashEdgePosition edge = wxSASH_NONE
    wxSashEdgePosition edge = (argCount >= 2 ? (wxSashEdgePosition)wxlua_getenumtype(L, 2) : wxSASH_NONE);
    // int id = 0
    int id = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxSashEvent* returns = new wxSashEvent(id, edge);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSashEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSashEvent);

    return 1;
}




void wxLua_wxSashEvent_delete_function(void** p)
{
    wxSashEvent* o = (wxSashEvent*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSashEvent_methods[] = {
#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
    { "GetDragRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashEvent_GetDragRect, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

    { "GetDragStatus", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashEvent_GetDragStatus, 1, NULL },
    { "GetEdge", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashEvent_GetEdge, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)
    { "SetDragRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashEvent_SetDragRect, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxLUA_USE_wxSashWindow && wxUSE_SASH)

    { "SetDragStatus", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashEvent_SetDragStatus, 1, NULL },
    { "SetEdge", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSashEvent_SetEdge, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxSashEvent_delete, 1, NULL },
    { "wxSashEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSashEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxSashEvent_methodCount = sizeof(wxSashEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSashWindow && wxUSE_SASH


#if wxLUA_USE_wxSplashScreen
// ---------------------------------------------------------------------------
// Bind class wxSplashScreen
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSplashScreen'
int wxluatype_wxSplashScreen = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplashScreen_GetSplashStyle[] = { &wxluatype_wxSplashScreen, NULL };
static int LUACALL wxLua_wxSplashScreen_GetSplashStyle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplashScreen_GetSplashStyle[1] = {{ wxLua_wxSplashScreen_GetSplashStyle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSplashScreen_GetSplashStyle }};
//     long GetSplashStyle() const;
static int LUACALL wxLua_wxSplashScreen_GetSplashStyle(lua_State *L)
{
    // get this
    wxSplashScreen * self = (wxSplashScreen *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplashScreen);
    // call GetSplashStyle
    long returns = (self->GetSplashStyle());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplashScreen_GetSplashWindow[] = { &wxluatype_wxSplashScreen, NULL };
static int LUACALL wxLua_wxSplashScreen_GetSplashWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplashScreen_GetSplashWindow[1] = {{ wxLua_wxSplashScreen_GetSplashWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSplashScreen_GetSplashWindow }};
//     wxSplashScreenWindow* GetSplashWindow() const;
static int LUACALL wxLua_wxSplashScreen_GetSplashWindow(lua_State *L)
{
    // get this
    wxSplashScreen * self = (wxSplashScreen *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplashScreen);
    // call GetSplashWindow
    wxSplashScreenWindow* returns = (wxSplashScreenWindow*)self->GetSplashWindow();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSplashScreenWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplashScreen_GetTimeout[] = { &wxluatype_wxSplashScreen, NULL };
static int LUACALL wxLua_wxSplashScreen_GetTimeout(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplashScreen_GetTimeout[1] = {{ wxLua_wxSplashScreen_GetTimeout, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSplashScreen_GetTimeout }};
//     int GetTimeout() const;
static int LUACALL wxLua_wxSplashScreen_GetTimeout(lua_State *L)
{
    // get this
    wxSplashScreen * self = (wxSplashScreen *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplashScreen);
    // call GetTimeout
    int returns = (self->GetTimeout());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxSplashScreen)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSplashScreen_constructor[] = { &wxluatype_wxBitmap, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSplashScreen_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplashScreen_constructor[1] = {{ wxLua_wxSplashScreen_constructor, WXLUAMETHOD_CONSTRUCTOR, 5, 8, s_wxluatypeArray_wxLua_wxSplashScreen_constructor }};
//     wxSplashScreen(const wxBitmap& bitmap, long splashStyle, int milliseconds, wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxSIMPLE_BORDER|wxFRAME_NO_TASKBAR|wxSTAY_ON_TOP);
static int LUACALL wxLua_wxSplashScreen_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = wxSIMPLE_BORDER | wxFRAME_NO_TASKBAR | wxSTAY_ON_TOP
    long style = (argCount >= 8 ? (long)wxlua_getnumbertype(L, 8) : wxSIMPLE_BORDER | wxFRAME_NO_TASKBAR | wxSTAY_ON_TOP);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 7 ? (const wxSize *)wxluaT_getuserdatatype(L, 7, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 6 ? (const wxPoint *)wxluaT_getuserdatatype(L, 6, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 5);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 4, wxluatype_wxWindow);
    // int milliseconds
    int milliseconds = (int)wxlua_getnumbertype(L, 3);
    // long splashStyle
    long splashStyle = (long)wxlua_getnumbertype(L, 2);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call constructor
    wxSplashScreen* returns = new wxSplashScreen(*bitmap, splashStyle, milliseconds, parent, id, *pos, *size, style);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSplashScreen);

    return 1;
}

#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxSplashScreen)



void wxLua_wxSplashScreen_delete_function(void** p)
{
    wxSplashScreen* o = (wxSplashScreen*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSplashScreen_methods[] = {
    { "GetSplashStyle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplashScreen_GetSplashStyle, 1, NULL },
    { "GetSplashWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplashScreen_GetSplashWindow, 1, NULL },
    { "GetTimeout", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplashScreen_GetTimeout, 1, NULL },

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxSplashScreen)
    { "wxSplashScreen", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSplashScreen_constructor, 1, NULL },
#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxSplashScreen)

    { 0, 0, 0, 0 },
};

int wxSplashScreen_methodCount = sizeof(wxSplashScreen_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSplashScreen


#if wxLUA_USE_wxSplashScreen
// ---------------------------------------------------------------------------
// Bind class wxSplashScreenWindow
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSplashScreenWindow'
int wxluatype_wxSplashScreenWindow = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxSplashScreen)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSplashScreenWindow_GetBitmap[] = { &wxluatype_wxSplashScreenWindow, NULL };
static int LUACALL wxLua_wxSplashScreenWindow_GetBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplashScreenWindow_GetBitmap[1] = {{ wxLua_wxSplashScreenWindow_GetBitmap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSplashScreenWindow_GetBitmap }};
//     wxBitmap& GetBitmap();
static int LUACALL wxLua_wxSplashScreenWindow_GetBitmap(lua_State *L)
{
    // get this
    wxSplashScreenWindow * self = (wxSplashScreenWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplashScreenWindow);
    // call GetBitmap
    wxBitmap* returns = (wxBitmap*)&self->GetBitmap();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSplashScreenWindow_SetBitmap[] = { &wxluatype_wxSplashScreenWindow, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxSplashScreenWindow_SetBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSplashScreenWindow_SetBitmap[1] = {{ wxLua_wxSplashScreenWindow_SetBitmap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSplashScreenWindow_SetBitmap }};
//     void SetBitmap(const wxBitmap& bitmap);
static int LUACALL wxLua_wxSplashScreenWindow_SetBitmap(lua_State *L)
{
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxSplashScreenWindow * self = (wxSplashScreenWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSplashScreenWindow);
    // call SetBitmap
    self->SetBitmap(*bitmap);

    return 0;
}

#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxSplashScreen)



void wxLua_wxSplashScreenWindow_delete_function(void** p)
{
    wxSplashScreenWindow* o = (wxSplashScreenWindow*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSplashScreenWindow_methods[] = {
#if (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxSplashScreen)
    { "GetBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplashScreenWindow_GetBitmap, 1, NULL },
    { "SetBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSplashScreenWindow_SetBitmap, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxLUA_USE_wxSplashScreen)

    { 0, 0, 0, 0 },
};

int wxSplashScreenWindow_methodCount = sizeof(wxSplashScreenWindow_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxSplashScreen


#if wxUSE_WIZARDDLG && wxLUA_USE_wxWizard
// ---------------------------------------------------------------------------
// Bind class wxWizard
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxWizard'
int wxluatype_wxWizard = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)
static wxLuaArgType s_wxluatypeArray_wxLua_wxWizard_Create[] = { &wxluatype_wxWizard, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxBitmap, &wxluatype_wxPoint, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWizard_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizard_Create[1] = {{ wxLua_wxWizard_Create, WXLUAMETHOD_METHOD, 2, 7, s_wxluatypeArray_wxLua_wxWizard_Create }};
//     bool Create(wxWindow* parent, int id = -1, const wxString& title = "", const wxBitmap& bitmap = wxNullBitmap, const wxPoint& pos = wxDefaultPosition, long style = wxDEFAULT_DIALOG_STYLE);
static int LUACALL wxLua_wxWizard_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = wxDEFAULT_DIALOG_STYLE
    long style = (argCount >= 7 ? (long)wxlua_getnumbertype(L, 7) : wxDEFAULT_DIALOG_STYLE);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 6 ? (const wxPoint *)wxluaT_getuserdatatype(L, 6, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxBitmap bitmap = wxNullBitmap
    const wxBitmap * bitmap = (argCount >= 5 ? (const wxBitmap *)wxluaT_getuserdatatype(L, 5, wxluatype_wxBitmap) : &wxNullBitmap);
    // const wxString title = ""
    const wxString title = (argCount >= 4 ? wxlua_getwxStringtype(L, 4) : wxString(wxEmptyString));
    // int id = -1
    int id = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : -1);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxWizard * self = (wxWizard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWizard);
    // call Create
    bool returns = (self->Create(parent, id, title, *bitmap, *pos, style));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)

static wxLuaArgType s_wxluatypeArray_wxLua_wxWizard_GetCurrentPage[] = { &wxluatype_wxWizard, NULL };
static int LUACALL wxLua_wxWizard_GetCurrentPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizard_GetCurrentPage[1] = {{ wxLua_wxWizard_GetCurrentPage, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWizard_GetCurrentPage }};
//     wxWizardPage* GetCurrentPage() const;
static int LUACALL wxLua_wxWizard_GetCurrentPage(lua_State *L)
{
    // get this
    wxWizard * self = (wxWizard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWizard);
    // call GetCurrentPage
    wxWizardPage* returns = (wxWizardPage*)self->GetCurrentPage();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWizardPage);

    return 1;
}


#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)
static wxLuaArgType s_wxluatypeArray_wxLua_wxWizard_GetPageAreaSizer[] = { &wxluatype_wxWizard, NULL };
static int LUACALL wxLua_wxWizard_GetPageAreaSizer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizard_GetPageAreaSizer[1] = {{ wxLua_wxWizard_GetPageAreaSizer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWizard_GetPageAreaSizer }};
//     virtual wxSizer* GetPageAreaSizer() const;
static int LUACALL wxLua_wxWizard_GetPageAreaSizer(lua_State *L)
{
    // get this
    wxWizard * self = (wxWizard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWizard);
    // call GetPageAreaSizer
    wxSizer* returns = (wxSizer*)self->GetPageAreaSizer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSizer);

    return 1;
}

#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)

#if (wxLUA_USE_wxPointSizeRect) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)
static wxLuaArgType s_wxluatypeArray_wxLua_wxWizard_GetPageSize[] = { &wxluatype_wxWizard, NULL };
static int LUACALL wxLua_wxWizard_GetPageSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizard_GetPageSize[1] = {{ wxLua_wxWizard_GetPageSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWizard_GetPageSize }};
//     wxSize GetPageSize() const;
static int LUACALL wxLua_wxWizard_GetPageSize(lua_State *L)
{
    // get this
    wxWizard * self = (wxWizard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWizard);
    // call GetPageSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetPageSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSize);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)

static wxLuaArgType s_wxluatypeArray_wxLua_wxWizard_HasNextPage[] = { &wxluatype_wxWizard, &wxluatype_wxWizardPage, NULL };
static int LUACALL wxLua_wxWizard_HasNextPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizard_HasNextPage[1] = {{ wxLua_wxWizard_HasNextPage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWizard_HasNextPage }};
//     virtual bool HasNextPage(wxWizardPage *page);
static int LUACALL wxLua_wxWizard_HasNextPage(lua_State *L)
{
    // wxWizardPage page
    wxWizardPage * page = (wxWizardPage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWizardPage);
    // get this
    wxWizard * self = (wxWizard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWizard);
    // call HasNextPage
    bool returns = (self->HasNextPage(page));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWizard_HasPrevPage[] = { &wxluatype_wxWizard, &wxluatype_wxWizardPage, NULL };
static int LUACALL wxLua_wxWizard_HasPrevPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizard_HasPrevPage[1] = {{ wxLua_wxWizard_HasPrevPage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWizard_HasPrevPage }};
//     virtual bool HasPrevPage(wxWizardPage *page);
static int LUACALL wxLua_wxWizard_HasPrevPage(lua_State *L)
{
    // wxWizardPage page
    wxWizardPage * page = (wxWizardPage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWizardPage);
    // get this
    wxWizard * self = (wxWizard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWizard);
    // call HasPrevPage
    bool returns = (self->HasPrevPage(page));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWizard_RunWizard[] = { &wxluatype_wxWizard, &wxluatype_wxWizardPage, NULL };
static int LUACALL wxLua_wxWizard_RunWizard(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizard_RunWizard[1] = {{ wxLua_wxWizard_RunWizard, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWizard_RunWizard }};
//     bool RunWizard(wxWizardPage* firstPage);
static int LUACALL wxLua_wxWizard_RunWizard(lua_State *L)
{
    // wxWizardPage firstPage
    wxWizardPage * firstPage = (wxWizardPage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWizardPage);
    // get this
    wxWizard * self = (wxWizard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWizard);
    // call RunWizard
    bool returns = (self->RunWizard(firstPage));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWizard_SetBorder[] = { &wxluatype_wxWizard, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWizard_SetBorder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizard_SetBorder[1] = {{ wxLua_wxWizard_SetBorder, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWizard_SetBorder }};
//     void SetBorder(int border);
static int LUACALL wxLua_wxWizard_SetBorder(lua_State *L)
{
    // int border
    int border = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxWizard * self = (wxWizard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWizard);
    // call SetBorder
    self->SetBorder(border);

    return 0;
}


#if (wxLUA_USE_wxPointSizeRect) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)
static wxLuaArgType s_wxluatypeArray_wxLua_wxWizard_SetPageSize[] = { &wxluatype_wxWizard, &wxluatype_wxSize, NULL };
static int LUACALL wxLua_wxWizard_SetPageSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizard_SetPageSize[1] = {{ wxLua_wxWizard_SetPageSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWizard_SetPageSize }};
//     void SetPageSize(const wxSize& sizePage);
static int LUACALL wxLua_wxWizard_SetPageSize(lua_State *L)
{
    // const wxSize sizePage
    const wxSize * sizePage = (const wxSize *)wxluaT_getuserdatatype(L, 2, wxluatype_wxSize);
    // get this
    wxWizard * self = (wxWizard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWizard);
    // call SetPageSize
    self->SetPageSize(*sizePage);

    return 0;
}

#endif // (wxLUA_USE_wxPointSizeRect) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)
static wxLuaArgType s_wxluatypeArray_wxLua_wxWizard_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_TSTRING, &wxluatype_wxBitmap, &wxluatype_wxPoint, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxWizard_constructor1(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizard_constructor1[1] = {{ wxLua_wxWizard_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 6, s_wxluatypeArray_wxLua_wxWizard_constructor1 }};
//     wxWizard(wxWindow* parent, int id = -1, const wxString& title = "", const wxBitmap& bitmap = wxNullBitmap, const wxPoint& pos = wxDefaultPosition, long style = wxDEFAULT_DIALOG_STYLE);
static int LUACALL wxLua_wxWizard_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // long style = wxDEFAULT_DIALOG_STYLE
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxDEFAULT_DIALOG_STYLE);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 5 ? (const wxPoint *)wxluaT_getuserdatatype(L, 5, wxluatype_wxPoint) : &wxDefaultPosition);
    // const wxBitmap bitmap = wxNullBitmap
    const wxBitmap * bitmap = (argCount >= 4 ? (const wxBitmap *)wxluaT_getuserdatatype(L, 4, wxluatype_wxBitmap) : &wxNullBitmap);
    // const wxString title = ""
    const wxString title = (argCount >= 3 ? wxlua_getwxStringtype(L, 3) : wxString(wxEmptyString));
    // int id = -1
    int id = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : -1);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxWizard* returns = new wxWizard(parent, id, title, *bitmap, *pos, style);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWizard);

    return 1;
}

#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)

static int LUACALL wxLua_wxWizard_constructor(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizard_constructor[1] = {{ wxLua_wxWizard_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxWizard();
static int LUACALL wxLua_wxWizard_constructor(lua_State *L)
{
    // call constructor
    wxWizard* returns = new wxWizard();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWizard);

    return 1;
}




#if (((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard))||(wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizard_constructor_overload[] =
{

#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)
    { wxLua_wxWizard_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 6, s_wxluatypeArray_wxLua_wxWizard_constructor1 },
#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)
    { wxLua_wxWizard_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxWizard_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxWizard_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard))||(wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)

void wxLua_wxWizard_delete_function(void** p)
{
    wxWizard* o = (wxWizard*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxWizard_methods[] = {
#if ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWizard_Create, 1, NULL },
#endif // ((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)

    { "GetCurrentPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWizard_GetCurrentPage, 1, NULL },

#if ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)
    { "GetPageAreaSizer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWizard_GetPageAreaSizer, 1, NULL },
#endif // ((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxSizer)) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)

#if (wxLUA_USE_wxPointSizeRect) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)
    { "GetPageSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWizard_GetPageSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)

    { "HasNextPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWizard_HasNextPage, 1, NULL },
    { "HasPrevPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWizard_HasPrevPage, 1, NULL },
    { "RunWizard", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWizard_RunWizard, 1, NULL },
    { "SetBorder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWizard_SetBorder, 1, NULL },

#if (wxLUA_USE_wxPointSizeRect) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)
    { "SetPageSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWizard_SetPageSize, 1, NULL },
#endif // (wxLUA_USE_wxPointSizeRect) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)

#if (((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard))||(wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)
    { "wxWizard", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxWizard_constructor_overload, s_wxluafunc_wxLua_wxWizard_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxBitmap) && (wxLUA_USE_wxPointSizeRect)) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard))||(wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)

    { 0, 0, 0, 0 },
};

int wxWizard_methodCount = sizeof(wxWizard_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_WIZARDDLG && wxLUA_USE_wxWizard


#if wxUSE_WIZARDDLG && wxLUA_USE_wxWizard
// ---------------------------------------------------------------------------
// Bind class wxWizardPage
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxWizardPage'
int wxluatype_wxWizardPage = WXLUA_TUNKNOWN;

#if (wxLUA_USE_wxBitmap) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)
static wxLuaArgType s_wxluatypeArray_wxLua_wxWizardPage_GetBitmap[] = { &wxluatype_wxWizardPage, NULL };
static int LUACALL wxLua_wxWizardPage_GetBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizardPage_GetBitmap[1] = {{ wxLua_wxWizardPage_GetBitmap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWizardPage_GetBitmap }};
//     wxBitmap GetBitmap() const;
static int LUACALL wxLua_wxWizardPage_GetBitmap(lua_State *L)
{
    // get this
    wxWizardPage * self = (wxWizardPage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWizardPage);
    // call GetBitmap
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetBitmap());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxBitmap);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)



void wxLua_wxWizardPage_delete_function(void** p)
{
    wxWizardPage* o = (wxWizardPage*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxWizardPage_methods[] = {
#if (wxLUA_USE_wxBitmap) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)
    { "GetBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWizardPage_GetBitmap, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)

    { 0, 0, 0, 0 },
};

int wxWizardPage_methodCount = sizeof(wxWizardPage_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_WIZARDDLG && wxLUA_USE_wxWizard


#if wxUSE_WIZARDDLG && wxLUA_USE_wxWizard
// ---------------------------------------------------------------------------
// Bind class wxWizardPageSimple
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxWizardPageSimple'
int wxluatype_wxWizardPageSimple = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxWizardPageSimple_Chain[] = { &wxluatype_wxWizardPageSimple, &wxluatype_wxWizardPageSimple, NULL };
static int LUACALL wxLua_wxWizardPageSimple_Chain(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizardPageSimple_Chain[1] = {{ wxLua_wxWizardPageSimple_Chain, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 2, 2, s_wxluatypeArray_wxLua_wxWizardPageSimple_Chain }};
//     static void Chain(wxWizardPageSimple* first, wxWizardPageSimple* second);
static int LUACALL wxLua_wxWizardPageSimple_Chain(lua_State *L)
{
    // wxWizardPageSimple second
    wxWizardPageSimple * second = (wxWizardPageSimple *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWizardPageSimple);
    // wxWizardPageSimple first
    wxWizardPageSimple * first = (wxWizardPageSimple *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWizardPageSimple);
    // call Chain
    wxWizardPageSimple::Chain(first, second);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWizardPageSimple_GetNext[] = { &wxluatype_wxWizardPageSimple, NULL };
static int LUACALL wxLua_wxWizardPageSimple_GetNext(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizardPageSimple_GetNext[1] = {{ wxLua_wxWizardPageSimple_GetNext, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWizardPageSimple_GetNext }};
//     virtual wxWizardPage* GetNext() const;
static int LUACALL wxLua_wxWizardPageSimple_GetNext(lua_State *L)
{
    // get this
    wxWizardPageSimple * self = (wxWizardPageSimple *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWizardPageSimple);
    // call GetNext
    wxWizardPage* returns = (wxWizardPage*)self->GetNext();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWizardPage);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWizardPageSimple_GetPrev[] = { &wxluatype_wxWizardPageSimple, NULL };
static int LUACALL wxLua_wxWizardPageSimple_GetPrev(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizardPageSimple_GetPrev[1] = {{ wxLua_wxWizardPageSimple_GetPrev, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWizardPageSimple_GetPrev }};
//     virtual wxWizardPage* GetPrev() const;
static int LUACALL wxLua_wxWizardPageSimple_GetPrev(lua_State *L)
{
    // get this
    wxWizardPageSimple * self = (wxWizardPageSimple *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWizardPageSimple);
    // call GetPrev
    wxWizardPage* returns = (wxWizardPage*)self->GetPrev();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWizardPage);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWizardPageSimple_SetNext[] = { &wxluatype_wxWizardPageSimple, &wxluatype_wxWizardPage, NULL };
static int LUACALL wxLua_wxWizardPageSimple_SetNext(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizardPageSimple_SetNext[1] = {{ wxLua_wxWizardPageSimple_SetNext, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWizardPageSimple_SetNext }};
//     void SetNext(wxWizardPage* next);
static int LUACALL wxLua_wxWizardPageSimple_SetNext(lua_State *L)
{
    // wxWizardPage next
    wxWizardPage * next = (wxWizardPage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWizardPage);
    // get this
    wxWizardPageSimple * self = (wxWizardPageSimple *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWizardPageSimple);
    // call SetNext
    self->SetNext(next);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWizardPageSimple_SetPrev[] = { &wxluatype_wxWizardPageSimple, &wxluatype_wxWizardPage, NULL };
static int LUACALL wxLua_wxWizardPageSimple_SetPrev(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizardPageSimple_SetPrev[1] = {{ wxLua_wxWizardPageSimple_SetPrev, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxWizardPageSimple_SetPrev }};
//     void SetPrev(wxWizardPage* prev);
static int LUACALL wxLua_wxWizardPageSimple_SetPrev(lua_State *L)
{
    // wxWizardPage prev
    wxWizardPage * prev = (wxWizardPage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWizardPage);
    // get this
    wxWizardPageSimple * self = (wxWizardPageSimple *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWizardPageSimple);
    // call SetPrev
    self->SetPrev(prev);

    return 0;
}


#if (wxLUA_USE_wxBitmap) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)
static wxLuaArgType s_wxluatypeArray_wxLua_wxWizardPageSimple_constructor[] = { &wxluatype_wxWizard, &wxluatype_wxWizardPage, &wxluatype_wxWizardPage, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxWizardPageSimple_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizardPageSimple_constructor[1] = {{ wxLua_wxWizardPageSimple_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxWizardPageSimple_constructor }};
//     wxWizardPageSimple(wxWizard* parent = NULL, wxWizardPage* prev = NULL, wxWizardPage* next = NULL, const wxBitmap& bitmap = wxNullBitmap);
static int LUACALL wxLua_wxWizardPageSimple_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxBitmap bitmap = wxNullBitmap
    const wxBitmap * bitmap = (argCount >= 4 ? (const wxBitmap *)wxluaT_getuserdatatype(L, 4, wxluatype_wxBitmap) : &wxNullBitmap);
    // wxWizardPage next = NULL
    wxWizardPage * next = (argCount >= 3 ? (wxWizardPage *)wxluaT_getuserdatatype(L, 3, wxluatype_wxWizardPage) : NULL);
    // wxWizardPage prev = NULL
    wxWizardPage * prev = (argCount >= 2 ? (wxWizardPage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWizardPage) : NULL);
    // wxWizard parent = NULL
    wxWizard * parent = (argCount >= 1 ? (wxWizard *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWizard) : NULL);
    // call constructor
    wxWizardPageSimple* returns = new wxWizardPageSimple(parent, prev, next, *bitmap);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWizardPageSimple);

    return 1;
}

#endif // (wxLUA_USE_wxBitmap) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)



void wxLua_wxWizardPageSimple_delete_function(void** p)
{
    wxWizardPageSimple* o = (wxWizardPageSimple*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxWizardPageSimple_methods[] = {
    { "Chain", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxWizardPageSimple_Chain, 1, NULL },
    { "GetNext", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWizardPageSimple_GetNext, 1, NULL },
    { "GetPrev", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWizardPageSimple_GetPrev, 1, NULL },
    { "SetNext", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWizardPageSimple_SetNext, 1, NULL },
    { "SetPrev", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWizardPageSimple_SetPrev, 1, NULL },

#if (wxLUA_USE_wxBitmap) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)
    { "wxWizardPageSimple", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxWizardPageSimple_constructor, 1, NULL },
#endif // (wxLUA_USE_wxBitmap) && (wxUSE_WIZARDDLG && wxLUA_USE_wxWizard)

    { 0, 0, 0, 0 },
};

int wxWizardPageSimple_methodCount = sizeof(wxWizardPageSimple_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_WIZARDDLG && wxLUA_USE_wxWizard


#if wxUSE_WIZARDDLG && wxLUA_USE_wxWizard
// ---------------------------------------------------------------------------
// Bind class wxWizardEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxWizardEvent'
int wxluatype_wxWizardEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxWizardEvent_GetDirection[] = { &wxluatype_wxWizardEvent, NULL };
static int LUACALL wxLua_wxWizardEvent_GetDirection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizardEvent_GetDirection[1] = {{ wxLua_wxWizardEvent_GetDirection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWizardEvent_GetDirection }};
//     bool GetDirection() const;
static int LUACALL wxLua_wxWizardEvent_GetDirection(lua_State *L)
{
    // get this
    wxWizardEvent * self = (wxWizardEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWizardEvent);
    // call GetDirection
    bool returns = (self->GetDirection());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWizardEvent_GetPage[] = { &wxluatype_wxWizardEvent, NULL };
static int LUACALL wxLua_wxWizardEvent_GetPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizardEvent_GetPage[1] = {{ wxLua_wxWizardEvent_GetPage, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWizardEvent_GetPage }};
//     wxWizardPage* GetPage() const;
static int LUACALL wxLua_wxWizardEvent_GetPage(lua_State *L)
{
    // get this
    wxWizardEvent * self = (wxWizardEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWizardEvent);
    // call GetPage
    wxWizardPage* returns = (wxWizardPage*)self->GetPage();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWizardPage);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWizardEvent_delete[] = { &wxluatype_wxWizardEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizardEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxWizardEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxWizardEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxWizardEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWizardEvent_constructor[1] = {{ wxLua_wxWizardEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 3, s_wxluatypeArray_wxLua_wxWizardEvent_constructor }};
//     wxWizardEvent(wxEventType type = wxEVT_NULL, int id = -1, bool direction = true);
static int LUACALL wxLua_wxWizardEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool direction = true
    bool direction = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // int id = -1
    int id = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : -1);
    // wxEventType type = wxEVT_NULL
    wxEventType type = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxWizardEvent* returns = new wxWizardEvent(type, id, direction);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxWizardEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWizardEvent);

    return 1;
}




void wxLua_wxWizardEvent_delete_function(void** p)
{
    wxWizardEvent* o = (wxWizardEvent*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxWizardEvent_methods[] = {
    { "GetDirection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWizardEvent_GetDirection, 1, NULL },
    { "GetPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWizardEvent_GetPage, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxWizardEvent_delete, 1, NULL },
    { "wxWizardEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxWizardEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxWizardEvent_methodCount = sizeof(wxWizardEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxUSE_WIZARDDLG && wxLUA_USE_wxWizard


#if wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON )
// ---------------------------------------------------------------------------
// Bind class wxTaskBarIcon
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTaskBarIcon'
int wxluatype_wxTaskBarIcon = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTaskBarIcon_IsIconInstalled[] = { &wxluatype_wxTaskBarIcon, NULL };
static int LUACALL wxLua_wxTaskBarIcon_IsIconInstalled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTaskBarIcon_IsIconInstalled[1] = {{ wxLua_wxTaskBarIcon_IsIconInstalled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTaskBarIcon_IsIconInstalled }};
//     bool IsIconInstalled();
static int LUACALL wxLua_wxTaskBarIcon_IsIconInstalled(lua_State *L)
{
    // get this
    wxTaskBarIcon * self = (wxTaskBarIcon *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTaskBarIcon);
    // call IsIconInstalled
    bool returns = (self->IsIconInstalled());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(2,4,0)) && (wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON ))
static wxLuaArgType s_wxluatypeArray_wxLua_wxTaskBarIcon_IsOk[] = { &wxluatype_wxTaskBarIcon, NULL };
static int LUACALL wxLua_wxTaskBarIcon_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTaskBarIcon_IsOk[1] = {{ wxLua_wxTaskBarIcon_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTaskBarIcon_IsOk }};
//     %wxchkver_2_4 bool IsOk();
static int LUACALL wxLua_wxTaskBarIcon_IsOk(lua_State *L)
{
    // get this
    wxTaskBarIcon * self = (wxTaskBarIcon *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTaskBarIcon);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(2,4,0)) && (wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON ))

#if (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON ))
static wxLuaArgType s_wxluatypeArray_wxLua_wxTaskBarIcon_PopupMenu[] = { &wxluatype_wxTaskBarIcon, &wxluatype_wxMenu, NULL };
static int LUACALL wxLua_wxTaskBarIcon_PopupMenu(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTaskBarIcon_PopupMenu[1] = {{ wxLua_wxTaskBarIcon_PopupMenu, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxTaskBarIcon_PopupMenu }};
//     virtual bool PopupMenu(wxMenu* menu);
static int LUACALL wxLua_wxTaskBarIcon_PopupMenu(lua_State *L)
{
    // wxMenu menu
    wxMenu * menu = (wxMenu *)wxluaT_getuserdatatype(L, 2, wxluatype_wxMenu);
    // get this
    wxTaskBarIcon * self = (wxTaskBarIcon *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTaskBarIcon);
    // call PopupMenu
    bool returns = (self->PopupMenu(menu));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON ))

static wxLuaArgType s_wxluatypeArray_wxLua_wxTaskBarIcon_RemoveIcon[] = { &wxluatype_wxTaskBarIcon, NULL };
static int LUACALL wxLua_wxTaskBarIcon_RemoveIcon(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTaskBarIcon_RemoveIcon[1] = {{ wxLua_wxTaskBarIcon_RemoveIcon, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxTaskBarIcon_RemoveIcon }};
//     bool RemoveIcon();
static int LUACALL wxLua_wxTaskBarIcon_RemoveIcon(lua_State *L)
{
    // get this
    wxTaskBarIcon * self = (wxTaskBarIcon *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTaskBarIcon);
    // call RemoveIcon
    bool returns = (self->RemoveIcon());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxIcon) && (wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON ))
static wxLuaArgType s_wxluatypeArray_wxLua_wxTaskBarIcon_SetIcon[] = { &wxluatype_wxTaskBarIcon, &wxluatype_wxIcon, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxTaskBarIcon_SetIcon(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTaskBarIcon_SetIcon[1] = {{ wxLua_wxTaskBarIcon_SetIcon, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxTaskBarIcon_SetIcon }};
//     bool SetIcon(const wxIcon& icon, const wxString& tooltip);
static int LUACALL wxLua_wxTaskBarIcon_SetIcon(lua_State *L)
{
    // const wxString tooltip
    const wxString tooltip = wxlua_getwxStringtype(L, 3);
    // const wxIcon icon
    const wxIcon * icon = (const wxIcon *)wxluaT_getuserdatatype(L, 2, wxluatype_wxIcon);
    // get this
    wxTaskBarIcon * self = (wxTaskBarIcon *)wxluaT_getuserdatatype(L, 1, wxluatype_wxTaskBarIcon);
    // call SetIcon
    bool returns = (self->SetIcon(*icon, tooltip));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxLUA_USE_wxIcon) && (wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON ))

static wxLuaArgType s_wxluatypeArray_wxLua_wxTaskBarIcon_delete[] = { &wxluatype_wxTaskBarIcon, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTaskBarIcon_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTaskBarIcon_delete }};

static int LUACALL wxLua_wxTaskBarIcon_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTaskBarIcon_constructor[1] = {{ wxLua_wxTaskBarIcon_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxTaskBarIcon();
static int LUACALL wxLua_wxTaskBarIcon_constructor(lua_State *L)
{
    // call constructor
    wxTaskBarIcon* returns = new wxTaskBarIcon();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxTaskBarIcon);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTaskBarIcon);

    return 1;
}




void wxLua_wxTaskBarIcon_delete_function(void** p)
{
    wxTaskBarIcon* o = (wxTaskBarIcon*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTaskBarIcon_methods[] = {
    { "IsIconInstalled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTaskBarIcon_IsIconInstalled, 1, NULL },

#if (wxCHECK_VERSION(2,4,0)) && (wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON ))
    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTaskBarIcon_IsOk, 1, NULL },
#endif // (wxCHECK_VERSION(2,4,0)) && (wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON ))

#if (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON ))
    { "PopupMenu", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTaskBarIcon_PopupMenu, 1, NULL },
#endif // (wxLUA_USE_wxMenu && wxUSE_MENUS) && (wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON ))

    { "RemoveIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTaskBarIcon_RemoveIcon, 1, NULL },

#if (wxLUA_USE_wxIcon) && (wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON ))
    { "SetIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxTaskBarIcon_SetIcon, 1, NULL },
#endif // (wxLUA_USE_wxIcon) && (wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON ))

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTaskBarIcon_delete, 1, NULL },
    { "wxTaskBarIcon", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTaskBarIcon_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxTaskBarIcon_methodCount = sizeof(wxTaskBarIcon_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON )


#if wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON )
// ---------------------------------------------------------------------------
// Bind class wxTaskBarIconEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxTaskBarIconEvent'
int wxluatype_wxTaskBarIconEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxTaskBarIconEvent_delete[] = { &wxluatype_wxTaskBarIconEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTaskBarIconEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxTaskBarIconEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxTaskBarIconEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_wxTaskBarIcon, NULL };
static int LUACALL wxLua_wxTaskBarIconEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxTaskBarIconEvent_constructor[1] = {{ wxLua_wxTaskBarIconEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 2, s_wxluatypeArray_wxLua_wxTaskBarIconEvent_constructor }};
//     wxTaskBarIconEvent(wxEventType evtType, wxTaskBarIcon *tbIcon);
static int LUACALL wxLua_wxTaskBarIconEvent_constructor(lua_State *L)
{
    // wxTaskBarIcon tbIcon
    wxTaskBarIcon * tbIcon = (wxTaskBarIcon *)wxluaT_getuserdatatype(L, 2, wxluatype_wxTaskBarIcon);
    // wxEventType evtType
    wxEventType evtType = (wxEventType)wxlua_getnumbertype(L, 1);
    // call constructor
    wxTaskBarIconEvent* returns = new wxTaskBarIconEvent(evtType, tbIcon);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxTaskBarIconEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxTaskBarIconEvent);

    return 1;
}




void wxLua_wxTaskBarIconEvent_delete_function(void** p)
{
    wxTaskBarIconEvent* o = (wxTaskBarIconEvent*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxTaskBarIconEvent_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxTaskBarIconEvent_delete, 1, NULL },
    { "wxTaskBarIconEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxTaskBarIconEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxTaskBarIconEvent_methodCount = sizeof(wxTaskBarIconEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON )


#if wxLUA_USE_wxJoystick && wxUSE_JOYSTICK
// ---------------------------------------------------------------------------
// Bind class wxJoystick
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxJoystick'
int wxluatype_wxJoystick = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetButtonState[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetButtonState(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetButtonState[1] = {{ wxLua_wxJoystick_GetButtonState, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetButtonState }};
//     int GetButtonState() const;
static int LUACALL wxLua_wxJoystick_GetButtonState(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetButtonState
    int returns = (self->GetButtonState());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetManufacturerId[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetManufacturerId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetManufacturerId[1] = {{ wxLua_wxJoystick_GetManufacturerId, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetManufacturerId }};
//     int GetManufacturerId() const;
static int LUACALL wxLua_wxJoystick_GetManufacturerId(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetManufacturerId
    int returns = (self->GetManufacturerId());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetMovementThreshold[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetMovementThreshold(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetMovementThreshold[1] = {{ wxLua_wxJoystick_GetMovementThreshold, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetMovementThreshold }};
//     int GetMovementThreshold() const;
static int LUACALL wxLua_wxJoystick_GetMovementThreshold(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetMovementThreshold
    int returns = (self->GetMovementThreshold());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetNumberAxes[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetNumberAxes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetNumberAxes[1] = {{ wxLua_wxJoystick_GetNumberAxes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetNumberAxes }};
//     int GetNumberAxes() const;
static int LUACALL wxLua_wxJoystick_GetNumberAxes(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetNumberAxes
    int returns = (self->GetNumberAxes());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetNumberButtons[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetNumberButtons(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetNumberButtons[1] = {{ wxLua_wxJoystick_GetNumberButtons, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetNumberButtons }};
//     int GetNumberButtons() const;
static int LUACALL wxLua_wxJoystick_GetNumberButtons(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetNumberButtons
    int returns = (self->GetNumberButtons());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK)
static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetNumberJoysticks1[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetNumberJoysticks1(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetNumberJoysticks1[1] = {{ wxLua_wxJoystick_GetNumberJoysticks1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetNumberJoysticks1 }};
//     !%wxchkver_2_8 int GetNumberJoysticks() const;
static int LUACALL wxLua_wxJoystick_GetNumberJoysticks1(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetNumberJoysticks
    int returns = (self->GetNumberJoysticks());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK)

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK)
static int LUACALL wxLua_wxJoystick_GetNumberJoysticks(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetNumberJoysticks[1] = {{ wxLua_wxJoystick_GetNumberJoysticks, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     %wxchkver_2_8 static int GetNumberJoysticks() const;
static int LUACALL wxLua_wxJoystick_GetNumberJoysticks(lua_State *L)
{
    // call GetNumberJoysticks
    int returns = (wxJoystick::GetNumberJoysticks());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK)

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetPOVCTSPosition[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetPOVCTSPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetPOVCTSPosition[1] = {{ wxLua_wxJoystick_GetPOVCTSPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetPOVCTSPosition }};
//     int GetPOVCTSPosition() const;
static int LUACALL wxLua_wxJoystick_GetPOVCTSPosition(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetPOVCTSPosition
    int returns = (self->GetPOVCTSPosition());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetPOVPosition[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetPOVPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetPOVPosition[1] = {{ wxLua_wxJoystick_GetPOVPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetPOVPosition }};
//     int GetPOVPosition() const;
static int LUACALL wxLua_wxJoystick_GetPOVPosition(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetPOVPosition
    int returns = (self->GetPOVPosition());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetPollingMax[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetPollingMax(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetPollingMax[1] = {{ wxLua_wxJoystick_GetPollingMax, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetPollingMax }};
//     int GetPollingMax() const;
static int LUACALL wxLua_wxJoystick_GetPollingMax(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetPollingMax
    int returns = (self->GetPollingMax());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetPollingMin[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetPollingMin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetPollingMin[1] = {{ wxLua_wxJoystick_GetPollingMin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetPollingMin }};
//     int GetPollingMin() const;
static int LUACALL wxLua_wxJoystick_GetPollingMin(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetPollingMin
    int returns = (self->GetPollingMin());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetPosition[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetPosition[1] = {{ wxLua_wxJoystick_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetPosition }};
//     wxPoint GetPosition() const;
static int LUACALL wxLua_wxJoystick_GetPosition(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetPosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPosition());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxPoint);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetProductId[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetProductId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetProductId[1] = {{ wxLua_wxJoystick_GetProductId, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetProductId }};
//     int GetProductId() const;
static int LUACALL wxLua_wxJoystick_GetProductId(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetProductId
    int returns = (self->GetProductId());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetProductName[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetProductName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetProductName[1] = {{ wxLua_wxJoystick_GetProductName, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetProductName }};
//     wxString GetProductName() const;
static int LUACALL wxLua_wxJoystick_GetProductName(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetProductName
    wxString returns = (self->GetProductName());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetRudderMax[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetRudderMax(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetRudderMax[1] = {{ wxLua_wxJoystick_GetRudderMax, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetRudderMax }};
//     int GetRudderMax() const;
static int LUACALL wxLua_wxJoystick_GetRudderMax(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetRudderMax
    int returns = (self->GetRudderMax());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetRudderMin[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetRudderMin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetRudderMin[1] = {{ wxLua_wxJoystick_GetRudderMin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetRudderMin }};
//     int GetRudderMin() const;
static int LUACALL wxLua_wxJoystick_GetRudderMin(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetRudderMin
    int returns = (self->GetRudderMin());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetRudderPosition[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetRudderPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetRudderPosition[1] = {{ wxLua_wxJoystick_GetRudderPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetRudderPosition }};
//     int GetRudderPosition() const;
static int LUACALL wxLua_wxJoystick_GetRudderPosition(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetRudderPosition
    int returns = (self->GetRudderPosition());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetUMax[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetUMax(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetUMax[1] = {{ wxLua_wxJoystick_GetUMax, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetUMax }};
//     int GetUMax() const;
static int LUACALL wxLua_wxJoystick_GetUMax(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetUMax
    int returns = (self->GetUMax());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetUMin[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetUMin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetUMin[1] = {{ wxLua_wxJoystick_GetUMin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetUMin }};
//     int GetUMin() const;
static int LUACALL wxLua_wxJoystick_GetUMin(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetUMin
    int returns = (self->GetUMin());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetUPosition[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetUPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetUPosition[1] = {{ wxLua_wxJoystick_GetUPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetUPosition }};
//     int GetUPosition() const;
static int LUACALL wxLua_wxJoystick_GetUPosition(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetUPosition
    int returns = (self->GetUPosition());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetVMax[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetVMax(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetVMax[1] = {{ wxLua_wxJoystick_GetVMax, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetVMax }};
//     int GetVMax() const;
static int LUACALL wxLua_wxJoystick_GetVMax(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetVMax
    int returns = (self->GetVMax());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetVMin[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetVMin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetVMin[1] = {{ wxLua_wxJoystick_GetVMin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetVMin }};
//     int GetVMin() const;
static int LUACALL wxLua_wxJoystick_GetVMin(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetVMin
    int returns = (self->GetVMin());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetVPosition[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetVPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetVPosition[1] = {{ wxLua_wxJoystick_GetVPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetVPosition }};
//     int GetVPosition() const;
static int LUACALL wxLua_wxJoystick_GetVPosition(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetVPosition
    int returns = (self->GetVPosition());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetXMax[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetXMax(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetXMax[1] = {{ wxLua_wxJoystick_GetXMax, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetXMax }};
//     int GetXMax() const;
static int LUACALL wxLua_wxJoystick_GetXMax(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetXMax
    int returns = (self->GetXMax());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetXMin[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetXMin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetXMin[1] = {{ wxLua_wxJoystick_GetXMin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetXMin }};
//     int GetXMin() const;
static int LUACALL wxLua_wxJoystick_GetXMin(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetXMin
    int returns = (self->GetXMin());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetYMax[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetYMax(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetYMax[1] = {{ wxLua_wxJoystick_GetYMax, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetYMax }};
//     int GetYMax() const;
static int LUACALL wxLua_wxJoystick_GetYMax(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetYMax
    int returns = (self->GetYMax());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetYMin[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetYMin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetYMin[1] = {{ wxLua_wxJoystick_GetYMin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetYMin }};
//     int GetYMin() const;
static int LUACALL wxLua_wxJoystick_GetYMin(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetYMin
    int returns = (self->GetYMin());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetZMax[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetZMax(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetZMax[1] = {{ wxLua_wxJoystick_GetZMax, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetZMax }};
//     int GetZMax() const;
static int LUACALL wxLua_wxJoystick_GetZMax(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetZMax
    int returns = (self->GetZMax());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetZMin[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetZMin(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetZMin[1] = {{ wxLua_wxJoystick_GetZMin, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetZMin }};
//     int GetZMin() const;
static int LUACALL wxLua_wxJoystick_GetZMin(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetZMin
    int returns = (self->GetZMin());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_GetZPosition[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_GetZPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetZPosition[1] = {{ wxLua_wxJoystick_GetZPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetZPosition }};
//     int GetZPosition() const;
static int LUACALL wxLua_wxJoystick_GetZPosition(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call GetZPosition
    int returns = (self->GetZPosition());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_HasPOV[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_HasPOV(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_HasPOV[1] = {{ wxLua_wxJoystick_HasPOV, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_HasPOV }};
//     bool HasPOV() const;
static int LUACALL wxLua_wxJoystick_HasPOV(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call HasPOV
    bool returns = (self->HasPOV());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_HasPOV4Dir[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_HasPOV4Dir(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_HasPOV4Dir[1] = {{ wxLua_wxJoystick_HasPOV4Dir, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_HasPOV4Dir }};
//     bool HasPOV4Dir() const;
static int LUACALL wxLua_wxJoystick_HasPOV4Dir(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call HasPOV4Dir
    bool returns = (self->HasPOV4Dir());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_HasPOVCTS[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_HasPOVCTS(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_HasPOVCTS[1] = {{ wxLua_wxJoystick_HasPOVCTS, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_HasPOVCTS }};
//     bool HasPOVCTS() const;
static int LUACALL wxLua_wxJoystick_HasPOVCTS(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call HasPOVCTS
    bool returns = (self->HasPOVCTS());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_HasRudder[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_HasRudder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_HasRudder[1] = {{ wxLua_wxJoystick_HasRudder, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_HasRudder }};
//     bool HasRudder() const;
static int LUACALL wxLua_wxJoystick_HasRudder(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call HasRudder
    bool returns = (self->HasRudder());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_HasU[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_HasU(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_HasU[1] = {{ wxLua_wxJoystick_HasU, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_HasU }};
//     bool HasU() const;
static int LUACALL wxLua_wxJoystick_HasU(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call HasU
    bool returns = (self->HasU());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_HasV[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_HasV(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_HasV[1] = {{ wxLua_wxJoystick_HasV, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_HasV }};
//     bool HasV() const;
static int LUACALL wxLua_wxJoystick_HasV(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call HasV
    bool returns = (self->HasV());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_HasZ[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_HasZ(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_HasZ[1] = {{ wxLua_wxJoystick_HasZ, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_HasZ }};
//     bool HasZ() const;
static int LUACALL wxLua_wxJoystick_HasZ(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call HasZ
    bool returns = (self->HasZ());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_IsOk[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_IsOk[1] = {{ wxLua_wxJoystick_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_IsOk }};
//     bool IsOk() const;
static int LUACALL wxLua_wxJoystick_IsOk(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_ReleaseCapture[] = { &wxluatype_wxJoystick, NULL };
static int LUACALL wxLua_wxJoystick_ReleaseCapture(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_ReleaseCapture[1] = {{ wxLua_wxJoystick_ReleaseCapture, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_ReleaseCapture }};
//     bool ReleaseCapture();
static int LUACALL wxLua_wxJoystick_ReleaseCapture(lua_State *L)
{
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call ReleaseCapture
    bool returns = (self->ReleaseCapture());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_SetCapture[] = { &wxluatype_wxJoystick, &wxluatype_wxWindow, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxJoystick_SetCapture(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_SetCapture[1] = {{ wxLua_wxJoystick_SetCapture, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxJoystick_SetCapture }};
//     bool SetCapture(wxWindow* win, int pollingFreq = 0);
static int LUACALL wxLua_wxJoystick_SetCapture(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int pollingFreq = 0
    int pollingFreq = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 0);
    // wxWindow win
    wxWindow * win = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call SetCapture
    bool returns = (self->SetCapture(win, pollingFreq));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_SetMovementThreshold[] = { &wxluatype_wxJoystick, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxJoystick_SetMovementThreshold(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_SetMovementThreshold[1] = {{ wxLua_wxJoystick_SetMovementThreshold, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxJoystick_SetMovementThreshold }};
//     void SetMovementThreshold(int threshold);
static int LUACALL wxLua_wxJoystick_SetMovementThreshold(lua_State *L)
{
    // int threshold
    int threshold = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxJoystick * self = (wxJoystick *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystick);
    // call SetMovementThreshold
    self->SetMovementThreshold(threshold);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_delete[] = { &wxluatype_wxJoystick, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystick_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxJoystick_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_constructor[1] = {{ wxLua_wxJoystick_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxJoystick_constructor }};
//     wxJoystick(int joystick = wxJOYSTICK1);
static int LUACALL wxLua_wxJoystick_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int joystick = wxJOYSTICK1
    int joystick = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : wxJOYSTICK1);
    // call constructor
    wxJoystick* returns = new wxJoystick(joystick);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxJoystick);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxJoystick);

    return 1;
}




#if ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK))||((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystick_GetNumberJoysticks_overload[] =
{

#if (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK)
    { wxLua_wxJoystick_GetNumberJoysticks1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystick_GetNumberJoysticks1 },
#endif // (!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK)

#if (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK)
    { wxLua_wxJoystick_GetNumberJoysticks, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None },
#endif // (wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK)
};
static int s_wxluafunc_wxLua_wxJoystick_GetNumberJoysticks_overload_count = sizeof(s_wxluafunc_wxLua_wxJoystick_GetNumberJoysticks_overload)/sizeof(wxLuaBindCFunc);

#endif // ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK))||((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK))

void wxLua_wxJoystick_delete_function(void** p)
{
    wxJoystick* o = (wxJoystick*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxJoystick_methods[] = {
    { "GetButtonState", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetButtonState, 1, NULL },
    { "GetManufacturerId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetManufacturerId, 1, NULL },
    { "GetMovementThreshold", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetMovementThreshold, 1, NULL },
    { "GetNumberAxes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetNumberAxes, 1, NULL },
    { "GetNumberButtons", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetNumberButtons, 1, NULL },

#if ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK))||((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK))
    { "GetNumberJoysticks", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxJoystick_GetNumberJoysticks_overload, s_wxluafunc_wxLua_wxJoystick_GetNumberJoysticks_overload_count, 0 },
#endif // ((!wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK))||((wxCHECK_VERSION(2,8,0)) && (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK))

    { "GetPOVCTSPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetPOVCTSPosition, 1, NULL },
    { "GetPOVPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetPOVPosition, 1, NULL },
    { "GetPollingMax", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetPollingMax, 1, NULL },
    { "GetPollingMin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetPollingMin, 1, NULL },

#if (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK) && (wxLUA_USE_wxPointSizeRect)
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetPosition, 1, NULL },
#endif // (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK) && (wxLUA_USE_wxPointSizeRect)

    { "GetProductId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetProductId, 1, NULL },
    { "GetProductName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetProductName, 1, NULL },
    { "GetRudderMax", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetRudderMax, 1, NULL },
    { "GetRudderMin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetRudderMin, 1, NULL },
    { "GetRudderPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetRudderPosition, 1, NULL },
    { "GetUMax", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetUMax, 1, NULL },
    { "GetUMin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetUMin, 1, NULL },
    { "GetUPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetUPosition, 1, NULL },
    { "GetVMax", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetVMax, 1, NULL },
    { "GetVMin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetVMin, 1, NULL },
    { "GetVPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetVPosition, 1, NULL },
    { "GetXMax", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetXMax, 1, NULL },
    { "GetXMin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetXMin, 1, NULL },
    { "GetYMax", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetYMax, 1, NULL },
    { "GetYMin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetYMin, 1, NULL },
    { "GetZMax", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetZMax, 1, NULL },
    { "GetZMin", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetZMin, 1, NULL },
    { "GetZPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_GetZPosition, 1, NULL },
    { "HasPOV", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_HasPOV, 1, NULL },
    { "HasPOV4Dir", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_HasPOV4Dir, 1, NULL },
    { "HasPOVCTS", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_HasPOVCTS, 1, NULL },
    { "HasRudder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_HasRudder, 1, NULL },
    { "HasU", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_HasU, 1, NULL },
    { "HasV", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_HasV, 1, NULL },
    { "HasZ", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_HasZ, 1, NULL },
    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_IsOk, 1, NULL },
    { "ReleaseCapture", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_ReleaseCapture, 1, NULL },
    { "SetCapture", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_SetCapture, 1, NULL },
    { "SetMovementThreshold", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystick_SetMovementThreshold, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxJoystick_delete, 1, NULL },
    { "wxJoystick", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxJoystick_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxJoystick_methodCount = sizeof(wxJoystick_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxJoystick && wxUSE_JOYSTICK


#if wxLUA_USE_wxJoystick && wxUSE_JOYSTICK
// ---------------------------------------------------------------------------
// Bind class wxJoystickEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxJoystickEvent'
int wxluatype_wxJoystickEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystickEvent_ButtonDown[] = { &wxluatype_wxJoystickEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxJoystickEvent_ButtonDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystickEvent_ButtonDown[1] = {{ wxLua_wxJoystickEvent_ButtonDown, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxJoystickEvent_ButtonDown }};
//     bool ButtonDown(int button = wxJOY_BUTTON_ANY) const;
static int LUACALL wxLua_wxJoystickEvent_ButtonDown(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int button = wxJOY_BUTTON_ANY
    int button = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxJOY_BUTTON_ANY);
    // get this
    wxJoystickEvent * self = (wxJoystickEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystickEvent);
    // call ButtonDown
    bool returns = (self->ButtonDown(button));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystickEvent_ButtonIsDown[] = { &wxluatype_wxJoystickEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxJoystickEvent_ButtonIsDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystickEvent_ButtonIsDown[1] = {{ wxLua_wxJoystickEvent_ButtonIsDown, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxJoystickEvent_ButtonIsDown }};
//     bool ButtonIsDown(int button = wxJOY_BUTTON_ANY) const;
static int LUACALL wxLua_wxJoystickEvent_ButtonIsDown(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int button = wxJOY_BUTTON_ANY
    int button = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxJOY_BUTTON_ANY);
    // get this
    wxJoystickEvent * self = (wxJoystickEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystickEvent);
    // call ButtonIsDown
    bool returns = (self->ButtonIsDown(button));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystickEvent_ButtonUp[] = { &wxluatype_wxJoystickEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxJoystickEvent_ButtonUp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystickEvent_ButtonUp[1] = {{ wxLua_wxJoystickEvent_ButtonUp, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxJoystickEvent_ButtonUp }};
//     bool ButtonUp(int button = wxJOY_BUTTON_ANY) const;
static int LUACALL wxLua_wxJoystickEvent_ButtonUp(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int button = wxJOY_BUTTON_ANY
    int button = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : wxJOY_BUTTON_ANY);
    // get this
    wxJoystickEvent * self = (wxJoystickEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystickEvent);
    // call ButtonUp
    bool returns = (self->ButtonUp(button));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystickEvent_GetButtonChange[] = { &wxluatype_wxJoystickEvent, NULL };
static int LUACALL wxLua_wxJoystickEvent_GetButtonChange(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystickEvent_GetButtonChange[1] = {{ wxLua_wxJoystickEvent_GetButtonChange, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystickEvent_GetButtonChange }};
//     int GetButtonChange() const;
static int LUACALL wxLua_wxJoystickEvent_GetButtonChange(lua_State *L)
{
    // get this
    wxJoystickEvent * self = (wxJoystickEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystickEvent);
    // call GetButtonChange
    int returns = (self->GetButtonChange());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystickEvent_GetButtonState[] = { &wxluatype_wxJoystickEvent, NULL };
static int LUACALL wxLua_wxJoystickEvent_GetButtonState(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystickEvent_GetButtonState[1] = {{ wxLua_wxJoystickEvent_GetButtonState, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystickEvent_GetButtonState }};
//     int GetButtonState() const;
static int LUACALL wxLua_wxJoystickEvent_GetButtonState(lua_State *L)
{
    // get this
    wxJoystickEvent * self = (wxJoystickEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystickEvent);
    // call GetButtonState
    int returns = (self->GetButtonState());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystickEvent_GetJoystick[] = { &wxluatype_wxJoystickEvent, NULL };
static int LUACALL wxLua_wxJoystickEvent_GetJoystick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystickEvent_GetJoystick[1] = {{ wxLua_wxJoystickEvent_GetJoystick, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystickEvent_GetJoystick }};
//     int GetJoystick() const;
static int LUACALL wxLua_wxJoystickEvent_GetJoystick(lua_State *L)
{
    // get this
    wxJoystickEvent * self = (wxJoystickEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystickEvent);
    // call GetJoystick
    int returns = (self->GetJoystick());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystickEvent_GetPosition[] = { &wxluatype_wxJoystickEvent, NULL };
static int LUACALL wxLua_wxJoystickEvent_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystickEvent_GetPosition[1] = {{ wxLua_wxJoystickEvent_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystickEvent_GetPosition }};
//     wxPoint GetPosition() const;
static int LUACALL wxLua_wxJoystickEvent_GetPosition(lua_State *L)
{
    // get this
    wxJoystickEvent * self = (wxJoystickEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystickEvent);
    // call GetPosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPosition());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxPoint);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystickEvent_GetZPosition[] = { &wxluatype_wxJoystickEvent, NULL };
static int LUACALL wxLua_wxJoystickEvent_GetZPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystickEvent_GetZPosition[1] = {{ wxLua_wxJoystickEvent_GetZPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystickEvent_GetZPosition }};
//     int GetZPosition() const;
static int LUACALL wxLua_wxJoystickEvent_GetZPosition(lua_State *L)
{
    // get this
    wxJoystickEvent * self = (wxJoystickEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystickEvent);
    // call GetZPosition
    int returns = (self->GetZPosition());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystickEvent_IsButton[] = { &wxluatype_wxJoystickEvent, NULL };
static int LUACALL wxLua_wxJoystickEvent_IsButton(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystickEvent_IsButton[1] = {{ wxLua_wxJoystickEvent_IsButton, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystickEvent_IsButton }};
//     bool IsButton() const;
static int LUACALL wxLua_wxJoystickEvent_IsButton(lua_State *L)
{
    // get this
    wxJoystickEvent * self = (wxJoystickEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystickEvent);
    // call IsButton
    bool returns = (self->IsButton());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystickEvent_IsMove[] = { &wxluatype_wxJoystickEvent, NULL };
static int LUACALL wxLua_wxJoystickEvent_IsMove(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystickEvent_IsMove[1] = {{ wxLua_wxJoystickEvent_IsMove, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystickEvent_IsMove }};
//     bool IsMove() const;
static int LUACALL wxLua_wxJoystickEvent_IsMove(lua_State *L)
{
    // get this
    wxJoystickEvent * self = (wxJoystickEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystickEvent);
    // call IsMove
    bool returns = (self->IsMove());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystickEvent_IsZMove[] = { &wxluatype_wxJoystickEvent, NULL };
static int LUACALL wxLua_wxJoystickEvent_IsZMove(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystickEvent_IsZMove[1] = {{ wxLua_wxJoystickEvent_IsZMove, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxJoystickEvent_IsZMove }};
//     bool IsZMove() const;
static int LUACALL wxLua_wxJoystickEvent_IsZMove(lua_State *L)
{
    // get this
    wxJoystickEvent * self = (wxJoystickEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxJoystickEvent);
    // call IsZMove
    bool returns = (self->IsZMove());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystickEvent_delete[] = { &wxluatype_wxJoystickEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystickEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxJoystickEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxJoystickEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxJoystickEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxJoystickEvent_constructor[1] = {{ wxLua_wxJoystickEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxJoystickEvent_constructor }};
//     wxJoystickEvent(wxEventType eventType = wxEVT_NULL, int state = 0, int joystick = wxJOYSTICK1, int change = 0);
static int LUACALL wxLua_wxJoystickEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int change = 0
    int change = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 0);
    // int joystick = wxJOYSTICK1
    int joystick = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxJOYSTICK1);
    // int state = 0
    int state = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // wxEventType eventType = wxEVT_NULL
    wxEventType eventType = (argCount >= 1 ? (wxEventType)wxlua_getnumbertype(L, 1) : wxEVT_NULL);
    // call constructor
    wxJoystickEvent* returns = new wxJoystickEvent(eventType, state, joystick, change);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxJoystickEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxJoystickEvent);

    return 1;
}




void wxLua_wxJoystickEvent_delete_function(void** p)
{
    wxJoystickEvent* o = (wxJoystickEvent*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxJoystickEvent_methods[] = {
    { "ButtonDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystickEvent_ButtonDown, 1, NULL },
    { "ButtonIsDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystickEvent_ButtonIsDown, 1, NULL },
    { "ButtonUp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystickEvent_ButtonUp, 1, NULL },
    { "GetButtonChange", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystickEvent_GetButtonChange, 1, NULL },
    { "GetButtonState", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystickEvent_GetButtonState, 1, NULL },
    { "GetJoystick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystickEvent_GetJoystick, 1, NULL },

#if (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK) && (wxLUA_USE_wxPointSizeRect)
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystickEvent_GetPosition, 1, NULL },
#endif // (wxLUA_USE_wxJoystick && wxUSE_JOYSTICK) && (wxLUA_USE_wxPointSizeRect)

    { "GetZPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystickEvent_GetZPosition, 1, NULL },
    { "IsButton", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystickEvent_IsButton, 1, NULL },
    { "IsMove", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystickEvent_IsMove, 1, NULL },
    { "IsZMove", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxJoystickEvent_IsZMove, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxJoystickEvent_delete, 1, NULL },
    { "wxJoystickEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxJoystickEvent_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxJoystickEvent_methodCount = sizeof(wxJoystickEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxJoystick && wxUSE_JOYSTICK


#if (wxCHECK_VERSION(2,6,0) && wxUSE_SOUND) && (wxLUA_USE_wxWave)
// ---------------------------------------------------------------------------
// Bind class wxSound
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSound'
int wxluatype_wxSound = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxSound_Create[] = { &wxluatype_wxSound, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSound_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSound_Create[1] = {{ wxLua_wxSound_Create, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxSound_Create }};
//     bool Create(const wxString& fileName, bool isResource = false);
static int LUACALL wxLua_wxSound_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool isResource = false
    bool isResource = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // const wxString fileName
    const wxString fileName = wxlua_getwxStringtype(L, 2);
    // get this
    wxSound * self = (wxSound *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSound);
    // call Create
    bool returns = (self->Create(fileName, isResource));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSound_IsOk[] = { &wxluatype_wxSound, NULL };
static int LUACALL wxLua_wxSound_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSound_IsOk[1] = {{ wxLua_wxSound_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSound_IsOk }};
//     bool IsOk() const;
static int LUACALL wxLua_wxSound_IsOk(lua_State *L)
{
    // get this
    wxSound * self = (wxSound *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSound);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (!defined(__WXMSW__)) && ((wxCHECK_VERSION(2,6,0) && wxUSE_SOUND) && (wxLUA_USE_wxWave))
static int LUACALL wxLua_wxSound_IsPlaying(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSound_IsPlaying[1] = {{ wxLua_wxSound_IsPlaying, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     !%win static bool IsPlaying() const;
static int LUACALL wxLua_wxSound_IsPlaying(lua_State *L)
{
    // call IsPlaying
    bool returns = (wxSound::IsPlaying());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (!defined(__WXMSW__)) && ((wxCHECK_VERSION(2,6,0) && wxUSE_SOUND) && (wxLUA_USE_wxWave))

static wxLuaArgType s_wxluatypeArray_wxLua_wxSound_Play1[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSound_Play1(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxSound_Play1[1] = {{ wxLua_wxSound_Play1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxSound_Play1 }};
//     static bool Play(const wxString& filename, unsigned flags = wxSOUND_ASYNC);
static int LUACALL wxLua_wxSound_Play1(lua_State *L)
{
    // const wxString filename
    const wxString filename = wxlua_getwxStringtype(L, 1);
    // call Play
    bool returns = (wxSound::Play(filename));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSound_Play[] = { &wxluatype_wxSound, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSound_Play(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxSound_Play[1] = {{ wxLua_wxSound_Play, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxSound_Play }};
//     bool Play(unsigned int flags = wxSOUND_ASYNC) const;
static int LUACALL wxLua_wxSound_Play(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // unsigned int flags = wxSOUND_ASYNC
    unsigned int flags = (argCount >= 2 ? (unsigned int)wxlua_getuintegertype(L, 2) : wxSOUND_ASYNC);
    // get this
    wxSound * self = (wxSound *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSound);
    // call Play
    bool returns = (self->Play(flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static int LUACALL wxLua_wxSound_Stop(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSound_Stop[1] = {{ wxLua_wxSound_Stop, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static void Stop();
static int LUACALL wxLua_wxSound_Stop(lua_State *L)
{
    // call Stop
    wxSound::Stop();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSound_delete[] = { &wxluatype_wxSound, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSound_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxSound_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxSound_constructor1[] = { &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSound_constructor1(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxSound_constructor1[1] = {{ wxLua_wxSound_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxSound_constructor1 }};
//     wxSound(const wxString& fileName, bool isResource = false);
static int LUACALL wxLua_wxSound_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool isResource = false
    bool isResource = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : false);
    // const wxString fileName
    const wxString fileName = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxSound* returns = new wxSound(fileName, isResource);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSound);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSound);

    return 1;
}

static int LUACALL wxLua_wxSound_constructor(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxSound_constructor[1] = {{ wxLua_wxSound_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxSound();
static int LUACALL wxLua_wxSound_constructor(lua_State *L)
{
    // call constructor
    wxSound* returns = new wxSound();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSound);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSound);

    return 1;
}




#if ((wxCHECK_VERSION(2,6,0) && wxUSE_SOUND) && (wxLUA_USE_wxWave))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSound_Play_overload[] =
{
    { wxLua_wxSound_Play1, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 1, 1, s_wxluatypeArray_wxLua_wxSound_Play1 },
    { wxLua_wxSound_Play, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxSound_Play },
};
static int s_wxluafunc_wxLua_wxSound_Play_overload_count = sizeof(s_wxluafunc_wxLua_wxSound_Play_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSound_constructor_overload[] =
{
    { wxLua_wxSound_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxSound_constructor1 },
    { wxLua_wxSound_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxSound_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxSound_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxCHECK_VERSION(2,6,0) && wxUSE_SOUND) && (wxLUA_USE_wxWave))

void wxLua_wxSound_delete_function(void** p)
{
    wxSound* o = (wxSound*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSound_methods[] = {
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSound_Create, 1, NULL },
    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSound_IsOk, 1, NULL },

#if (!defined(__WXMSW__)) && ((wxCHECK_VERSION(2,6,0) && wxUSE_SOUND) && (wxLUA_USE_wxWave))
    { "IsPlaying", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSound_IsPlaying, 1, NULL },
#endif // (!defined(__WXMSW__)) && ((wxCHECK_VERSION(2,6,0) && wxUSE_SOUND) && (wxLUA_USE_wxWave))

#if ((wxCHECK_VERSION(2,6,0) && wxUSE_SOUND) && (wxLUA_USE_wxWave))
    { "Play", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSound_Play_overload, s_wxluafunc_wxLua_wxSound_Play_overload_count, 0 },
#endif // ((wxCHECK_VERSION(2,6,0) && wxUSE_SOUND) && (wxLUA_USE_wxWave))

    { "Stop", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxSound_Stop, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxSound_delete, 1, NULL },

#if ((wxCHECK_VERSION(2,6,0) && wxUSE_SOUND) && (wxLUA_USE_wxWave))
    { "wxSound", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxSound_constructor_overload, s_wxluafunc_wxLua_wxSound_constructor_overload_count, 0 },
#endif // ((wxCHECK_VERSION(2,6,0) && wxUSE_SOUND) && (wxLUA_USE_wxWave))

    { 0, 0, 0, 0 },
};

int wxSound_methodCount = sizeof(wxSound_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxCHECK_VERSION(2,6,0) && wxUSE_SOUND) && (wxLUA_USE_wxWave)


#if (defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave)
// ---------------------------------------------------------------------------
// Bind class wxWave
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxWave'
int wxluatype_wxWave = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxWave_Create[] = { &wxluatype_wxWave, &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxWave_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWave_Create[1] = {{ wxLua_wxWave_Create, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxWave_Create }};
//     bool Create(const wxString& fileName, bool isResource = false);
static int LUACALL wxLua_wxWave_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool isResource = false
    bool isResource = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // const wxString fileName
    const wxString fileName = wxlua_getwxStringtype(L, 2);
    // get this
    wxWave * self = (wxWave *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWave);
    // call Create
    bool returns = (self->Create(fileName, isResource));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxWave_IsOk[] = { &wxluatype_wxWave, NULL };
static int LUACALL wxLua_wxWave_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWave_IsOk[1] = {{ wxLua_wxWave_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxWave_IsOk }};
//     bool IsOk() const;
static int LUACALL wxLua_wxWave_IsOk(lua_State *L)
{
    // get this
    wxWave * self = (wxWave *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWave);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave)) && (wxCHECK_VERSION(2,6,0))
static wxLuaArgType s_wxluatypeArray_wxLua_wxWave_Play1[] = { &wxluatype_wxWave, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxWave_Play1(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxWave_Play1[1] = {{ wxLua_wxWave_Play1, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxWave_Play1 }};
//     %wxchkver_2_6 bool Play(unsigned int flags = wxSOUND_ASYNC) const;
static int LUACALL wxLua_wxWave_Play1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // unsigned int flags = wxSOUND_ASYNC
    unsigned int flags = (argCount >= 2 ? (unsigned int)wxlua_getuintegertype(L, 2) : wxSOUND_ASYNC);
    // get this
    wxWave * self = (wxWave *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWave);
    // call Play
    bool returns = (self->Play(flags));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave)) && (wxCHECK_VERSION(2,6,0))

#if (!wxCHECK_VERSION(2,6,0)) && ((defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave))
static wxLuaArgType s_wxluatypeArray_wxLua_wxWave_Play[] = { &wxluatype_wxWave, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxWave_Play(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxWave_Play[1] = {{ wxLua_wxWave_Play, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxWave_Play }};
//     !%wxchkver_2_6 bool Play(bool async = true, bool looped = false) const;
static int LUACALL wxLua_wxWave_Play(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool looped = false
    bool looped = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // bool async = true
    bool async = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxWave * self = (wxWave *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWave);
    // call Play
    bool returns = (self->Play(async, looped));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (!wxCHECK_VERSION(2,6,0)) && ((defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave))

static wxLuaArgType s_wxluatypeArray_wxLua_wxWave_delete[] = { &wxluatype_wxWave, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWave_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxWave_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxWave_constructor1[] = { &wxluatype_TSTRING, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxWave_constructor1(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxWave_constructor1[1] = {{ wxLua_wxWave_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxWave_constructor1 }};
//     wxWave(const wxString& fileName, bool isResource = false);
static int LUACALL wxLua_wxWave_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool isResource = false
    bool isResource = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : false);
    // const wxString fileName
    const wxString fileName = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxWave* returns = new wxWave(fileName, isResource);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxWave);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWave);

    return 1;
}

static int LUACALL wxLua_wxWave_constructor(lua_State *L);
// // // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxWave_constructor[1] = {{ wxLua_wxWave_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxWave();
static int LUACALL wxLua_wxWave_constructor(lua_State *L)
{
    // call constructor
    wxWave* returns = new wxWave();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxWave);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWave);

    return 1;
}




#if (((defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave)) && (wxCHECK_VERSION(2,6,0)))||((!wxCHECK_VERSION(2,6,0)) && ((defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave)))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWave_Play_overload[] =
{

#if ((defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave)) && (wxCHECK_VERSION(2,6,0))
    { wxLua_wxWave_Play1, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxWave_Play1 },
#endif // ((defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave)) && (wxCHECK_VERSION(2,6,0))

#if (!wxCHECK_VERSION(2,6,0)) && ((defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave))
    { wxLua_wxWave_Play, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxWave_Play },
#endif // (!wxCHECK_VERSION(2,6,0)) && ((defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave))
};
static int s_wxluafunc_wxLua_wxWave_Play_overload_count = sizeof(s_wxluafunc_wxLua_wxWave_Play_overload)/sizeof(wxLuaBindCFunc);

#endif // (((defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave)) && (wxCHECK_VERSION(2,6,0)))||((!wxCHECK_VERSION(2,6,0)) && ((defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave)))

#if ((defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxWave_constructor_overload[] =
{
    { wxLua_wxWave_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxWave_constructor1 },
    { wxLua_wxWave_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxWave_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxWave_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave))

void wxLua_wxWave_delete_function(void** p)
{
    wxWave* o = (wxWave*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxWave_methods[] = {
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWave_Create, 1, NULL },
    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWave_IsOk, 1, NULL },

#if (((defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave)) && (wxCHECK_VERSION(2,6,0)))||((!wxCHECK_VERSION(2,6,0)) && ((defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave)))
    { "Play", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxWave_Play_overload, s_wxluafunc_wxLua_wxWave_Play_overload_count, 0 },
#endif // (((defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave)) && (wxCHECK_VERSION(2,6,0)))||((!wxCHECK_VERSION(2,6,0)) && ((defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave)))

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxWave_delete, 1, NULL },

#if ((defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave))
    { "wxWave", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxWave_constructor_overload, s_wxluafunc_wxLua_wxWave_constructor_overload_count, 0 },
#endif // ((defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave))

    { 0, 0, 0, 0 },
};

int wxWave_methodCount = sizeof(wxWave_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave)



// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxadv_dataview.cpp was generated by genwxbind.lua
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------



#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewItem
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewItem'
int wxluatype_wxDataViewItem = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItem_GetID[] = { &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewItem_GetID(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItem_GetID[1] = {{ wxLua_wxDataViewItem_GetID, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItem_GetID }};
// 	void* 	GetID() const;
static int LUACALL wxLua_wxDataViewItem_GetID(lua_State *L)
{
    // get this
    wxDataViewItem * self = (wxDataViewItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItem);
    // call GetID
    void* returns = (void*)self->GetID();
    // push the result pointer
    lua_pushlightuserdata(L, (void *)returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItem_IsOk[] = { &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewItem_IsOk(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItem_IsOk[1] = {{ wxLua_wxDataViewItem_IsOk, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItem_IsOk }};
// 	bool 	IsOk() const;
static int LUACALL wxLua_wxDataViewItem_IsOk(lua_State *L)
{
    // get this
    wxDataViewItem * self = (wxDataViewItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItem);
    // call IsOk
    bool returns = (self->IsOk());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItem_delete[] = { &wxluatype_wxDataViewItem, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItem_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItem_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItem_constructor2[] = { &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxDataViewItem_constructor2(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItem_constructor2[1] = {{ wxLua_wxDataViewItem_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItem_constructor2 }};
// 	wxDataViewItem(void *id);
static int LUACALL wxLua_wxDataViewItem_constructor2(lua_State *L)
{
    // void id
    void * id = (void *)wxlua_touserdata(L, 1);
    // call constructor
    wxDataViewItem* returns = new wxDataViewItem(id);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItem);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItem_constructor1[] = { &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewItem_constructor1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItem_constructor1[1] = {{ wxLua_wxDataViewItem_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItem_constructor1 }};
// 	wxDataViewItem(const wxDataViewItem &item);
static int LUACALL wxLua_wxDataViewItem_constructor1(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItem);
    // call constructor
    wxDataViewItem* returns = new wxDataViewItem(*item);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItem);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItem);

    return 1;
}

static int LUACALL wxLua_wxDataViewItem_constructor(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItem_constructor[1] = {{ wxLua_wxDataViewItem_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxDataViewItem();
static int LUACALL wxLua_wxDataViewItem_constructor(lua_State *L)
{
    // call constructor
    wxDataViewItem* returns = new wxDataViewItem();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItem);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItem);

    return 1;
}




#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItem_constructor_overload[] =
{
    { wxLua_wxDataViewItem_constructor2, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItem_constructor2 },
    { wxLua_wxDataViewItem_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItem_constructor1 },
    { wxLua_wxDataViewItem_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxDataViewItem_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewItem_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

void wxLua_wxDataViewItem_delete_function(void** p)
{
    wxDataViewItem* o = (wxDataViewItem*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewItem_methods[] = {
    { "GetID", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItem_GetID, 1, NULL },
    { "IsOk", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItem_IsOk, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDataViewItem_delete, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
    { "wxDataViewItem", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewItem_constructor_overload, s_wxluafunc_wxLua_wxDataViewItem_constructor_overload_count, 0 },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

    { 0, 0, 0, 0 },
};

int wxDataViewItem_methodCount = sizeof(wxDataViewItem_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewItemArray
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewItemArray'
int wxluatype_wxDataViewItemArray = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemArray_Add[] = { &wxluatype_wxDataViewItemArray, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewItemArray_Add(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemArray_Add[1] = {{ wxLua_wxDataViewItemArray_Add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewItemArray_Add }};
//     void Add(wxDataViewItem num);
static int LUACALL wxLua_wxDataViewItemArray_Add(lua_State *L)
{
    // wxDataViewItem num
    wxDataViewItem num = *(wxDataViewItem*)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewItemArray * self = (wxDataViewItemArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemArray);
    // call Add
    self->Add(num);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemArray_Alloc[] = { &wxluatype_wxDataViewItemArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewItemArray_Alloc(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemArray_Alloc[1] = {{ wxLua_wxDataViewItemArray_Alloc, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewItemArray_Alloc }};
//     void Alloc(size_t count);
static int LUACALL wxLua_wxDataViewItemArray_Alloc(lua_State *L)
{
    // size_t count
    size_t count = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewItemArray * self = (wxDataViewItemArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemArray);
    // call Alloc
    self->Alloc(count);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemArray_Clear[] = { &wxluatype_wxDataViewItemArray, NULL };
static int LUACALL wxLua_wxDataViewItemArray_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemArray_Clear[1] = {{ wxLua_wxDataViewItemArray_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItemArray_Clear }};
//     void Clear();
static int LUACALL wxLua_wxDataViewItemArray_Clear(lua_State *L)
{
    // get this
    wxDataViewItemArray * self = (wxDataViewItemArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemArray);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemArray_Empty[] = { &wxluatype_wxDataViewItemArray, NULL };
static int LUACALL wxLua_wxDataViewItemArray_Empty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemArray_Empty[1] = {{ wxLua_wxDataViewItemArray_Empty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItemArray_Empty }};
//     void Empty();
static int LUACALL wxLua_wxDataViewItemArray_Empty(lua_State *L)
{
    // get this
    wxDataViewItemArray * self = (wxDataViewItemArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemArray);
    // call Empty
    self->Empty();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemArray_GetCount[] = { &wxluatype_wxDataViewItemArray, NULL };
static int LUACALL wxLua_wxDataViewItemArray_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemArray_GetCount[1] = {{ wxLua_wxDataViewItemArray_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItemArray_GetCount }};
//     int  GetCount() const;
static int LUACALL wxLua_wxDataViewItemArray_GetCount(lua_State *L)
{
    // get this
    wxDataViewItemArray * self = (wxDataViewItemArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemArray);
    // call GetCount
    int returns = (self->GetCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemArray_Index[] = { &wxluatype_wxDataViewItemArray, &wxluatype_wxDataViewItem, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxDataViewItemArray_Index(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemArray_Index[1] = {{ wxLua_wxDataViewItemArray_Index, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxDataViewItemArray_Index }};
//     int  Index(wxDataViewItem n, bool searchFromEnd = false);
static int LUACALL wxLua_wxDataViewItemArray_Index(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool searchFromEnd = false
    bool searchFromEnd = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // wxDataViewItem n
    wxDataViewItem n = *(wxDataViewItem*)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewItemArray * self = (wxDataViewItemArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemArray);
    // call Index
    int returns = (self->Index(n, searchFromEnd));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemArray_Insert[] = { &wxluatype_wxDataViewItemArray, &wxluatype_wxDataViewItem, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewItemArray_Insert(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemArray_Insert[1] = {{ wxLua_wxDataViewItemArray_Insert, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxDataViewItemArray_Insert }};
//     void Insert(wxDataViewItem num, int n, int copies = 1);
static int LUACALL wxLua_wxDataViewItemArray_Insert(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int copies = 1
    int copies = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 1);
    // int n
    int n = (int)wxlua_getnumbertype(L, 3);
    // wxDataViewItem num
    wxDataViewItem num = *(wxDataViewItem*)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewItemArray * self = (wxDataViewItemArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemArray);
    // call Insert
    self->Insert(num, n, copies);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemArray_IsEmpty[] = { &wxluatype_wxDataViewItemArray, NULL };
static int LUACALL wxLua_wxDataViewItemArray_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemArray_IsEmpty[1] = {{ wxLua_wxDataViewItemArray_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItemArray_IsEmpty }};
//     bool IsEmpty() const;
static int LUACALL wxLua_wxDataViewItemArray_IsEmpty(lua_State *L)
{
    // get this
    wxDataViewItemArray * self = (wxDataViewItemArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemArray);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemArray_Item[] = { &wxluatype_wxDataViewItemArray, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewItemArray_Item(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemArray_Item[1] = {{ wxLua_wxDataViewItemArray_Item, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewItemArray_Item }};
//     wxDataViewItem Item(int n);
static int LUACALL wxLua_wxDataViewItemArray_Item(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDataViewItemArray * self = (wxDataViewItemArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemArray);
    // call Item
    // allocate a new object using the copy constructor
    wxDataViewItem* returns = new wxDataViewItem(self->Item(n));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItem);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemArray_Remove[] = { &wxluatype_wxDataViewItemArray, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewItemArray_Remove(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemArray_Remove[1] = {{ wxLua_wxDataViewItemArray_Remove, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewItemArray_Remove }};
//     void Remove(wxDataViewItem n);
static int LUACALL wxLua_wxDataViewItemArray_Remove(lua_State *L)
{
    // wxDataViewItem n
    wxDataViewItem n = *(wxDataViewItem*)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewItemArray * self = (wxDataViewItemArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemArray);
    // call Remove
    self->Remove(n);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemArray_RemoveAt[] = { &wxluatype_wxDataViewItemArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewItemArray_RemoveAt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemArray_RemoveAt[1] = {{ wxLua_wxDataViewItemArray_RemoveAt, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewItemArray_RemoveAt }};
//     void RemoveAt(size_t index);
static int LUACALL wxLua_wxDataViewItemArray_RemoveAt(lua_State *L)
{
    // size_t index
    size_t index = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewItemArray * self = (wxDataViewItemArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemArray);
    // call RemoveAt
    self->RemoveAt(index);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemArray_Shrink[] = { &wxluatype_wxDataViewItemArray, NULL };
static int LUACALL wxLua_wxDataViewItemArray_Shrink(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemArray_Shrink[1] = {{ wxLua_wxDataViewItemArray_Shrink, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItemArray_Shrink }};
//     void Shrink();
static int LUACALL wxLua_wxDataViewItemArray_Shrink(lua_State *L)
{
    // get this
    wxDataViewItemArray * self = (wxDataViewItemArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemArray);
    // call Shrink
    self->Shrink();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemArray_delete[] = { &wxluatype_wxDataViewItemArray, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemArray_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItemArray_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemArray_op_index[] = { &wxluatype_wxDataViewItemArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewItemArray_op_index(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemArray_op_index[1] = {{ wxLua_wxDataViewItemArray_op_index, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewItemArray_op_index }};
//     wxDataViewItem operator[](size_t nIndex);
static int LUACALL wxLua_wxDataViewItemArray_op_index(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewItemArray * self = (wxDataViewItemArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemArray);
    // call op_index
    // allocate a new object using the copy constructor
    wxDataViewItem* returns = new wxDataViewItem((*self)[(nIndex)]);
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItem);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemArray_constructor1[] = { &wxluatype_wxDataViewItemArray, NULL };
static int LUACALL wxLua_wxDataViewItemArray_constructor1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemArray_constructor1[1] = {{ wxLua_wxDataViewItemArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItemArray_constructor1 }};
//     wxDataViewItemArray(const wxDataViewItemArray& array);
static int LUACALL wxLua_wxDataViewItemArray_constructor1(lua_State *L)
{
    // const wxDataViewItemArray array
    const wxDataViewItemArray * array = (const wxDataViewItemArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemArray);
    // call constructor
    wxDataViewItemArray* returns = new wxDataViewItemArray(*array);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItemArray);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItemArray);

    return 1;
}

static int LUACALL wxLua_wxDataViewItemArray_constructor(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemArray_constructor[1] = {{ wxLua_wxDataViewItemArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxDataViewItemArray();
static int LUACALL wxLua_wxDataViewItemArray_constructor(lua_State *L)
{
    // call constructor
    wxDataViewItemArray* returns = new wxDataViewItemArray();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItemArray);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItemArray);

    return 1;
}




#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemArray_constructor_overload[] =
{
    { wxLua_wxDataViewItemArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItemArray_constructor1 },
    { wxLua_wxDataViewItemArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxDataViewItemArray_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewItemArray_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

void wxLua_wxDataViewItemArray_delete_function(void** p)
{
    wxDataViewItemArray* o = (wxDataViewItemArray*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewItemArray_methods[] = {
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemArray_Add, 1, NULL },
    { "Alloc", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemArray_Alloc, 1, NULL },
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemArray_Clear, 1, NULL },
    { "Empty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemArray_Empty, 1, NULL },
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemArray_GetCount, 1, NULL },
    { "Index", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemArray_Index, 1, NULL },
    { "Insert", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemArray_Insert, 1, NULL },
    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemArray_IsEmpty, 1, NULL },
    { "Item", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemArray_Item, 1, NULL },
    { "Remove", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemArray_Remove, 1, NULL },
    { "RemoveAt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemArray_RemoveAt, 1, NULL },
    { "Shrink", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemArray_Shrink, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDataViewItemArray_delete, 1, NULL },
    { "op_index", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemArray_op_index, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
    { "wxDataViewItemArray", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewItemArray_constructor_overload, s_wxluafunc_wxLua_wxDataViewItemArray_constructor_overload_count, 0 },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

    { 0, 0, 0, 0 },
};

int wxDataViewItemArray_methodCount = sizeof(wxDataViewItemArray_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewModelNotifier
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewModelNotifier'
int wxluatype_wxDataViewModelNotifier = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModelNotifier_AfterReset[] = { &wxluatype_wxDataViewModelNotifier, NULL };
static int LUACALL wxLua_wxDataViewModelNotifier_AfterReset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModelNotifier_AfterReset[1] = {{ wxLua_wxDataViewModelNotifier_AfterReset, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewModelNotifier_AfterReset }};
//     virtual bool AfterReset();
static int LUACALL wxLua_wxDataViewModelNotifier_AfterReset(lua_State *L)
{
    // get this
    wxDataViewModelNotifier * self = (wxDataViewModelNotifier *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModelNotifier);
    // call AfterReset
    bool returns = (self->AfterReset());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModelNotifier_BeforeReset[] = { &wxluatype_wxDataViewModelNotifier, NULL };
static int LUACALL wxLua_wxDataViewModelNotifier_BeforeReset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModelNotifier_BeforeReset[1] = {{ wxLua_wxDataViewModelNotifier_BeforeReset, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewModelNotifier_BeforeReset }};
//     virtual bool BeforeReset();
static int LUACALL wxLua_wxDataViewModelNotifier_BeforeReset(lua_State *L)
{
    // get this
    wxDataViewModelNotifier * self = (wxDataViewModelNotifier *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModelNotifier);
    // call BeforeReset
    bool returns = (self->BeforeReset());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModelNotifier_Cleared[] = { &wxluatype_wxDataViewModelNotifier, NULL };
static int LUACALL wxLua_wxDataViewModelNotifier_Cleared(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModelNotifier_Cleared[1] = {{ wxLua_wxDataViewModelNotifier_Cleared, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewModelNotifier_Cleared }};
//     virtual bool Cleared() = 0;
static int LUACALL wxLua_wxDataViewModelNotifier_Cleared(lua_State *L)
{
    // get this
    wxDataViewModelNotifier * self = (wxDataViewModelNotifier *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModelNotifier);
    // call Cleared
    bool returns = (self->Cleared());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModelNotifier_GetOwner[] = { &wxluatype_wxDataViewModelNotifier, NULL };
static int LUACALL wxLua_wxDataViewModelNotifier_GetOwner(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModelNotifier_GetOwner[1] = {{ wxLua_wxDataViewModelNotifier_GetOwner, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewModelNotifier_GetOwner }};
//     wxDataViewModel *GetOwner() const;
static int LUACALL wxLua_wxDataViewModelNotifier_GetOwner(lua_State *L)
{
    // get this
    wxDataViewModelNotifier * self = (wxDataViewModelNotifier *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModelNotifier);
    // call GetOwner
    wxDataViewModel* returns = (wxDataViewModel*)self->GetOwner();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewModel);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModelNotifier_ItemAdded[] = { &wxluatype_wxDataViewModelNotifier, &wxluatype_wxDataViewItem, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewModelNotifier_ItemAdded(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModelNotifier_ItemAdded[1] = {{ wxLua_wxDataViewModelNotifier_ItemAdded, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewModelNotifier_ItemAdded }};
//     virtual bool ItemAdded( const wxDataViewItem &parent, const wxDataViewItem &item ) = 0;
static int LUACALL wxLua_wxDataViewModelNotifier_ItemAdded(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewItem);
    // const wxDataViewItem parent
    const wxDataViewItem * parent = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewModelNotifier * self = (wxDataViewModelNotifier *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModelNotifier);
    // call ItemAdded
    bool returns = (self->ItemAdded(*parent, *item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModelNotifier_ItemChanged[] = { &wxluatype_wxDataViewModelNotifier, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewModelNotifier_ItemChanged(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModelNotifier_ItemChanged[1] = {{ wxLua_wxDataViewModelNotifier_ItemChanged, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewModelNotifier_ItemChanged }};
//     virtual bool ItemChanged( const wxDataViewItem &item ) = 0;
static int LUACALL wxLua_wxDataViewModelNotifier_ItemChanged(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewModelNotifier * self = (wxDataViewModelNotifier *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModelNotifier);
    // call ItemChanged
    bool returns = (self->ItemChanged(*item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModelNotifier_ItemDeleted[] = { &wxluatype_wxDataViewModelNotifier, &wxluatype_wxDataViewItem, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewModelNotifier_ItemDeleted(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModelNotifier_ItemDeleted[1] = {{ wxLua_wxDataViewModelNotifier_ItemDeleted, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewModelNotifier_ItemDeleted }};
//     virtual bool ItemDeleted( const wxDataViewItem &parent, const wxDataViewItem &item ) = 0;
static int LUACALL wxLua_wxDataViewModelNotifier_ItemDeleted(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewItem);
    // const wxDataViewItem parent
    const wxDataViewItem * parent = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewModelNotifier * self = (wxDataViewModelNotifier *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModelNotifier);
    // call ItemDeleted
    bool returns = (self->ItemDeleted(*parent, *item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModelNotifier_ItemsAdded[] = { &wxluatype_wxDataViewModelNotifier, &wxluatype_wxDataViewItem, &wxluatype_wxDataViewItemArray, NULL };
static int LUACALL wxLua_wxDataViewModelNotifier_ItemsAdded(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModelNotifier_ItemsAdded[1] = {{ wxLua_wxDataViewModelNotifier_ItemsAdded, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewModelNotifier_ItemsAdded }};
//     virtual bool ItemsAdded( const wxDataViewItem &parent, const wxDataViewItemArray &items );
static int LUACALL wxLua_wxDataViewModelNotifier_ItemsAdded(lua_State *L)
{
    // const wxDataViewItemArray items
    const wxDataViewItemArray * items = (const wxDataViewItemArray *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewItemArray);
    // const wxDataViewItem parent
    const wxDataViewItem * parent = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewModelNotifier * self = (wxDataViewModelNotifier *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModelNotifier);
    // call ItemsAdded
    bool returns = (self->ItemsAdded(*parent, *items));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModelNotifier_ItemsChanged[] = { &wxluatype_wxDataViewModelNotifier, &wxluatype_wxDataViewItemArray, NULL };
static int LUACALL wxLua_wxDataViewModelNotifier_ItemsChanged(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModelNotifier_ItemsChanged[1] = {{ wxLua_wxDataViewModelNotifier_ItemsChanged, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewModelNotifier_ItemsChanged }};
//     virtual bool ItemsChanged( const wxDataViewItemArray &items );
static int LUACALL wxLua_wxDataViewModelNotifier_ItemsChanged(lua_State *L)
{
    // const wxDataViewItemArray items
    const wxDataViewItemArray * items = (const wxDataViewItemArray *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItemArray);
    // get this
    wxDataViewModelNotifier * self = (wxDataViewModelNotifier *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModelNotifier);
    // call ItemsChanged
    bool returns = (self->ItemsChanged(*items));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModelNotifier_ItemsDeleted[] = { &wxluatype_wxDataViewModelNotifier, &wxluatype_wxDataViewItem, &wxluatype_wxDataViewItemArray, NULL };
static int LUACALL wxLua_wxDataViewModelNotifier_ItemsDeleted(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModelNotifier_ItemsDeleted[1] = {{ wxLua_wxDataViewModelNotifier_ItemsDeleted, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewModelNotifier_ItemsDeleted }};
//     virtual bool ItemsDeleted( const wxDataViewItem &parent, const wxDataViewItemArray &items );
static int LUACALL wxLua_wxDataViewModelNotifier_ItemsDeleted(lua_State *L)
{
    // const wxDataViewItemArray items
    const wxDataViewItemArray * items = (const wxDataViewItemArray *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewItemArray);
    // const wxDataViewItem parent
    const wxDataViewItem * parent = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewModelNotifier * self = (wxDataViewModelNotifier *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModelNotifier);
    // call ItemsDeleted
    bool returns = (self->ItemsDeleted(*parent, *items));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModelNotifier_Resort[] = { &wxluatype_wxDataViewModelNotifier, NULL };
static int LUACALL wxLua_wxDataViewModelNotifier_Resort(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModelNotifier_Resort[1] = {{ wxLua_wxDataViewModelNotifier_Resort, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewModelNotifier_Resort }};
//     virtual void Resort() = 0;
static int LUACALL wxLua_wxDataViewModelNotifier_Resort(lua_State *L)
{
    // get this
    wxDataViewModelNotifier * self = (wxDataViewModelNotifier *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModelNotifier);
    // call Resort
    self->Resort();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModelNotifier_SetOwner[] = { &wxluatype_wxDataViewModelNotifier, &wxluatype_wxDataViewModel, NULL };
static int LUACALL wxLua_wxDataViewModelNotifier_SetOwner(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModelNotifier_SetOwner[1] = {{ wxLua_wxDataViewModelNotifier_SetOwner, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewModelNotifier_SetOwner }};
//     void SetOwner(wxDataViewModel *owner) %ungc_this;	// NOTE: valid owner must be presented
static int LUACALL wxLua_wxDataViewModelNotifier_SetOwner(lua_State *L)
{
    // wxDataViewModel owner
    wxDataViewModel * owner = (wxDataViewModel *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewModel);
    // get this
    wxDataViewModelNotifier * self = (wxDataViewModelNotifier *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModelNotifier);
    // call SetOwner
    self->SetOwner(owner);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModelNotifier_ValueChanged[] = { &wxluatype_wxDataViewModelNotifier, &wxluatype_wxDataViewItem, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewModelNotifier_ValueChanged(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModelNotifier_ValueChanged[1] = {{ wxLua_wxDataViewModelNotifier_ValueChanged, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewModelNotifier_ValueChanged }};
//     virtual bool ValueChanged( const wxDataViewItem &item, unsigned int col ) = 0;
static int LUACALL wxLua_wxDataViewModelNotifier_ValueChanged(lua_State *L)
{
    // unsigned int col
    unsigned int col = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewModelNotifier * self = (wxDataViewModelNotifier *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModelNotifier);
    // call ValueChanged
    bool returns = (self->ValueChanged(*item, col));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModelNotifier_delete[] = { &wxluatype_wxDataViewModelNotifier, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModelNotifier_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDataViewModelNotifier_delete }};




void wxLua_wxDataViewModelNotifier_delete_function(void** p)
{
    wxDataViewModelNotifier* o = (wxDataViewModelNotifier*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewModelNotifier_methods[] = {
    { "AfterReset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModelNotifier_AfterReset, 1, NULL },
    { "BeforeReset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModelNotifier_BeforeReset, 1, NULL },
    { "Cleared", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModelNotifier_Cleared, 1, NULL },
    { "GetOwner", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModelNotifier_GetOwner, 1, NULL },
    { "ItemAdded", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModelNotifier_ItemAdded, 1, NULL },
    { "ItemChanged", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModelNotifier_ItemChanged, 1, NULL },
    { "ItemDeleted", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModelNotifier_ItemDeleted, 1, NULL },
    { "ItemsAdded", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModelNotifier_ItemsAdded, 1, NULL },
    { "ItemsChanged", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModelNotifier_ItemsChanged, 1, NULL },
    { "ItemsDeleted", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModelNotifier_ItemsDeleted, 1, NULL },
    { "Resort", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModelNotifier_Resort, 1, NULL },
    { "SetOwner", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModelNotifier_SetOwner, 1, NULL },
    { "ValueChanged", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModelNotifier_ValueChanged, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDataViewModelNotifier_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDataViewModelNotifier_methodCount = sizeof(wxDataViewModelNotifier_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewItemAttr
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewItemAttr'
int wxluatype_wxDataViewItemAttr = WXLUA_TUNKNOWN;

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemAttr_GetBackgroundColour[] = { &wxluatype_wxDataViewItemAttr, NULL };
static int LUACALL wxLua_wxDataViewItemAttr_GetBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemAttr_GetBackgroundColour[1] = {{ wxLua_wxDataViewItemAttr_GetBackgroundColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItemAttr_GetBackgroundColour }};
//     const wxColour& GetBackgroundColour();
static int LUACALL wxLua_wxDataViewItemAttr_GetBackgroundColour(lua_State *L)
{
    // get this
    wxDataViewItemAttr * self = (wxDataViewItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemAttr);
    // call GetBackgroundColour
    const wxColour* returns = (const wxColour*)&self->GetBackgroundColour();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemAttr_GetBold[] = { &wxluatype_wxDataViewItemAttr, NULL };
static int LUACALL wxLua_wxDataViewItemAttr_GetBold(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemAttr_GetBold[1] = {{ wxLua_wxDataViewItemAttr_GetBold, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItemAttr_GetBold }};
//     bool GetBold() const;
static int LUACALL wxLua_wxDataViewItemAttr_GetBold(lua_State *L)
{
    // get this
    wxDataViewItemAttr * self = (wxDataViewItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemAttr);
    // call GetBold
    bool returns = (self->GetBold());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemAttr_GetColour[] = { &wxluatype_wxDataViewItemAttr, NULL };
static int LUACALL wxLua_wxDataViewItemAttr_GetColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemAttr_GetColour[1] = {{ wxLua_wxDataViewItemAttr_GetColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItemAttr_GetColour }};
//     const wxColour& GetColour() const;
static int LUACALL wxLua_wxDataViewItemAttr_GetColour(lua_State *L)
{
    // get this
    wxDataViewItemAttr * self = (wxDataViewItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemAttr);
    // call GetColour
    const wxColour* returns = (const wxColour*)&self->GetColour();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxColourPenBrush)

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxFont)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemAttr_GetEffectiveFont[] = { &wxluatype_wxDataViewItemAttr, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxDataViewItemAttr_GetEffectiveFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemAttr_GetEffectiveFont[1] = {{ wxLua_wxDataViewItemAttr_GetEffectiveFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewItemAttr_GetEffectiveFont }};
//     wxFont GetEffectiveFont(const wxFont& font) const;
static int LUACALL wxLua_wxDataViewItemAttr_GetEffectiveFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxDataViewItemAttr * self = (wxDataViewItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemAttr);
    // call GetEffectiveFont
    // allocate a new object using the copy constructor
    wxFont* returns = new wxFont(self->GetEffectiveFont(*font));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxFont);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxFont)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemAttr_GetItalic[] = { &wxluatype_wxDataViewItemAttr, NULL };
static int LUACALL wxLua_wxDataViewItemAttr_GetItalic(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemAttr_GetItalic[1] = {{ wxLua_wxDataViewItemAttr_GetItalic, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItemAttr_GetItalic }};
//     bool GetItalic() const;
static int LUACALL wxLua_wxDataViewItemAttr_GetItalic(lua_State *L)
{
    // get this
    wxDataViewItemAttr * self = (wxDataViewItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemAttr);
    // call GetItalic
    bool returns = (self->GetItalic());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemAttr_GetStrikethrough[] = { &wxluatype_wxDataViewItemAttr, NULL };
static int LUACALL wxLua_wxDataViewItemAttr_GetStrikethrough(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemAttr_GetStrikethrough[1] = {{ wxLua_wxDataViewItemAttr_GetStrikethrough, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItemAttr_GetStrikethrough }};
//     bool GetStrikethrough() const;
static int LUACALL wxLua_wxDataViewItemAttr_GetStrikethrough(lua_State *L)
{
    // get this
    wxDataViewItemAttr * self = (wxDataViewItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemAttr);
    // call GetStrikethrough
    bool returns = (self->GetStrikethrough());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemAttr_HasBackgroundColour[] = { &wxluatype_wxDataViewItemAttr, NULL };
static int LUACALL wxLua_wxDataViewItemAttr_HasBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemAttr_HasBackgroundColour[1] = {{ wxLua_wxDataViewItemAttr_HasBackgroundColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItemAttr_HasBackgroundColour }};
//     bool HasBackgroundColour() const;
static int LUACALL wxLua_wxDataViewItemAttr_HasBackgroundColour(lua_State *L)
{
    // get this
    wxDataViewItemAttr * self = (wxDataViewItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemAttr);
    // call HasBackgroundColour
    bool returns = (self->HasBackgroundColour());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemAttr_HasColour[] = { &wxluatype_wxDataViewItemAttr, NULL };
static int LUACALL wxLua_wxDataViewItemAttr_HasColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemAttr_HasColour[1] = {{ wxLua_wxDataViewItemAttr_HasColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItemAttr_HasColour }};
//     bool HasColour() const;
static int LUACALL wxLua_wxDataViewItemAttr_HasColour(lua_State *L)
{
    // get this
    wxDataViewItemAttr * self = (wxDataViewItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemAttr);
    // call HasColour
    bool returns = (self->HasColour());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemAttr_HasFont[] = { &wxluatype_wxDataViewItemAttr, NULL };
static int LUACALL wxLua_wxDataViewItemAttr_HasFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemAttr_HasFont[1] = {{ wxLua_wxDataViewItemAttr_HasFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItemAttr_HasFont }};
//     bool HasFont() const;
static int LUACALL wxLua_wxDataViewItemAttr_HasFont(lua_State *L)
{
    // get this
    wxDataViewItemAttr * self = (wxDataViewItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemAttr);
    // call HasFont
    bool returns = (self->HasFont());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemAttr_IsDefault[] = { &wxluatype_wxDataViewItemAttr, NULL };
static int LUACALL wxLua_wxDataViewItemAttr_IsDefault(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemAttr_IsDefault[1] = {{ wxLua_wxDataViewItemAttr_IsDefault, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItemAttr_IsDefault }};
//     bool IsDefault() const;
static int LUACALL wxLua_wxDataViewItemAttr_IsDefault(lua_State *L)
{
    // get this
    wxDataViewItemAttr * self = (wxDataViewItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemAttr);
    // call IsDefault
    bool returns = (self->IsDefault());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemAttr_SetBackgroundColour[] = { &wxluatype_wxDataViewItemAttr, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxDataViewItemAttr_SetBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemAttr_SetBackgroundColour[1] = {{ wxLua_wxDataViewItemAttr_SetBackgroundColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewItemAttr_SetBackgroundColour }};
//     void SetBackgroundColour(const wxColour& colour);
static int LUACALL wxLua_wxDataViewItemAttr_SetBackgroundColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxDataViewItemAttr * self = (wxDataViewItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemAttr);
    // call SetBackgroundColour
    self->SetBackgroundColour(*colour);

    return 0;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemAttr_SetBold[] = { &wxluatype_wxDataViewItemAttr, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxDataViewItemAttr_SetBold(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemAttr_SetBold[1] = {{ wxLua_wxDataViewItemAttr_SetBold, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewItemAttr_SetBold }};
//     void SetBold( bool set );
static int LUACALL wxLua_wxDataViewItemAttr_SetBold(lua_State *L)
{
    // bool set
    bool set = wxlua_getbooleantype(L, 2);
    // get this
    wxDataViewItemAttr * self = (wxDataViewItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemAttr);
    // call SetBold
    self->SetBold(set);

    return 0;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemAttr_SetColour[] = { &wxluatype_wxDataViewItemAttr, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxDataViewItemAttr_SetColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemAttr_SetColour[1] = {{ wxLua_wxDataViewItemAttr_SetColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewItemAttr_SetColour }};
//     void SetColour(const wxColour& colour);
static int LUACALL wxLua_wxDataViewItemAttr_SetColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxDataViewItemAttr * self = (wxDataViewItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemAttr);
    // call SetColour
    self->SetColour(*colour);

    return 0;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemAttr_SetItalic[] = { &wxluatype_wxDataViewItemAttr, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxDataViewItemAttr_SetItalic(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemAttr_SetItalic[1] = {{ wxLua_wxDataViewItemAttr_SetItalic, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewItemAttr_SetItalic }};
//     void SetItalic( bool set );
static int LUACALL wxLua_wxDataViewItemAttr_SetItalic(lua_State *L)
{
    // bool set
    bool set = wxlua_getbooleantype(L, 2);
    // get this
    wxDataViewItemAttr * self = (wxDataViewItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemAttr);
    // call SetItalic
    self->SetItalic(set);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemAttr_SetStrikethrough[] = { &wxluatype_wxDataViewItemAttr, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxDataViewItemAttr_SetStrikethrough(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemAttr_SetStrikethrough[1] = {{ wxLua_wxDataViewItemAttr_SetStrikethrough, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewItemAttr_SetStrikethrough }};
//     void SetStrikethrough( bool set );
static int LUACALL wxLua_wxDataViewItemAttr_SetStrikethrough(lua_State *L)
{
    // bool set
    bool set = wxlua_getbooleantype(L, 2);
    // get this
    wxDataViewItemAttr * self = (wxDataViewItemAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewItemAttr);
    // call SetStrikethrough
    self->SetStrikethrough(set);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewItemAttr_delete[] = { &wxluatype_wxDataViewItemAttr, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemAttr_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDataViewItemAttr_delete }};

static int LUACALL wxLua_wxDataViewItemAttr_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewItemAttr_constructor[1] = {{ wxLua_wxDataViewItemAttr_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxDataViewItemAttr();
static int LUACALL wxLua_wxDataViewItemAttr_constructor(lua_State *L)
{
    // call constructor
    wxDataViewItemAttr* returns = new wxDataViewItemAttr();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItemAttr);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItemAttr);

    return 1;
}




void wxLua_wxDataViewItemAttr_delete_function(void** p)
{
    wxDataViewItemAttr* o = (wxDataViewItemAttr*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewItemAttr_methods[] = {
#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxColourPenBrush)
    { "GetBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemAttr_GetBackgroundColour, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxColourPenBrush)

    { "GetBold", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemAttr_GetBold, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxColourPenBrush)
    { "GetColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemAttr_GetColour, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxColourPenBrush)

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxFont)
    { "GetEffectiveFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemAttr_GetEffectiveFont, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxFont)

    { "GetItalic", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemAttr_GetItalic, 1, NULL },
    { "GetStrikethrough", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemAttr_GetStrikethrough, 1, NULL },
    { "HasBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemAttr_HasBackgroundColour, 1, NULL },
    { "HasColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemAttr_HasColour, 1, NULL },
    { "HasFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemAttr_HasFont, 1, NULL },
    { "IsDefault", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemAttr_IsDefault, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxColourPenBrush)
    { "SetBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemAttr_SetBackgroundColour, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxColourPenBrush)

    { "SetBold", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemAttr_SetBold, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxColourPenBrush)
    { "SetColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemAttr_SetColour, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxColourPenBrush)

    { "SetItalic", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemAttr_SetItalic, 1, NULL },
    { "SetStrikethrough", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewItemAttr_SetStrikethrough, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDataViewItemAttr_delete, 1, NULL },
    { "wxDataViewItemAttr", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewItemAttr_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDataViewItemAttr_methodCount = sizeof(wxDataViewItemAttr_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewModel
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewModel'
int wxluatype_wxDataViewModel = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_AddNotifier[] = { &wxluatype_wxDataViewModel, &wxluatype_wxDataViewModelNotifier, NULL };
static int LUACALL wxLua_wxDataViewModel_AddNotifier(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_AddNotifier[1] = {{ wxLua_wxDataViewModel_AddNotifier, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewModel_AddNotifier }};
//     void AddNotifier( wxDataViewModelNotifier *notifier );
static int LUACALL wxLua_wxDataViewModel_AddNotifier(lua_State *L)
{
    // wxDataViewModelNotifier notifier
    wxDataViewModelNotifier * notifier = (wxDataViewModelNotifier *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewModelNotifier);
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call AddNotifier
    self->AddNotifier(notifier);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_AfterReset[] = { &wxluatype_wxDataViewModel, NULL };
static int LUACALL wxLua_wxDataViewModel_AfterReset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_AfterReset[1] = {{ wxLua_wxDataViewModel_AfterReset, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewModel_AfterReset }};
//     bool AfterReset();
static int LUACALL wxLua_wxDataViewModel_AfterReset(lua_State *L)
{
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call AfterReset
    bool returns = (self->AfterReset());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_BeforeReset[] = { &wxluatype_wxDataViewModel, NULL };
static int LUACALL wxLua_wxDataViewModel_BeforeReset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_BeforeReset[1] = {{ wxLua_wxDataViewModel_BeforeReset, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewModel_BeforeReset }};
//     bool BeforeReset();
static int LUACALL wxLua_wxDataViewModel_BeforeReset(lua_State *L)
{
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call BeforeReset
    bool returns = (self->BeforeReset());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_Cleared[] = { &wxluatype_wxDataViewModel, NULL };
static int LUACALL wxLua_wxDataViewModel_Cleared(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_Cleared[1] = {{ wxLua_wxDataViewModel_Cleared, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewModel_Cleared }};
//     bool Cleared();
static int LUACALL wxLua_wxDataViewModel_Cleared(lua_State *L)
{
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call Cleared
    bool returns = (self->Cleared());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_Compare[] = { &wxluatype_wxDataViewModel, &wxluatype_wxDataViewItem, &wxluatype_wxDataViewItem, &wxluatype_TINTEGER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxDataViewModel_Compare(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_Compare[1] = {{ wxLua_wxDataViewModel_Compare, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxDataViewModel_Compare }};
//                          unsigned int column, bool ascending ) const;
static int LUACALL wxLua_wxDataViewModel_Compare(lua_State *L)
{
    // bool ascending
    bool ascending = wxlua_getbooleantype(L, 5);
    // unsigned int column
    unsigned int column = (unsigned int)wxlua_getuintegertype(L, 4);
    // const wxDataViewItem item2
    const wxDataViewItem * item2 = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewItem);
    // const wxDataViewItem item1
    const wxDataViewItem * item1 = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call Compare
    int returns = (self->Compare(*item1, *item2, column, ascending));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_DecRef[] = { &wxluatype_wxDataViewModel, NULL };
static int LUACALL wxLua_wxDataViewModel_DecRef(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_DecRef[1] = {{ wxLua_wxDataViewModel_DecRef, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewModel_DecRef }};
//     void DecRef();
static int LUACALL wxLua_wxDataViewModel_DecRef(lua_State *L)
{
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call DecRef
    self->DecRef();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_GetAttr[] = { &wxluatype_wxDataViewModel, &wxluatype_wxDataViewItem, &wxluatype_TINTEGER, &wxluatype_wxDataViewItemAttr, NULL };
static int LUACALL wxLua_wxDataViewModel_GetAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_GetAttr[1] = {{ wxLua_wxDataViewModel_GetAttr, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxDataViewModel_GetAttr }};
//     virtual bool GetAttr(const wxDataViewItem &item, unsigned int col, wxDataViewItemAttr &attr) const;
static int LUACALL wxLua_wxDataViewModel_GetAttr(lua_State *L)
{
    // wxDataViewItemAttr attr
    wxDataViewItemAttr * attr = (wxDataViewItemAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxDataViewItemAttr);
    // unsigned int col
    unsigned int col = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call GetAttr
    bool returns = (self->GetAttr(*item, col, *attr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_GetChildren[] = { &wxluatype_wxDataViewModel, &wxluatype_wxDataViewItem, &wxluatype_wxDataViewItemArray, NULL };
static int LUACALL wxLua_wxDataViewModel_GetChildren(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_GetChildren[1] = {{ wxLua_wxDataViewModel_GetChildren, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewModel_GetChildren }};
//     virtual unsigned int GetChildren( const wxDataViewItem &item, wxDataViewItemArray &children ) const = 0;
static int LUACALL wxLua_wxDataViewModel_GetChildren(lua_State *L)
{
    // wxDataViewItemArray children
    wxDataViewItemArray * children = (wxDataViewItemArray *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewItemArray);
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call GetChildren
    unsigned int returns = (self->GetChildren(*item, *children));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_GetColumnCount[] = { &wxluatype_wxDataViewModel, NULL };
static int LUACALL wxLua_wxDataViewModel_GetColumnCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_GetColumnCount[1] = {{ wxLua_wxDataViewModel_GetColumnCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewModel_GetColumnCount }};
//     virtual unsigned int GetColumnCount();
static int LUACALL wxLua_wxDataViewModel_GetColumnCount(lua_State *L)
{
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call GetColumnCount
    unsigned int returns = (self->GetColumnCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_GetColumnType[] = { &wxluatype_wxDataViewModel, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewModel_GetColumnType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_GetColumnType[1] = {{ wxLua_wxDataViewModel_GetColumnType, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewModel_GetColumnType }};
//     virtual wxString GetColumnType( unsigned int col ) const = 0;
static int LUACALL wxLua_wxDataViewModel_GetColumnType(lua_State *L)
{
    // unsigned int col
    unsigned int col = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call GetColumnType
    wxString returns = (self->GetColumnType(col));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_GetParent[] = { &wxluatype_wxDataViewModel, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewModel_GetParent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_GetParent[1] = {{ wxLua_wxDataViewModel_GetParent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewModel_GetParent }};
//     virtual wxDataViewItem GetParent( const wxDataViewItem &item ) const = 0;
static int LUACALL wxLua_wxDataViewModel_GetParent(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call GetParent
    // allocate a new object using the copy constructor
    wxDataViewItem* returns = new wxDataViewItem(self->GetParent(*item));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItem);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_GetRefCount[] = { &wxluatype_wxDataViewModel, NULL };
static int LUACALL wxLua_wxDataViewModel_GetRefCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_GetRefCount[1] = {{ wxLua_wxDataViewModel_GetRefCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewModel_GetRefCount }};
//     int GetRefCount() const;
static int LUACALL wxLua_wxDataViewModel_GetRefCount(lua_State *L)
{
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call GetRefCount
    int returns = (self->GetRefCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_HasContainerColumns[] = { &wxluatype_wxDataViewModel, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewModel_HasContainerColumns(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_HasContainerColumns[1] = {{ wxLua_wxDataViewModel_HasContainerColumns, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewModel_HasContainerColumns }};
//     virtual bool HasContainerColumns(const wxDataViewItem& item) const;
static int LUACALL wxLua_wxDataViewModel_HasContainerColumns(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call HasContainerColumns
    bool returns = (self->HasContainerColumns(*item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_HasDefaultCompare[] = { &wxluatype_wxDataViewModel, NULL };
static int LUACALL wxLua_wxDataViewModel_HasDefaultCompare(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_HasDefaultCompare[1] = {{ wxLua_wxDataViewModel_HasDefaultCompare, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewModel_HasDefaultCompare }};
//     virtual bool HasDefaultCompare() const;
static int LUACALL wxLua_wxDataViewModel_HasDefaultCompare(lua_State *L)
{
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call HasDefaultCompare
    bool returns = (self->HasDefaultCompare());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_HasValue[] = { &wxluatype_wxDataViewModel, &wxluatype_wxDataViewItem, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewModel_HasValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_HasValue[1] = {{ wxLua_wxDataViewModel_HasValue, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewModel_HasValue }};
//     bool HasValue(const wxDataViewItem& item, unsigned int col) const;
static int LUACALL wxLua_wxDataViewModel_HasValue(lua_State *L)
{
    // unsigned int col
    unsigned int col = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call HasValue
    bool returns = (self->HasValue(*item, col));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_IncRef[] = { &wxluatype_wxDataViewModel, NULL };
static int LUACALL wxLua_wxDataViewModel_IncRef(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_IncRef[1] = {{ wxLua_wxDataViewModel_IncRef, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewModel_IncRef }};
//     void IncRef();
static int LUACALL wxLua_wxDataViewModel_IncRef(lua_State *L)
{
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call IncRef
    self->IncRef();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_IsContainer[] = { &wxluatype_wxDataViewModel, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewModel_IsContainer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_IsContainer[1] = {{ wxLua_wxDataViewModel_IsContainer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewModel_IsContainer }};
//     virtual bool IsContainer( const wxDataViewItem &item ) const = 0;
static int LUACALL wxLua_wxDataViewModel_IsContainer(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call IsContainer
    bool returns = (self->IsContainer(*item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_IsEnabled[] = { &wxluatype_wxDataViewModel, &wxluatype_wxDataViewItem, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewModel_IsEnabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_IsEnabled[1] = {{ wxLua_wxDataViewModel_IsEnabled, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewModel_IsEnabled }};
//     virtual bool IsEnabled(const wxDataViewItem &item, unsigned int col) const;
static int LUACALL wxLua_wxDataViewModel_IsEnabled(lua_State *L)
{
    // unsigned int col
    unsigned int col = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call IsEnabled
    bool returns = (self->IsEnabled(*item, col));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_IsListModel[] = { &wxluatype_wxDataViewModel, NULL };
static int LUACALL wxLua_wxDataViewModel_IsListModel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_IsListModel[1] = {{ wxLua_wxDataViewModel_IsListModel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewModel_IsListModel }};
//     virtual bool IsListModel() const;
static int LUACALL wxLua_wxDataViewModel_IsListModel(lua_State *L)
{
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call IsListModel
    bool returns = (self->IsListModel());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_IsVirtualListModel[] = { &wxluatype_wxDataViewModel, NULL };
static int LUACALL wxLua_wxDataViewModel_IsVirtualListModel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_IsVirtualListModel[1] = {{ wxLua_wxDataViewModel_IsVirtualListModel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewModel_IsVirtualListModel }};
//     virtual bool IsVirtualListModel() const;
static int LUACALL wxLua_wxDataViewModel_IsVirtualListModel(lua_State *L)
{
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call IsVirtualListModel
    bool returns = (self->IsVirtualListModel());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_ItemAdded[] = { &wxluatype_wxDataViewModel, &wxluatype_wxDataViewItem, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewModel_ItemAdded(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_ItemAdded[1] = {{ wxLua_wxDataViewModel_ItemAdded, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewModel_ItemAdded }};
//     bool ItemAdded( const wxDataViewItem &parent, const wxDataViewItem &item );
static int LUACALL wxLua_wxDataViewModel_ItemAdded(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewItem);
    // const wxDataViewItem parent
    const wxDataViewItem * parent = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call ItemAdded
    bool returns = (self->ItemAdded(*parent, *item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_ItemChanged[] = { &wxluatype_wxDataViewModel, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewModel_ItemChanged(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_ItemChanged[1] = {{ wxLua_wxDataViewModel_ItemChanged, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewModel_ItemChanged }};
//     bool ItemChanged( const wxDataViewItem &item );
static int LUACALL wxLua_wxDataViewModel_ItemChanged(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call ItemChanged
    bool returns = (self->ItemChanged(*item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_ItemDeleted[] = { &wxluatype_wxDataViewModel, &wxluatype_wxDataViewItem, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewModel_ItemDeleted(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_ItemDeleted[1] = {{ wxLua_wxDataViewModel_ItemDeleted, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewModel_ItemDeleted }};
//     bool ItemDeleted( const wxDataViewItem &parent, const wxDataViewItem &item );
static int LUACALL wxLua_wxDataViewModel_ItemDeleted(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewItem);
    // const wxDataViewItem parent
    const wxDataViewItem * parent = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call ItemDeleted
    bool returns = (self->ItemDeleted(*parent, *item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_ItemsAdded[] = { &wxluatype_wxDataViewModel, &wxluatype_wxDataViewItem, &wxluatype_wxDataViewItemArray, NULL };
static int LUACALL wxLua_wxDataViewModel_ItemsAdded(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_ItemsAdded[1] = {{ wxLua_wxDataViewModel_ItemsAdded, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewModel_ItemsAdded }};
//     bool ItemsAdded( const wxDataViewItem &parent, const wxDataViewItemArray &items );
static int LUACALL wxLua_wxDataViewModel_ItemsAdded(lua_State *L)
{
    // const wxDataViewItemArray items
    const wxDataViewItemArray * items = (const wxDataViewItemArray *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewItemArray);
    // const wxDataViewItem parent
    const wxDataViewItem * parent = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call ItemsAdded
    bool returns = (self->ItemsAdded(*parent, *items));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_ItemsChanged[] = { &wxluatype_wxDataViewModel, &wxluatype_wxDataViewItemArray, NULL };
static int LUACALL wxLua_wxDataViewModel_ItemsChanged(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_ItemsChanged[1] = {{ wxLua_wxDataViewModel_ItemsChanged, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewModel_ItemsChanged }};
//     bool ItemsChanged( const wxDataViewItemArray &items );
static int LUACALL wxLua_wxDataViewModel_ItemsChanged(lua_State *L)
{
    // const wxDataViewItemArray items
    const wxDataViewItemArray * items = (const wxDataViewItemArray *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItemArray);
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call ItemsChanged
    bool returns = (self->ItemsChanged(*items));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_ItemsDeleted[] = { &wxluatype_wxDataViewModel, &wxluatype_wxDataViewItem, &wxluatype_wxDataViewItemArray, NULL };
static int LUACALL wxLua_wxDataViewModel_ItemsDeleted(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_ItemsDeleted[1] = {{ wxLua_wxDataViewModel_ItemsDeleted, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewModel_ItemsDeleted }};
//     bool ItemsDeleted( const wxDataViewItem &parent, const wxDataViewItemArray &items );
static int LUACALL wxLua_wxDataViewModel_ItemsDeleted(lua_State *L)
{
    // const wxDataViewItemArray items
    const wxDataViewItemArray * items = (const wxDataViewItemArray *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewItemArray);
    // const wxDataViewItem parent
    const wxDataViewItem * parent = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call ItemsDeleted
    bool returns = (self->ItemsDeleted(*parent, *items));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_RemoveNotifier[] = { &wxluatype_wxDataViewModel, &wxluatype_wxDataViewModelNotifier, NULL };
static int LUACALL wxLua_wxDataViewModel_RemoveNotifier(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_RemoveNotifier[1] = {{ wxLua_wxDataViewModel_RemoveNotifier, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewModel_RemoveNotifier }};
//     void RemoveNotifier( wxDataViewModelNotifier *notifier );
static int LUACALL wxLua_wxDataViewModel_RemoveNotifier(lua_State *L)
{
    // wxDataViewModelNotifier notifier
    wxDataViewModelNotifier * notifier = (wxDataViewModelNotifier *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewModelNotifier);
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call RemoveNotifier
    self->RemoveNotifier(notifier);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_Resort[] = { &wxluatype_wxDataViewModel, NULL };
static int LUACALL wxLua_wxDataViewModel_Resort(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_Resort[1] = {{ wxLua_wxDataViewModel_Resort, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewModel_Resort }};
//     virtual void Resort();
static int LUACALL wxLua_wxDataViewModel_Resort(lua_State *L)
{
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call Resort
    self->Resort();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_ValueChanged[] = { &wxluatype_wxDataViewModel, &wxluatype_wxDataViewItem, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewModel_ValueChanged(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_ValueChanged[1] = {{ wxLua_wxDataViewModel_ValueChanged, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewModel_ValueChanged }};
//     bool ValueChanged( const wxDataViewItem &item, unsigned int col );
static int LUACALL wxLua_wxDataViewModel_ValueChanged(lua_State *L)
{
    // unsigned int col
    unsigned int col = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewModel * self = (wxDataViewModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewModel);
    // call ValueChanged
    bool returns = (self->ValueChanged(*item, col));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewModel_delete[] = { &wxluatype_wxDataViewModel, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewModel_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDataViewModel_delete }};




// %override wxLua_wxDataViewModel_delete_function
// delete is private in wxDataViewModel, DecRef() it in derived classes
void wxLua_wxDataViewModel_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxDataViewModel>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewModel_methods[] = {
    { "AddNotifier", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_AddNotifier, 1, NULL },
    { "AfterReset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_AfterReset, 1, NULL },
    { "BeforeReset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_BeforeReset, 1, NULL },
    { "Cleared", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_Cleared, 1, NULL },
    { "Compare", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_Compare, 1, NULL },
    { "DecRef", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_DecRef, 1, NULL },
    { "GetAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_GetAttr, 1, NULL },
    { "GetChildren", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_GetChildren, 1, NULL },
    { "GetColumnCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_GetColumnCount, 1, NULL },
    { "GetColumnType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_GetColumnType, 1, NULL },
    { "GetParent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_GetParent, 1, NULL },
    { "GetRefCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_GetRefCount, 1, NULL },
    { "HasContainerColumns", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_HasContainerColumns, 1, NULL },
    { "HasDefaultCompare", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_HasDefaultCompare, 1, NULL },
    { "HasValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_HasValue, 1, NULL },
    { "IncRef", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_IncRef, 1, NULL },
    { "IsContainer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_IsContainer, 1, NULL },
    { "IsEnabled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_IsEnabled, 1, NULL },
    { "IsListModel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_IsListModel, 1, NULL },
    { "IsVirtualListModel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_IsVirtualListModel, 1, NULL },
    { "ItemAdded", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_ItemAdded, 1, NULL },
    { "ItemChanged", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_ItemChanged, 1, NULL },
    { "ItemDeleted", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_ItemDeleted, 1, NULL },
    { "ItemsAdded", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_ItemsAdded, 1, NULL },
    { "ItemsChanged", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_ItemsChanged, 1, NULL },
    { "ItemsDeleted", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_ItemsDeleted, 1, NULL },
    { "RemoveNotifier", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_RemoveNotifier, 1, NULL },
    { "Resort", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_Resort, 1, NULL },
    { "ValueChanged", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewModel_ValueChanged, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDataViewModel_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDataViewModel_methodCount = sizeof(wxDataViewModel_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewListModel
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewListModel'
int wxluatype_wxDataViewListModel = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListModel_GetAttrByRow[] = { &wxluatype_wxDataViewListModel, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_wxDataViewItemAttr, NULL };
static int LUACALL wxLua_wxDataViewListModel_GetAttrByRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListModel_GetAttrByRow[1] = {{ wxLua_wxDataViewListModel_GetAttrByRow, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxDataViewListModel_GetAttrByRow }};
//     virtual bool GetAttrByRow(unsigned int row, unsigned int col, wxDataViewItemAttr &attr) const;
static int LUACALL wxLua_wxDataViewListModel_GetAttrByRow(lua_State *L)
{
    // wxDataViewItemAttr attr
    wxDataViewItemAttr * attr = (wxDataViewItemAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxDataViewItemAttr);
    // unsigned int col
    unsigned int col = (unsigned int)wxlua_getuintegertype(L, 3);
    // unsigned int row
    unsigned int row = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewListModel * self = (wxDataViewListModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListModel);
    // call GetAttrByRow
    bool returns = (self->GetAttrByRow(row, col, *attr));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListModel_GetCount[] = { &wxluatype_wxDataViewListModel, NULL };
static int LUACALL wxLua_wxDataViewListModel_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListModel_GetCount[1] = {{ wxLua_wxDataViewListModel_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewListModel_GetCount }};
//     virtual unsigned int GetCount() const = 0;
static int LUACALL wxLua_wxDataViewListModel_GetCount(lua_State *L)
{
    // get this
    wxDataViewListModel * self = (wxDataViewListModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListModel);
    // call GetCount
    unsigned int returns = (self->GetCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListModel_GetRow[] = { &wxluatype_wxDataViewListModel, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewListModel_GetRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListModel_GetRow[1] = {{ wxLua_wxDataViewListModel_GetRow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewListModel_GetRow }};
//     virtual unsigned int GetRow( const wxDataViewItem &item ) const = 0;
static int LUACALL wxLua_wxDataViewListModel_GetRow(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewListModel * self = (wxDataViewListModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListModel);
    // call GetRow
    unsigned int returns = (self->GetRow(*item));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListModel_IsEnabledByRow[] = { &wxluatype_wxDataViewListModel, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewListModel_IsEnabledByRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListModel_IsEnabledByRow[1] = {{ wxLua_wxDataViewListModel_IsEnabledByRow, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewListModel_IsEnabledByRow }};
//     virtual bool IsEnabledByRow(unsigned int row, unsigned int col) const;
static int LUACALL wxLua_wxDataViewListModel_IsEnabledByRow(lua_State *L)
{
    // unsigned int col
    unsigned int col = (unsigned int)wxlua_getuintegertype(L, 3);
    // unsigned int row
    unsigned int row = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewListModel * self = (wxDataViewListModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListModel);
    // call IsEnabledByRow
    bool returns = (self->IsEnabledByRow(row, col));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListModel_delete[] = { &wxluatype_wxDataViewListModel, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListModel_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDataViewListModel_delete }};




// %override wxLua_wxDataViewListModel_delete_function
// delete is private in wxDataViewModel, DecRef() it in derived classes
void wxLua_wxDataViewListModel_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxDataViewListModel>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewListModel_methods[] = {
    { "GetAttrByRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListModel_GetAttrByRow, 1, NULL },
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListModel_GetCount, 1, NULL },
    { "GetRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListModel_GetRow, 1, NULL },
    { "IsEnabledByRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListModel_IsEnabledByRow, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDataViewListModel_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDataViewListModel_methodCount = sizeof(wxDataViewListModel_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewIndexListModel
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewIndexListModel'
int wxluatype_wxDataViewIndexListModel = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewIndexListModel_GetItem[] = { &wxluatype_wxDataViewIndexListModel, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewIndexListModel_GetItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewIndexListModel_GetItem[1] = {{ wxLua_wxDataViewIndexListModel_GetItem, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewIndexListModel_GetItem }};
//     wxDataViewItem GetItem( unsigned int row ) const;
static int LUACALL wxLua_wxDataViewIndexListModel_GetItem(lua_State *L)
{
    // unsigned int row
    unsigned int row = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewIndexListModel * self = (wxDataViewIndexListModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewIndexListModel);
    // call GetItem
    // allocate a new object using the copy constructor
    wxDataViewItem* returns = new wxDataViewItem(self->GetItem(row));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItem);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewIndexListModel_Reset[] = { &wxluatype_wxDataViewIndexListModel, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewIndexListModel_Reset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewIndexListModel_Reset[1] = {{ wxLua_wxDataViewIndexListModel_Reset, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewIndexListModel_Reset }};
//     void Reset( unsigned int new_size );
static int LUACALL wxLua_wxDataViewIndexListModel_Reset(lua_State *L)
{
    // unsigned int new_size
    unsigned int new_size = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewIndexListModel * self = (wxDataViewIndexListModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewIndexListModel);
    // call Reset
    self->Reset(new_size);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewIndexListModel_RowAppended[] = { &wxluatype_wxDataViewIndexListModel, NULL };
static int LUACALL wxLua_wxDataViewIndexListModel_RowAppended(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewIndexListModel_RowAppended[1] = {{ wxLua_wxDataViewIndexListModel_RowAppended, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewIndexListModel_RowAppended }};
//     void RowAppended();
static int LUACALL wxLua_wxDataViewIndexListModel_RowAppended(lua_State *L)
{
    // get this
    wxDataViewIndexListModel * self = (wxDataViewIndexListModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewIndexListModel);
    // call RowAppended
    self->RowAppended();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewIndexListModel_RowChanged[] = { &wxluatype_wxDataViewIndexListModel, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewIndexListModel_RowChanged(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewIndexListModel_RowChanged[1] = {{ wxLua_wxDataViewIndexListModel_RowChanged, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewIndexListModel_RowChanged }};
//     void RowChanged( unsigned int row );
static int LUACALL wxLua_wxDataViewIndexListModel_RowChanged(lua_State *L)
{
    // unsigned int row
    unsigned int row = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewIndexListModel * self = (wxDataViewIndexListModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewIndexListModel);
    // call RowChanged
    self->RowChanged(row);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewIndexListModel_RowDeleted[] = { &wxluatype_wxDataViewIndexListModel, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewIndexListModel_RowDeleted(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewIndexListModel_RowDeleted[1] = {{ wxLua_wxDataViewIndexListModel_RowDeleted, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewIndexListModel_RowDeleted }};
//     void RowDeleted( unsigned int row );
static int LUACALL wxLua_wxDataViewIndexListModel_RowDeleted(lua_State *L)
{
    // unsigned int row
    unsigned int row = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewIndexListModel * self = (wxDataViewIndexListModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewIndexListModel);
    // call RowDeleted
    self->RowDeleted(row);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewIndexListModel_RowInserted[] = { &wxluatype_wxDataViewIndexListModel, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewIndexListModel_RowInserted(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewIndexListModel_RowInserted[1] = {{ wxLua_wxDataViewIndexListModel_RowInserted, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewIndexListModel_RowInserted }};
//     void RowInserted( unsigned int before );
static int LUACALL wxLua_wxDataViewIndexListModel_RowInserted(lua_State *L)
{
    // unsigned int before
    unsigned int before = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewIndexListModel * self = (wxDataViewIndexListModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewIndexListModel);
    // call RowInserted
    self->RowInserted(before);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewIndexListModel_RowPrepended[] = { &wxluatype_wxDataViewIndexListModel, NULL };
static int LUACALL wxLua_wxDataViewIndexListModel_RowPrepended(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewIndexListModel_RowPrepended[1] = {{ wxLua_wxDataViewIndexListModel_RowPrepended, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewIndexListModel_RowPrepended }};
//     void RowPrepended();
static int LUACALL wxLua_wxDataViewIndexListModel_RowPrepended(lua_State *L)
{
    // get this
    wxDataViewIndexListModel * self = (wxDataViewIndexListModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewIndexListModel);
    // call RowPrepended
    self->RowPrepended();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewIndexListModel_RowValueChanged[] = { &wxluatype_wxDataViewIndexListModel, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewIndexListModel_RowValueChanged(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewIndexListModel_RowValueChanged[1] = {{ wxLua_wxDataViewIndexListModel_RowValueChanged, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewIndexListModel_RowValueChanged }};
//     void RowValueChanged( unsigned int row, unsigned int col );
static int LUACALL wxLua_wxDataViewIndexListModel_RowValueChanged(lua_State *L)
{
    // unsigned int col
    unsigned int col = (unsigned int)wxlua_getuintegertype(L, 3);
    // unsigned int row
    unsigned int row = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewIndexListModel * self = (wxDataViewIndexListModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewIndexListModel);
    // call RowValueChanged
    self->RowValueChanged(row, col);

    return 0;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxArrayInt)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewIndexListModel_RowsDeleted[] = { &wxluatype_wxDataViewIndexListModel, &wxluatype_wxArrayInt, NULL };
static int LUACALL wxLua_wxDataViewIndexListModel_RowsDeleted(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewIndexListModel_RowsDeleted[1] = {{ wxLua_wxDataViewIndexListModel_RowsDeleted, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewIndexListModel_RowsDeleted }};
//     void RowsDeleted( const wxArrayInt &rows );
static int LUACALL wxLua_wxDataViewIndexListModel_RowsDeleted(lua_State *L)
{
    // const wxArrayInt rows
    wxLuaSmartwxArrayInt rows = wxlua_getwxArrayInt(L, 2);
    // get this
    wxDataViewIndexListModel * self = (wxDataViewIndexListModel *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewIndexListModel);
    // call RowsDeleted
    self->RowsDeleted(rows);

    return 0;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxArrayInt)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewIndexListModel_delete[] = { &wxluatype_wxDataViewIndexListModel, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewIndexListModel_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDataViewIndexListModel_delete }};




// %override wxLua_wxDataViewIndexListModel_delete_function
// delete is private in wxDataViewModel, DecRef() it in derived classes
void wxLua_wxDataViewIndexListModel_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxDataViewIndexListModel>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewIndexListModel_methods[] = {
    { "GetItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewIndexListModel_GetItem, 1, NULL },
    { "Reset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewIndexListModel_Reset, 1, NULL },
    { "RowAppended", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewIndexListModel_RowAppended, 1, NULL },
    { "RowChanged", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewIndexListModel_RowChanged, 1, NULL },
    { "RowDeleted", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewIndexListModel_RowDeleted, 1, NULL },
    { "RowInserted", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewIndexListModel_RowInserted, 1, NULL },
    { "RowPrepended", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewIndexListModel_RowPrepended, 1, NULL },
    { "RowValueChanged", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewIndexListModel_RowValueChanged, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxArrayInt)
    { "RowsDeleted", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewIndexListModel_RowsDeleted, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxArrayInt)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDataViewIndexListModel_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDataViewIndexListModel_methodCount = sizeof(wxDataViewIndexListModel_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewListStoreLine
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewListStoreLine'
int wxluatype_wxDataViewListStoreLine = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListStoreLine_GetData[] = { &wxluatype_wxDataViewListStoreLine, NULL };
static int LUACALL wxLua_wxDataViewListStoreLine_GetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListStoreLine_GetData[1] = {{ wxLua_wxDataViewListStoreLine_GetData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewListStoreLine_GetData }};
//     wxUIntPtr GetData() const;
static int LUACALL wxLua_wxDataViewListStoreLine_GetData(lua_State *L)
{
    // get this
    wxDataViewListStoreLine * self = (wxDataViewListStoreLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListStoreLine);
    // call GetData
    wxUIntPtr returns = (self->GetData());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListStoreLine_SetData[] = { &wxluatype_wxDataViewListStoreLine, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewListStoreLine_SetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListStoreLine_SetData[1] = {{ wxLua_wxDataViewListStoreLine_SetData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewListStoreLine_SetData }};
//     void SetData( wxUIntPtr data );
static int LUACALL wxLua_wxDataViewListStoreLine_SetData(lua_State *L)
{
    // wxUIntPtr data
    wxUIntPtr data = (wxUIntPtr)wxlua_getnumbertype(L, 2);
    // get this
    wxDataViewListStoreLine * self = (wxDataViewListStoreLine *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListStoreLine);
    // call SetData
    self->SetData(data);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListStoreLine_delete[] = { &wxluatype_wxDataViewListStoreLine, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListStoreLine_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDataViewListStoreLine_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListStoreLine_constructor[] = { &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewListStoreLine_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListStoreLine_constructor[1] = {{ wxLua_wxDataViewListStoreLine_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxDataViewListStoreLine_constructor }};
//     wxDataViewListStoreLine( wxUIntPtr data = 0 );
static int LUACALL wxLua_wxDataViewListStoreLine_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxUIntPtr data = 0
    wxUIntPtr data = (argCount >= 1 ? (wxUIntPtr)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxDataViewListStoreLine* returns = new wxDataViewListStoreLine(data);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewListStoreLine);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewListStoreLine);

    return 1;
}




void wxLua_wxDataViewListStoreLine_delete_function(void** p)
{
    wxDataViewListStoreLine* o = (wxDataViewListStoreLine*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewListStoreLine_methods[] = {
    { "GetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListStoreLine_GetData, 1, NULL },
    { "SetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListStoreLine_SetData, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDataViewListStoreLine_delete, 1, NULL },
    { "wxDataViewListStoreLine", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewListStoreLine_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDataViewListStoreLine_methodCount = sizeof(wxDataViewListStoreLine_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewListStore
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewListStore'
int wxluatype_wxDataViewListStore = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListStore_AppendColumn[] = { &wxluatype_wxDataViewListStore, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDataViewListStore_AppendColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListStore_AppendColumn[1] = {{ wxLua_wxDataViewListStore_AppendColumn, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewListStore_AppendColumn }};
//     void AppendColumn( const wxString &varianttype );
static int LUACALL wxLua_wxDataViewListStore_AppendColumn(lua_State *L)
{
    // const wxString varianttype
    const wxString varianttype = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewListStore * self = (wxDataViewListStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListStore);
    // call AppendColumn
    self->AppendColumn(varianttype);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListStore_ClearColumns[] = { &wxluatype_wxDataViewListStore, NULL };
static int LUACALL wxLua_wxDataViewListStore_ClearColumns(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListStore_ClearColumns[1] = {{ wxLua_wxDataViewListStore_ClearColumns, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewListStore_ClearColumns }};
//     void ClearColumns();
static int LUACALL wxLua_wxDataViewListStore_ClearColumns(lua_State *L)
{
    // get this
    wxDataViewListStore * self = (wxDataViewListStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListStore);
    // call ClearColumns
    self->ClearColumns();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListStore_DeleteAllItems[] = { &wxluatype_wxDataViewListStore, NULL };
static int LUACALL wxLua_wxDataViewListStore_DeleteAllItems(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListStore_DeleteAllItems[1] = {{ wxLua_wxDataViewListStore_DeleteAllItems, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewListStore_DeleteAllItems }};
//     void DeleteAllItems();
static int LUACALL wxLua_wxDataViewListStore_DeleteAllItems(lua_State *L)
{
    // get this
    wxDataViewListStore * self = (wxDataViewListStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListStore);
    // call DeleteAllItems
    self->DeleteAllItems();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListStore_DeleteItem[] = { &wxluatype_wxDataViewListStore, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewListStore_DeleteItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListStore_DeleteItem[1] = {{ wxLua_wxDataViewListStore_DeleteItem, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewListStore_DeleteItem }};
//     void DeleteItem( unsigned int pos );
static int LUACALL wxLua_wxDataViewListStore_DeleteItem(lua_State *L)
{
    // unsigned int pos
    unsigned int pos = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewListStore * self = (wxDataViewListStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListStore);
    // call DeleteItem
    self->DeleteItem(pos);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListStore_GetItemCount[] = { &wxluatype_wxDataViewListStore, NULL };
static int LUACALL wxLua_wxDataViewListStore_GetItemCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListStore_GetItemCount[1] = {{ wxLua_wxDataViewListStore_GetItemCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewListStore_GetItemCount }};
//     unsigned int GetItemCount() const;
static int LUACALL wxLua_wxDataViewListStore_GetItemCount(lua_State *L)
{
    // get this
    wxDataViewListStore * self = (wxDataViewListStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListStore);
    // call GetItemCount
    unsigned int returns = (self->GetItemCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListStore_GetItemData[] = { &wxluatype_wxDataViewListStore, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewListStore_GetItemData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListStore_GetItemData[1] = {{ wxLua_wxDataViewListStore_GetItemData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewListStore_GetItemData }};
//     wxUIntPtr GetItemData( const wxDataViewItem& item ) const;
static int LUACALL wxLua_wxDataViewListStore_GetItemData(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewListStore * self = (wxDataViewListStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListStore);
    // call GetItemData
    wxUIntPtr returns = (self->GetItemData(*item));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListStore_InsertColumn[] = { &wxluatype_wxDataViewListStore, &wxluatype_TINTEGER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDataViewListStore_InsertColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListStore_InsertColumn[1] = {{ wxLua_wxDataViewListStore_InsertColumn, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewListStore_InsertColumn }};
//     void InsertColumn( unsigned int pos, const wxString &varianttype );
static int LUACALL wxLua_wxDataViewListStore_InsertColumn(lua_State *L)
{
    // const wxString varianttype
    const wxString varianttype = wxlua_getwxStringtype(L, 3);
    // unsigned int pos
    unsigned int pos = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewListStore * self = (wxDataViewListStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListStore);
    // call InsertColumn
    self->InsertColumn(pos, varianttype);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListStore_PrependColumn[] = { &wxluatype_wxDataViewListStore, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDataViewListStore_PrependColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListStore_PrependColumn[1] = {{ wxLua_wxDataViewListStore_PrependColumn, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewListStore_PrependColumn }};
//     void PrependColumn( const wxString &varianttype );
static int LUACALL wxLua_wxDataViewListStore_PrependColumn(lua_State *L)
{
    // const wxString varianttype
    const wxString varianttype = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewListStore * self = (wxDataViewListStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListStore);
    // call PrependColumn
    self->PrependColumn(varianttype);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListStore_SetItemData[] = { &wxluatype_wxDataViewListStore, &wxluatype_wxDataViewItem, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewListStore_SetItemData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListStore_SetItemData[1] = {{ wxLua_wxDataViewListStore_SetItemData, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewListStore_SetItemData }};
//     void SetItemData( const wxDataViewItem& item, wxUIntPtr data );
static int LUACALL wxLua_wxDataViewListStore_SetItemData(lua_State *L)
{
    // wxUIntPtr data
    wxUIntPtr data = (wxUIntPtr)wxlua_getnumbertype(L, 3);
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewListStore * self = (wxDataViewListStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListStore);
    // call SetItemData
    self->SetItemData(*item, data);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListStore_delete[] = { &wxluatype_wxDataViewListStore, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListStore_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDataViewListStore_delete }};

static int LUACALL wxLua_wxDataViewListStore_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListStore_constructor[1] = {{ wxLua_wxDataViewListStore_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxDataViewListStore();
static int LUACALL wxLua_wxDataViewListStore_constructor(lua_State *L)
{
    // call constructor
    wxDataViewListStore* returns = new wxDataViewListStore();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewListStore);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewListStore);

    return 1;
}




// %override wxLua_wxDataViewListStore_delete_function
// delete is private in wxDataViewModel, DecRef() it in derived classes
void wxLua_wxDataViewListStore_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxDataViewListStore>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewListStore_methods[] = {
    { "AppendColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListStore_AppendColumn, 1, NULL },
    { "ClearColumns", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListStore_ClearColumns, 1, NULL },
    { "DeleteAllItems", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListStore_DeleteAllItems, 1, NULL },
    { "DeleteItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListStore_DeleteItem, 1, NULL },
    { "GetItemCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListStore_GetItemCount, 1, NULL },
    { "GetItemData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListStore_GetItemData, 1, NULL },
    { "InsertColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListStore_InsertColumn, 1, NULL },
    { "PrependColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListStore_PrependColumn, 1, NULL },
    { "SetItemData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListStore_SetItemData, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDataViewListStore_delete, 1, NULL },
    { "wxDataViewListStore", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewListStore_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDataViewListStore_methodCount = sizeof(wxDataViewListStore_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewTreeStoreNode
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewTreeStoreNode'
int wxluatype_wxDataViewTreeStoreNode = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_GetData[] = { &wxluatype_wxDataViewTreeStoreNode, NULL };
static int LUACALL wxLua_wxDataViewTreeStoreNode_GetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreNode_GetData[1] = {{ wxLua_wxDataViewTreeStoreNode_GetData, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_GetData }};
//     wxClientData *GetData() const;
static int LUACALL wxLua_wxDataViewTreeStoreNode_GetData(lua_State *L)
{
    // get this
    wxDataViewTreeStoreNode * self = (wxDataViewTreeStoreNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStoreNode);
    // call GetData
    wxClientData* returns = (wxClientData*)self->GetData();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxClientData);

    return 1;
}


#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_GetIcon1[] = { &wxluatype_wxDataViewTreeStoreNode, NULL };
static int LUACALL wxLua_wxDataViewTreeStoreNode_GetIcon1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreNode_GetIcon1[1] = {{ wxLua_wxDataViewTreeStoreNode_GetIcon1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_GetIcon1 }};
//     %wxchkver_3_2_0 wxIcon GetIcon() const;
static int LUACALL wxLua_wxDataViewTreeStoreNode_GetIcon1(lua_State *L)
{
    // get this
    wxDataViewTreeStoreNode * self = (wxDataViewTreeStoreNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStoreNode);
    // call GetIcon
    // allocate a new object using the copy constructor
    wxIcon* returns = new wxIcon(self->GetIcon());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxIcon);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}

#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon)

#if ((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_GetIcon[] = { &wxluatype_wxDataViewTreeStoreNode, NULL };
static int LUACALL wxLua_wxDataViewTreeStoreNode_GetIcon(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreNode_GetIcon[1] = {{ wxLua_wxDataViewTreeStoreNode_GetIcon, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_GetIcon }};
//     !%wxchkver_3_2_0 const wxIcon &GetIcon() const;
static int LUACALL wxLua_wxDataViewTreeStoreNode_GetIcon(lua_State *L)
{
    // get this
    wxDataViewTreeStoreNode * self = (wxDataViewTreeStoreNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStoreNode);
    // call GetIcon
    const wxIcon* returns = (const wxIcon*)&self->GetIcon();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}

#endif // ((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_GetItem[] = { &wxluatype_wxDataViewTreeStoreNode, NULL };
static int LUACALL wxLua_wxDataViewTreeStoreNode_GetItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreNode_GetItem[1] = {{ wxLua_wxDataViewTreeStoreNode_GetItem, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_GetItem }};
//     wxDataViewItem GetItem() const;
static int LUACALL wxLua_wxDataViewTreeStoreNode_GetItem(lua_State *L)
{
    // get this
    wxDataViewTreeStoreNode * self = (wxDataViewTreeStoreNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStoreNode);
    // call GetItem
    // allocate a new object using the copy constructor
    wxDataViewItem* returns = new wxDataViewItem(self->GetItem());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItem);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_GetParent[] = { &wxluatype_wxDataViewTreeStoreNode, NULL };
static int LUACALL wxLua_wxDataViewTreeStoreNode_GetParent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreNode_GetParent[1] = {{ wxLua_wxDataViewTreeStoreNode_GetParent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_GetParent }};
//     wxDataViewTreeStoreNode *GetParent();
static int LUACALL wxLua_wxDataViewTreeStoreNode_GetParent(lua_State *L)
{
    // get this
    wxDataViewTreeStoreNode * self = (wxDataViewTreeStoreNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStoreNode);
    // call GetParent
    wxDataViewTreeStoreNode* returns = (wxDataViewTreeStoreNode*)self->GetParent();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewTreeStoreNode);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_GetText[] = { &wxluatype_wxDataViewTreeStoreNode, NULL };
static int LUACALL wxLua_wxDataViewTreeStoreNode_GetText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreNode_GetText[1] = {{ wxLua_wxDataViewTreeStoreNode_GetText, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_GetText }};
//     wxString GetText() const;
static int LUACALL wxLua_wxDataViewTreeStoreNode_GetText(lua_State *L)
{
    // get this
    wxDataViewTreeStoreNode * self = (wxDataViewTreeStoreNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStoreNode);
    // call GetText
    wxString returns = (self->GetText());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_IsContainer[] = { &wxluatype_wxDataViewTreeStoreNode, NULL };
static int LUACALL wxLua_wxDataViewTreeStoreNode_IsContainer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreNode_IsContainer[1] = {{ wxLua_wxDataViewTreeStoreNode_IsContainer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_IsContainer }};
//     virtual bool IsContainer();
static int LUACALL wxLua_wxDataViewTreeStoreNode_IsContainer(lua_State *L)
{
    // get this
    wxDataViewTreeStoreNode * self = (wxDataViewTreeStoreNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStoreNode);
    // call IsContainer
    bool returns = (self->IsContainer());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_SetData[] = { &wxluatype_wxDataViewTreeStoreNode, &wxluatype_wxClientData, NULL };
static int LUACALL wxLua_wxDataViewTreeStoreNode_SetData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreNode_SetData[1] = {{ wxLua_wxDataViewTreeStoreNode_SetData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_SetData }};
//     void SetData( wxClientData *data );
static int LUACALL wxLua_wxDataViewTreeStoreNode_SetData(lua_State *L)
{
    // wxClientData data
    wxClientData * data = (wxClientData *)wxluaT_getuserdatatype(L, 2, wxluatype_wxClientData);
    // get this
    wxDataViewTreeStoreNode * self = (wxDataViewTreeStoreNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStoreNode);
    // call SetData
    self->SetData(data);

    return 0;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_SetIcon[] = { &wxluatype_wxDataViewTreeStoreNode, &wxluatype_wxIcon, NULL };
static int LUACALL wxLua_wxDataViewTreeStoreNode_SetIcon(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreNode_SetIcon[1] = {{ wxLua_wxDataViewTreeStoreNode_SetIcon, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_SetIcon }};
//     void SetIcon( const wxIcon &icon );
static int LUACALL wxLua_wxDataViewTreeStoreNode_SetIcon(lua_State *L)
{
    // const wxIcon icon
    const wxIcon * icon = (const wxIcon *)wxluaT_getuserdatatype(L, 2, wxluatype_wxIcon);
    // get this
    wxDataViewTreeStoreNode * self = (wxDataViewTreeStoreNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStoreNode);
    // call SetIcon
    self->SetIcon(*icon);

    return 0;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_SetText[] = { &wxluatype_wxDataViewTreeStoreNode, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDataViewTreeStoreNode_SetText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreNode_SetText[1] = {{ wxLua_wxDataViewTreeStoreNode_SetText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_SetText }};
//     void SetText( const wxString &text );
static int LUACALL wxLua_wxDataViewTreeStoreNode_SetText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewTreeStoreNode * self = (wxDataViewTreeStoreNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStoreNode);
    // call SetText
    self->SetText(text);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_delete[] = { &wxluatype_wxDataViewTreeStoreNode, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreNode_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_delete }};


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_constructor[] = { &wxluatype_wxDataViewTreeStoreNode, &wxluatype_TSTRING, &wxluatype_wxIcon, &wxluatype_wxClientData, NULL };
static int LUACALL wxLua_wxDataViewTreeStoreNode_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreNode_constructor[1] = {{ wxLua_wxDataViewTreeStoreNode_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 4, s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_constructor }};
//     wxDataViewTreeStoreNode(wxDataViewTreeStoreNode *parent, const wxString &text, const wxIcon &icon = wxNullIcon, wxClientData *data = NULL );
static int LUACALL wxLua_wxDataViewTreeStoreNode_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxClientData data = NULL
    wxClientData * data = (argCount >= 4 ? (wxClientData *)wxluaT_getuserdatatype(L, 4, wxluatype_wxClientData) : NULL);
    // const wxIcon icon = wxNullIcon
    const wxIcon * icon = (argCount >= 3 ? (const wxIcon *)wxluaT_getuserdatatype(L, 3, wxluatype_wxIcon) : &wxNullIcon);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // wxDataViewTreeStoreNode parent
    wxDataViewTreeStoreNode * parent = (wxDataViewTreeStoreNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStoreNode);
    // call constructor
    wxDataViewTreeStoreNode* returns = new wxDataViewTreeStoreNode(parent, text, *icon, data);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewTreeStoreNode);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewTreeStoreNode);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)



#if (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon))||(((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreNode_GetIcon_overload[] =
{

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon)
    { wxLua_wxDataViewTreeStoreNode_GetIcon1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_GetIcon1 },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon)

#if ((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)
    { wxLua_wxDataViewTreeStoreNode_GetIcon, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewTreeStoreNode_GetIcon },
#endif // ((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)
};
static int s_wxluafunc_wxLua_wxDataViewTreeStoreNode_GetIcon_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewTreeStoreNode_GetIcon_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon))||(((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon))

void wxLua_wxDataViewTreeStoreNode_delete_function(void** p)
{
    wxDataViewTreeStoreNode* o = (wxDataViewTreeStoreNode*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewTreeStoreNode_methods[] = {
    { "GetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStoreNode_GetData, 1, NULL },

#if (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon))||(((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon))
    { "GetIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStoreNode_GetIcon_overload, s_wxluafunc_wxLua_wxDataViewTreeStoreNode_GetIcon_overload_count, 0 },
#endif // (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon))||(((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon))

    { "GetItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStoreNode_GetItem, 1, NULL },
    { "GetParent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStoreNode_GetParent, 1, NULL },
    { "GetText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStoreNode_GetText, 1, NULL },
    { "IsContainer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStoreNode_IsContainer, 1, NULL },
    { "SetData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStoreNode_SetData, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)
    { "SetIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStoreNode_SetIcon, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)

    { "SetText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStoreNode_SetText, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDataViewTreeStoreNode_delete, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)
    { "wxDataViewTreeStoreNode", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewTreeStoreNode_constructor, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)

    { 0, 0, 0, 0 },
};

int wxDataViewTreeStoreNode_methodCount = sizeof(wxDataViewTreeStoreNode_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewTreeStoreContainerNode
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewTreeStoreContainerNode'
int wxluatype_wxDataViewTreeStoreContainerNode = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStoreContainerNode_DestroyChildren[] = { &wxluatype_wxDataViewTreeStoreContainerNode, NULL };
static int LUACALL wxLua_wxDataViewTreeStoreContainerNode_DestroyChildren(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreContainerNode_DestroyChildren[1] = {{ wxLua_wxDataViewTreeStoreContainerNode_DestroyChildren, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewTreeStoreContainerNode_DestroyChildren }};
//     void DestroyChildren();
static int LUACALL wxLua_wxDataViewTreeStoreContainerNode_DestroyChildren(lua_State *L)
{
    // get this
    wxDataViewTreeStoreContainerNode * self = (wxDataViewTreeStoreContainerNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStoreContainerNode);
    // call DestroyChildren
    self->DestroyChildren();

    return 0;
}


#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStoreContainerNode_GetExpandedIcon1[] = { &wxluatype_wxDataViewTreeStoreContainerNode, NULL };
static int LUACALL wxLua_wxDataViewTreeStoreContainerNode_GetExpandedIcon1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreContainerNode_GetExpandedIcon1[1] = {{ wxLua_wxDataViewTreeStoreContainerNode_GetExpandedIcon1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewTreeStoreContainerNode_GetExpandedIcon1 }};
//     %wxchkver_3_2_0 wxIcon GetExpandedIcon() const;
static int LUACALL wxLua_wxDataViewTreeStoreContainerNode_GetExpandedIcon1(lua_State *L)
{
    // get this
    wxDataViewTreeStoreContainerNode * self = (wxDataViewTreeStoreContainerNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStoreContainerNode);
    // call GetExpandedIcon
    // allocate a new object using the copy constructor
    wxIcon* returns = new wxIcon(self->GetExpandedIcon());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxIcon);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}

#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon)

#if ((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStoreContainerNode_GetExpandedIcon[] = { &wxluatype_wxDataViewTreeStoreContainerNode, NULL };
static int LUACALL wxLua_wxDataViewTreeStoreContainerNode_GetExpandedIcon(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreContainerNode_GetExpandedIcon[1] = {{ wxLua_wxDataViewTreeStoreContainerNode_GetExpandedIcon, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewTreeStoreContainerNode_GetExpandedIcon }};
//     !%wxchkver_3_2_0 const wxIcon &GetExpandedIcon() const;
static int LUACALL wxLua_wxDataViewTreeStoreContainerNode_GetExpandedIcon(lua_State *L)
{
    // get this
    wxDataViewTreeStoreContainerNode * self = (wxDataViewTreeStoreContainerNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStoreContainerNode);
    // call GetExpandedIcon
    const wxIcon* returns = (const wxIcon*)&self->GetExpandedIcon();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}

#endif // ((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStoreContainerNode_IsExpanded[] = { &wxluatype_wxDataViewTreeStoreContainerNode, NULL };
static int LUACALL wxLua_wxDataViewTreeStoreContainerNode_IsExpanded(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreContainerNode_IsExpanded[1] = {{ wxLua_wxDataViewTreeStoreContainerNode_IsExpanded, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewTreeStoreContainerNode_IsExpanded }};
//     bool IsExpanded() const;
static int LUACALL wxLua_wxDataViewTreeStoreContainerNode_IsExpanded(lua_State *L)
{
    // get this
    wxDataViewTreeStoreContainerNode * self = (wxDataViewTreeStoreContainerNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStoreContainerNode);
    // call IsExpanded
    bool returns = (self->IsExpanded());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStoreContainerNode_SetExpanded[] = { &wxluatype_wxDataViewTreeStoreContainerNode, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxDataViewTreeStoreContainerNode_SetExpanded(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreContainerNode_SetExpanded[1] = {{ wxLua_wxDataViewTreeStoreContainerNode_SetExpanded, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxDataViewTreeStoreContainerNode_SetExpanded }};
//     void SetExpanded( bool expanded = true );
static int LUACALL wxLua_wxDataViewTreeStoreContainerNode_SetExpanded(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool expanded = true
    bool expanded = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxDataViewTreeStoreContainerNode * self = (wxDataViewTreeStoreContainerNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStoreContainerNode);
    // call SetExpanded
    self->SetExpanded(expanded);

    return 0;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStoreContainerNode_SetExpandedIcon[] = { &wxluatype_wxDataViewTreeStoreContainerNode, &wxluatype_wxIcon, NULL };
static int LUACALL wxLua_wxDataViewTreeStoreContainerNode_SetExpandedIcon(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreContainerNode_SetExpandedIcon[1] = {{ wxLua_wxDataViewTreeStoreContainerNode_SetExpandedIcon, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewTreeStoreContainerNode_SetExpandedIcon }};
//     void SetExpandedIcon( const wxIcon &icon );
static int LUACALL wxLua_wxDataViewTreeStoreContainerNode_SetExpandedIcon(lua_State *L)
{
    // const wxIcon icon
    const wxIcon * icon = (const wxIcon *)wxluaT_getuserdatatype(L, 2, wxluatype_wxIcon);
    // get this
    wxDataViewTreeStoreContainerNode * self = (wxDataViewTreeStoreContainerNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStoreContainerNode);
    // call SetExpandedIcon
    self->SetExpandedIcon(*icon);

    return 0;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStoreContainerNode_delete[] = { &wxluatype_wxDataViewTreeStoreContainerNode, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreContainerNode_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDataViewTreeStoreContainerNode_delete }};


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStoreContainerNode_constructor[] = { &wxluatype_wxDataViewTreeStoreNode, &wxluatype_TSTRING, &wxluatype_wxIcon, &wxluatype_wxIcon, &wxluatype_wxClientData, NULL };
static int LUACALL wxLua_wxDataViewTreeStoreContainerNode_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreContainerNode_constructor[1] = {{ wxLua_wxDataViewTreeStoreContainerNode_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 5, s_wxluatypeArray_wxLua_wxDataViewTreeStoreContainerNode_constructor }};
// 		const wxIcon &icon = wxNullIcon, const wxIcon &expanded = wxNullIcon, wxClientData *data = NULL );
static int LUACALL wxLua_wxDataViewTreeStoreContainerNode_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxClientData data = NULL
    wxClientData * data = (argCount >= 5 ? (wxClientData *)wxluaT_getuserdatatype(L, 5, wxluatype_wxClientData) : NULL);
    // const wxIcon expanded = wxNullIcon
    const wxIcon * expanded = (argCount >= 4 ? (const wxIcon *)wxluaT_getuserdatatype(L, 4, wxluatype_wxIcon) : &wxNullIcon);
    // const wxIcon icon = wxNullIcon
    const wxIcon * icon = (argCount >= 3 ? (const wxIcon *)wxluaT_getuserdatatype(L, 3, wxluatype_wxIcon) : &wxNullIcon);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // wxDataViewTreeStoreNode parent
    wxDataViewTreeStoreNode * parent = (wxDataViewTreeStoreNode *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStoreNode);
    // call constructor
    wxDataViewTreeStoreContainerNode* returns = new wxDataViewTreeStoreContainerNode(parent, text, *icon, *expanded, data);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewTreeStoreContainerNode);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewTreeStoreContainerNode);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)



#if (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon))||(((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStoreContainerNode_GetExpandedIcon_overload[] =
{

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon)
    { wxLua_wxDataViewTreeStoreContainerNode_GetExpandedIcon1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewTreeStoreContainerNode_GetExpandedIcon1 },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon)

#if ((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)
    { wxLua_wxDataViewTreeStoreContainerNode_GetExpandedIcon, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewTreeStoreContainerNode_GetExpandedIcon },
#endif // ((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)
};
static int s_wxluafunc_wxLua_wxDataViewTreeStoreContainerNode_GetExpandedIcon_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewTreeStoreContainerNode_GetExpandedIcon_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon))||(((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon))

void wxLua_wxDataViewTreeStoreContainerNode_delete_function(void** p)
{
    wxDataViewTreeStoreContainerNode* o = (wxDataViewTreeStoreContainerNode*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewTreeStoreContainerNode_methods[] = {
    { "DestroyChildren", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStoreContainerNode_DestroyChildren, 1, NULL },

#if (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon))||(((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon))
    { "GetExpandedIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStoreContainerNode_GetExpandedIcon_overload, s_wxluafunc_wxLua_wxDataViewTreeStoreContainerNode_GetExpandedIcon_overload_count, 0 },
#endif // (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon))||(((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon))

    { "IsExpanded", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStoreContainerNode_IsExpanded, 1, NULL },
    { "SetExpanded", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStoreContainerNode_SetExpanded, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)
    { "SetExpandedIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStoreContainerNode_SetExpandedIcon, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDataViewTreeStoreContainerNode_delete, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)
    { "wxDataViewTreeStoreContainerNode", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewTreeStoreContainerNode_constructor, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)

    { 0, 0, 0, 0 },
};

int wxDataViewTreeStoreContainerNode_methodCount = sizeof(wxDataViewTreeStoreContainerNode_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewTreeStore
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewTreeStore'
int wxluatype_wxDataViewTreeStore = WXLUA_TUNKNOWN;

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_AppendContainer[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, &wxluatype_TSTRING, &wxluatype_wxIcon, &wxluatype_wxIcon, &wxluatype_wxClientData, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_AppendContainer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_AppendContainer[1] = {{ wxLua_wxDataViewTreeStore_AppendContainer, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxDataViewTreeStore_AppendContainer }};
//         wxClientData *data = NULL );
static int LUACALL wxLua_wxDataViewTreeStore_AppendContainer(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxClientData data = NULL
    wxClientData * data = (argCount >= 6 ? (wxClientData *)wxluaT_getuserdatatype(L, 6, wxluatype_wxClientData) : NULL);
    // const wxIcon expanded = wxNullIcon
    const wxIcon * expanded = (argCount >= 5 ? (const wxIcon *)wxluaT_getuserdatatype(L, 5, wxluatype_wxIcon) : &wxNullIcon);
    // const wxIcon icon = wxNullIcon
    const wxIcon * icon = (argCount >= 4 ? (const wxIcon *)wxluaT_getuserdatatype(L, 4, wxluatype_wxIcon) : &wxNullIcon);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 3);
    // const wxDataViewItem parent
    const wxDataViewItem * parent = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call AppendContainer
    // allocate a new object using the copy constructor
    wxDataViewItem* returns = new wxDataViewItem(self->AppendContainer(*parent, text, *icon, *expanded, data));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItem);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_AppendItem[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, &wxluatype_TSTRING, &wxluatype_wxIcon, &wxluatype_wxClientData, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_AppendItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_AppendItem[1] = {{ wxLua_wxDataViewTreeStore_AppendItem, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxDataViewTreeStore_AppendItem }};
//         const wxString &text, const wxIcon &icon = wxNullIcon, wxClientData *data = NULL );
static int LUACALL wxLua_wxDataViewTreeStore_AppendItem(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxClientData data = NULL
    wxClientData * data = (argCount >= 5 ? (wxClientData *)wxluaT_getuserdatatype(L, 5, wxluatype_wxClientData) : NULL);
    // const wxIcon icon = wxNullIcon
    const wxIcon * icon = (argCount >= 4 ? (const wxIcon *)wxluaT_getuserdatatype(L, 4, wxluatype_wxIcon) : &wxNullIcon);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 3);
    // const wxDataViewItem parent
    const wxDataViewItem * parent = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call AppendItem
    // allocate a new object using the copy constructor
    wxDataViewItem* returns = new wxDataViewItem(self->AppendItem(*parent, text, *icon, data));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItem);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItem);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_DeleteAllItems[] = { &wxluatype_wxDataViewTreeStore, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_DeleteAllItems(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_DeleteAllItems[1] = {{ wxLua_wxDataViewTreeStore_DeleteAllItems, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewTreeStore_DeleteAllItems }};
//     void DeleteAllItems();		// FIXME: segfault
static int LUACALL wxLua_wxDataViewTreeStore_DeleteAllItems(lua_State *L)
{
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call DeleteAllItems
    self->DeleteAllItems();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_DeleteChildren[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_DeleteChildren(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_DeleteChildren[1] = {{ wxLua_wxDataViewTreeStore_DeleteChildren, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewTreeStore_DeleteChildren }};
//     void DeleteChildren( const wxDataViewItem& item );
static int LUACALL wxLua_wxDataViewTreeStore_DeleteChildren(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call DeleteChildren
    self->DeleteChildren(*item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_DeleteItem[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_DeleteItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_DeleteItem[1] = {{ wxLua_wxDataViewTreeStore_DeleteItem, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewTreeStore_DeleteItem }};
//     void DeleteItem( const wxDataViewItem& item );
static int LUACALL wxLua_wxDataViewTreeStore_DeleteItem(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call DeleteItem
    self->DeleteItem(*item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_FindContainerNode[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_FindContainerNode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_FindContainerNode[1] = {{ wxLua_wxDataViewTreeStore_FindContainerNode, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewTreeStore_FindContainerNode }};
//     wxDataViewTreeStoreContainerNode *FindContainerNode( const wxDataViewItem &item ) const;
static int LUACALL wxLua_wxDataViewTreeStore_FindContainerNode(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call FindContainerNode
    wxDataViewTreeStoreContainerNode* returns = (wxDataViewTreeStoreContainerNode*)self->FindContainerNode(*item);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewTreeStoreContainerNode);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_FindNode[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_FindNode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_FindNode[1] = {{ wxLua_wxDataViewTreeStore_FindNode, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewTreeStore_FindNode }};
//     wxDataViewTreeStoreNode *FindNode( const wxDataViewItem &item ) const;
static int LUACALL wxLua_wxDataViewTreeStore_FindNode(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call FindNode
    wxDataViewTreeStoreNode* returns = (wxDataViewTreeStoreNode*)self->FindNode(*item);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewTreeStoreNode);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetChildCount[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_GetChildCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_GetChildCount[1] = {{ wxLua_wxDataViewTreeStore_GetChildCount, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetChildCount }};
//     int GetChildCount( const wxDataViewItem& parent ) const;
static int LUACALL wxLua_wxDataViewTreeStore_GetChildCount(lua_State *L)
{
    // const wxDataViewItem parent
    const wxDataViewItem * parent = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call GetChildCount
    int returns = (self->GetChildCount(*parent));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetItemData[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_GetItemData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_GetItemData[1] = {{ wxLua_wxDataViewTreeStore_GetItemData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetItemData }};
//     wxClientData *GetItemData( const wxDataViewItem& item ) const;
static int LUACALL wxLua_wxDataViewTreeStore_GetItemData(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call GetItemData
    wxClientData* returns = (wxClientData*)self->GetItemData(*item);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxClientData);

    return 1;
}


#if (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetItemExpandedIcon1[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_GetItemExpandedIcon1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_GetItemExpandedIcon1[1] = {{ wxLua_wxDataViewTreeStore_GetItemExpandedIcon1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetItemExpandedIcon1 }};
//     %wxchkver_3_2_0 wxIcon GetItemExpandedIcon( const wxDataViewItem& item ) const;
static int LUACALL wxLua_wxDataViewTreeStore_GetItemExpandedIcon1(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call GetItemExpandedIcon
    // allocate a new object using the copy constructor
    wxIcon* returns = new wxIcon(self->GetItemExpandedIcon(*item));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxIcon);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}

#endif // (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)

#if (((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetItemExpandedIcon[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_GetItemExpandedIcon(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_GetItemExpandedIcon[1] = {{ wxLua_wxDataViewTreeStore_GetItemExpandedIcon, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetItemExpandedIcon }};
//     !%wxchkver_3_2_0 const wxIcon &GetItemExpandedIcon( const wxDataViewItem& item ) const;
static int LUACALL wxLua_wxDataViewTreeStore_GetItemExpandedIcon(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call GetItemExpandedIcon
    const wxIcon* returns = (const wxIcon*)&self->GetItemExpandedIcon(*item);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}

#endif // (((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)

#if (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetItemIcon1[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_GetItemIcon1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_GetItemIcon1[1] = {{ wxLua_wxDataViewTreeStore_GetItemIcon1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetItemIcon1 }};
//     %wxchkver_3_2_0 wxIcon GetItemIcon( const wxDataViewItem& item ) const;
static int LUACALL wxLua_wxDataViewTreeStore_GetItemIcon1(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call GetItemIcon
    // allocate a new object using the copy constructor
    wxIcon* returns = new wxIcon(self->GetItemIcon(*item));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxIcon);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}

#endif // (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)

#if (((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetItemIcon[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_GetItemIcon(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_GetItemIcon[1] = {{ wxLua_wxDataViewTreeStore_GetItemIcon, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetItemIcon }};
//     !%wxchkver_3_2_0 const wxIcon &GetItemIcon( const wxDataViewItem& item ) const;
static int LUACALL wxLua_wxDataViewTreeStore_GetItemIcon(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call GetItemIcon
    const wxIcon* returns = (const wxIcon*)&self->GetItemIcon(*item);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}

#endif // (((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetItemText[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_GetItemText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_GetItemText[1] = {{ wxLua_wxDataViewTreeStore_GetItemText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetItemText }};
//     wxString GetItemText( const wxDataViewItem& item ) const;
static int LUACALL wxLua_wxDataViewTreeStore_GetItemText(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call GetItemText
    wxString returns = (self->GetItemText(*item));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetNthChild[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_GetNthChild(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_GetNthChild[1] = {{ wxLua_wxDataViewTreeStore_GetNthChild, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetNthChild }};
//     wxDataViewItem GetNthChild( const wxDataViewItem& parent, unsigned int pos ) const;
static int LUACALL wxLua_wxDataViewTreeStore_GetNthChild(lua_State *L)
{
    // unsigned int pos
    unsigned int pos = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxDataViewItem parent
    const wxDataViewItem * parent = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call GetNthChild
    // allocate a new object using the copy constructor
    wxDataViewItem* returns = new wxDataViewItem(self->GetNthChild(*parent, pos));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItem);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetRoot[] = { &wxluatype_wxDataViewTreeStore, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_GetRoot(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_GetRoot[1] = {{ wxLua_wxDataViewTreeStore_GetRoot, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetRoot }};
//     wxDataViewTreeStoreNode *GetRoot() const;
static int LUACALL wxLua_wxDataViewTreeStore_GetRoot(lua_State *L)
{
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call GetRoot
    wxDataViewTreeStoreNode* returns = (wxDataViewTreeStoreNode*)self->GetRoot();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewTreeStoreNode);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_InsertContainer[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, &wxluatype_wxDataViewItem, &wxluatype_TSTRING, &wxluatype_wxIcon, &wxluatype_wxIcon, &wxluatype_wxClientData, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_InsertContainer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_InsertContainer[1] = {{ wxLua_wxDataViewTreeStore_InsertContainer, WXLUAMETHOD_METHOD, 4, 7, s_wxluatypeArray_wxLua_wxDataViewTreeStore_InsertContainer }};
//         wxClientData *data = NULL );
static int LUACALL wxLua_wxDataViewTreeStore_InsertContainer(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxClientData data = NULL
    wxClientData * data = (argCount >= 7 ? (wxClientData *)wxluaT_getuserdatatype(L, 7, wxluatype_wxClientData) : NULL);
    // const wxIcon expanded = wxNullIcon
    const wxIcon * expanded = (argCount >= 6 ? (const wxIcon *)wxluaT_getuserdatatype(L, 6, wxluatype_wxIcon) : &wxNullIcon);
    // const wxIcon icon = wxNullIcon
    const wxIcon * icon = (argCount >= 5 ? (const wxIcon *)wxluaT_getuserdatatype(L, 5, wxluatype_wxIcon) : &wxNullIcon);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 4);
    // const wxDataViewItem previous
    const wxDataViewItem * previous = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewItem);
    // const wxDataViewItem parent
    const wxDataViewItem * parent = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call InsertContainer
    // allocate a new object using the copy constructor
    wxDataViewItem* returns = new wxDataViewItem(self->InsertContainer(*parent, *previous, text, *icon, *expanded, data));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItem);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_InsertItem[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, &wxluatype_wxDataViewItem, &wxluatype_TSTRING, &wxluatype_wxIcon, &wxluatype_wxClientData, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_InsertItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_InsertItem[1] = {{ wxLua_wxDataViewTreeStore_InsertItem, WXLUAMETHOD_METHOD, 4, 6, s_wxluatypeArray_wxLua_wxDataViewTreeStore_InsertItem }};
//         const wxString &text, const wxIcon &icon = wxNullIcon, wxClientData *data = NULL );
static int LUACALL wxLua_wxDataViewTreeStore_InsertItem(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxClientData data = NULL
    wxClientData * data = (argCount >= 6 ? (wxClientData *)wxluaT_getuserdatatype(L, 6, wxluatype_wxClientData) : NULL);
    // const wxIcon icon = wxNullIcon
    const wxIcon * icon = (argCount >= 5 ? (const wxIcon *)wxluaT_getuserdatatype(L, 5, wxluatype_wxIcon) : &wxNullIcon);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 4);
    // const wxDataViewItem previous
    const wxDataViewItem * previous = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewItem);
    // const wxDataViewItem parent
    const wxDataViewItem * parent = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call InsertItem
    // allocate a new object using the copy constructor
    wxDataViewItem* returns = new wxDataViewItem(self->InsertItem(*parent, *previous, text, *icon, data));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItem);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_PrependContainer[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, &wxluatype_TSTRING, &wxluatype_wxIcon, &wxluatype_wxIcon, &wxluatype_wxClientData, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_PrependContainer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_PrependContainer[1] = {{ wxLua_wxDataViewTreeStore_PrependContainer, WXLUAMETHOD_METHOD, 3, 6, s_wxluatypeArray_wxLua_wxDataViewTreeStore_PrependContainer }};
//         wxClientData *data = NULL );
static int LUACALL wxLua_wxDataViewTreeStore_PrependContainer(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxClientData data = NULL
    wxClientData * data = (argCount >= 6 ? (wxClientData *)wxluaT_getuserdatatype(L, 6, wxluatype_wxClientData) : NULL);
    // const wxIcon expanded = wxNullIcon
    const wxIcon * expanded = (argCount >= 5 ? (const wxIcon *)wxluaT_getuserdatatype(L, 5, wxluatype_wxIcon) : &wxNullIcon);
    // const wxIcon icon = wxNullIcon
    const wxIcon * icon = (argCount >= 4 ? (const wxIcon *)wxluaT_getuserdatatype(L, 4, wxluatype_wxIcon) : &wxNullIcon);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 3);
    // const wxDataViewItem parent
    const wxDataViewItem * parent = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call PrependContainer
    // allocate a new object using the copy constructor
    wxDataViewItem* returns = new wxDataViewItem(self->PrependContainer(*parent, text, *icon, *expanded, data));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItem);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_PrependItem[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, &wxluatype_TSTRING, &wxluatype_wxIcon, &wxluatype_wxClientData, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_PrependItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_PrependItem[1] = {{ wxLua_wxDataViewTreeStore_PrependItem, WXLUAMETHOD_METHOD, 3, 5, s_wxluatypeArray_wxLua_wxDataViewTreeStore_PrependItem }};
//         const wxString &text, const wxIcon &icon = wxNullIcon, wxClientData *data = NULL );
static int LUACALL wxLua_wxDataViewTreeStore_PrependItem(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxClientData data = NULL
    wxClientData * data = (argCount >= 5 ? (wxClientData *)wxluaT_getuserdatatype(L, 5, wxluatype_wxClientData) : NULL);
    // const wxIcon icon = wxNullIcon
    const wxIcon * icon = (argCount >= 4 ? (const wxIcon *)wxluaT_getuserdatatype(L, 4, wxluatype_wxIcon) : &wxNullIcon);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 3);
    // const wxDataViewItem parent
    const wxDataViewItem * parent = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call PrependItem
    // allocate a new object using the copy constructor
    wxDataViewItem* returns = new wxDataViewItem(self->PrependItem(*parent, text, *icon, data));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItem);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItem);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_SetItemData[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, &wxluatype_wxClientData, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_SetItemData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_SetItemData[1] = {{ wxLua_wxDataViewTreeStore_SetItemData, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewTreeStore_SetItemData }};
//     void SetItemData( const wxDataViewItem& item, wxClientData *data );
static int LUACALL wxLua_wxDataViewTreeStore_SetItemData(lua_State *L)
{
    // wxClientData data
    wxClientData * data = (wxClientData *)wxluaT_getuserdatatype(L, 3, wxluatype_wxClientData);
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call SetItemData
    self->SetItemData(*item, data);

    return 0;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_SetItemExpandedIcon[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, &wxluatype_wxIcon, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_SetItemExpandedIcon(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_SetItemExpandedIcon[1] = {{ wxLua_wxDataViewTreeStore_SetItemExpandedIcon, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewTreeStore_SetItemExpandedIcon }};
//     void SetItemExpandedIcon( const wxDataViewItem& item, const wxIcon &icon );
static int LUACALL wxLua_wxDataViewTreeStore_SetItemExpandedIcon(lua_State *L)
{
    // const wxIcon icon
    const wxIcon * icon = (const wxIcon *)wxluaT_getuserdatatype(L, 3, wxluatype_wxIcon);
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call SetItemExpandedIcon
    self->SetItemExpandedIcon(*item, *icon);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_SetItemIcon[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, &wxluatype_wxIcon, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_SetItemIcon(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_SetItemIcon[1] = {{ wxLua_wxDataViewTreeStore_SetItemIcon, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewTreeStore_SetItemIcon }};
//     void SetItemIcon( const wxDataViewItem& item, const wxIcon &icon );
static int LUACALL wxLua_wxDataViewTreeStore_SetItemIcon(lua_State *L)
{
    // const wxIcon icon
    const wxIcon * icon = (const wxIcon *)wxluaT_getuserdatatype(L, 3, wxluatype_wxIcon);
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call SetItemIcon
    self->SetItemIcon(*item, *icon);

    return 0;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_SetItemText[] = { &wxluatype_wxDataViewTreeStore, &wxluatype_wxDataViewItem, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDataViewTreeStore_SetItemText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_SetItemText[1] = {{ wxLua_wxDataViewTreeStore_SetItemText, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewTreeStore_SetItemText }};
//     void SetItemText( const wxDataViewItem& item, const wxString &text );
static int LUACALL wxLua_wxDataViewTreeStore_SetItemText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 3);
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewTreeStore * self = (wxDataViewTreeStore *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTreeStore);
    // call SetItemText
    self->SetItemText(*item, text);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTreeStore_delete[] = { &wxluatype_wxDataViewTreeStore, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDataViewTreeStore_delete }};

static int LUACALL wxLua_wxDataViewTreeStore_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_constructor[1] = {{ wxLua_wxDataViewTreeStore_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxDataViewTreeStore();
static int LUACALL wxLua_wxDataViewTreeStore_constructor(lua_State *L)
{
    // call constructor
    wxDataViewTreeStore* returns = new wxDataViewTreeStore();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewTreeStore);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewTreeStore);

    return 1;
}




#if ((((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon))||((((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_GetItemExpandedIcon_overload[] =
{

#if (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)
    { wxLua_wxDataViewTreeStore_GetItemExpandedIcon1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetItemExpandedIcon1 },
#endif // (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)

#if (((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)
    { wxLua_wxDataViewTreeStore_GetItemExpandedIcon, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetItemExpandedIcon },
#endif // (((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)
};
static int s_wxluafunc_wxLua_wxDataViewTreeStore_GetItemExpandedIcon_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewTreeStore_GetItemExpandedIcon_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTreeStore_GetItemIcon_overload[] =
{

#if (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)
    { wxLua_wxDataViewTreeStore_GetItemIcon1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetItemIcon1 },
#endif // (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)

#if (((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)
    { wxLua_wxDataViewTreeStore_GetItemIcon, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewTreeStore_GetItemIcon },
#endif // (((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)
};
static int s_wxluafunc_wxLua_wxDataViewTreeStore_GetItemIcon_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewTreeStore_GetItemIcon_overload)/sizeof(wxLuaBindCFunc);

#endif // ((((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon))||((((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon))

// %override wxLua_wxDataViewTreeStore_delete_function
// delete is private in wxDataViewModel, DecRef() it in derived classes
void wxLua_wxDataViewTreeStore_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxDataViewTreeStore>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewTreeStore_methods[] = {
#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)
    { "AppendContainer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_AppendContainer, 1, NULL },
    { "AppendItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_AppendItem, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)

    { "DeleteAllItems", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_DeleteAllItems, 1, NULL },
    { "DeleteChildren", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_DeleteChildren, 1, NULL },
    { "DeleteItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_DeleteItem, 1, NULL },
    { "FindContainerNode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_FindContainerNode, 1, NULL },
    { "FindNode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_FindNode, 1, NULL },
    { "GetChildCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_GetChildCount, 1, NULL },
    { "GetItemData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_GetItemData, 1, NULL },

#if ((((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon))||((((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon))
    { "GetItemExpandedIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_GetItemExpandedIcon_overload, s_wxluafunc_wxLua_wxDataViewTreeStore_GetItemExpandedIcon_overload_count, 0 },
    { "GetItemIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_GetItemIcon_overload, s_wxluafunc_wxLua_wxDataViewTreeStore_GetItemIcon_overload_count, 0 },
#endif // ((((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon))||((((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon))

    { "GetItemText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_GetItemText, 1, NULL },
    { "GetNthChild", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_GetNthChild, 1, NULL },
    { "GetRoot", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_GetRoot, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)
    { "InsertContainer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_InsertContainer, 1, NULL },
    { "InsertItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_InsertItem, 1, NULL },
    { "PrependContainer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_PrependContainer, 1, NULL },
    { "PrependItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_PrependItem, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)

    { "SetItemData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_SetItemData, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)
    { "SetItemExpandedIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_SetItemExpandedIcon, 1, NULL },
    { "SetItemIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_SetItemIcon, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)

    { "SetItemText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTreeStore_SetItemText, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDataViewTreeStore_delete, 1, NULL },
    { "wxDataViewTreeStore", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewTreeStore_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDataViewTreeStore_methodCount = sizeof(wxDataViewTreeStore_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewRenderer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewRenderer'
int wxluatype_wxDataViewRenderer = WXLUA_TUNKNOWN;



void wxLua_wxDataViewRenderer_delete_function(void** p)
{
    wxDataViewRenderer* o = (wxDataViewRenderer*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewRenderer_methods[] = {
    { 0, 0, 0, 0 },
};

int wxDataViewRenderer_methodCount = sizeof(wxDataViewRenderer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxHeaderColumn
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxHeaderColumn'
int wxluatype_wxHeaderColumn = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderColumn_GetAlignment[] = { &wxluatype_wxHeaderColumn, NULL };
static int LUACALL wxLua_wxHeaderColumn_GetAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderColumn_GetAlignment[1] = {{ wxLua_wxHeaderColumn_GetAlignment, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHeaderColumn_GetAlignment }};
//     virtual wxAlignment GetAlignment() const = 0;
static int LUACALL wxLua_wxHeaderColumn_GetAlignment(lua_State *L)
{
    // get this
    wxHeaderColumn * self = (wxHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderColumn);
    // call GetAlignment
    wxAlignment returns = (self->GetAlignment());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderColumn_GetBitmap[] = { &wxluatype_wxHeaderColumn, NULL };
static int LUACALL wxLua_wxHeaderColumn_GetBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderColumn_GetBitmap[1] = {{ wxLua_wxHeaderColumn_GetBitmap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHeaderColumn_GetBitmap }};
//     virtual wxBitmap GetBitmap() const = 0;
static int LUACALL wxLua_wxHeaderColumn_GetBitmap(lua_State *L)
{
    // get this
    wxHeaderColumn * self = (wxHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderColumn);
    // call GetBitmap
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetBitmap());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxBitmap);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderColumn_GetFlags[] = { &wxluatype_wxHeaderColumn, NULL };
static int LUACALL wxLua_wxHeaderColumn_GetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderColumn_GetFlags[1] = {{ wxLua_wxHeaderColumn_GetFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHeaderColumn_GetFlags }};
//     virtual int GetFlags() const = 0;
static int LUACALL wxLua_wxHeaderColumn_GetFlags(lua_State *L)
{
    // get this
    wxHeaderColumn * self = (wxHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderColumn);
    // call GetFlags
    int returns = (self->GetFlags());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderColumn_GetMinWidth[] = { &wxluatype_wxHeaderColumn, NULL };
static int LUACALL wxLua_wxHeaderColumn_GetMinWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderColumn_GetMinWidth[1] = {{ wxLua_wxHeaderColumn_GetMinWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHeaderColumn_GetMinWidth }};
//     virtual int GetMinWidth() const = 0;
static int LUACALL wxLua_wxHeaderColumn_GetMinWidth(lua_State *L)
{
    // get this
    wxHeaderColumn * self = (wxHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderColumn);
    // call GetMinWidth
    int returns = (self->GetMinWidth());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderColumn_GetTitle[] = { &wxluatype_wxHeaderColumn, NULL };
static int LUACALL wxLua_wxHeaderColumn_GetTitle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderColumn_GetTitle[1] = {{ wxLua_wxHeaderColumn_GetTitle, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHeaderColumn_GetTitle }};
//     virtual wxString GetTitle() const = 0;
static int LUACALL wxLua_wxHeaderColumn_GetTitle(lua_State *L)
{
    // get this
    wxHeaderColumn * self = (wxHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderColumn);
    // call GetTitle
    wxString returns = (self->GetTitle());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderColumn_GetWidth[] = { &wxluatype_wxHeaderColumn, NULL };
static int LUACALL wxLua_wxHeaderColumn_GetWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderColumn_GetWidth[1] = {{ wxLua_wxHeaderColumn_GetWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHeaderColumn_GetWidth }};
//     virtual int GetWidth() const = 0;
static int LUACALL wxLua_wxHeaderColumn_GetWidth(lua_State *L)
{
    // get this
    wxHeaderColumn * self = (wxHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderColumn);
    // call GetWidth
    int returns = (self->GetWidth());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderColumn_HasFlag[] = { &wxluatype_wxHeaderColumn, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxHeaderColumn_HasFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderColumn_HasFlag[1] = {{ wxLua_wxHeaderColumn_HasFlag, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxHeaderColumn_HasFlag }};
//     bool HasFlag(int flag) const;
static int LUACALL wxLua_wxHeaderColumn_HasFlag(lua_State *L)
{
    // int flag
    int flag = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxHeaderColumn * self = (wxHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderColumn);
    // call HasFlag
    bool returns = (self->HasFlag(flag));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderColumn_IsHidden[] = { &wxluatype_wxHeaderColumn, NULL };
static int LUACALL wxLua_wxHeaderColumn_IsHidden(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderColumn_IsHidden[1] = {{ wxLua_wxHeaderColumn_IsHidden, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHeaderColumn_IsHidden }};
//     virtual bool IsHidden() const;
static int LUACALL wxLua_wxHeaderColumn_IsHidden(lua_State *L)
{
    // get this
    wxHeaderColumn * self = (wxHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderColumn);
    // call IsHidden
    bool returns = (self->IsHidden());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderColumn_IsReorderable[] = { &wxluatype_wxHeaderColumn, NULL };
static int LUACALL wxLua_wxHeaderColumn_IsReorderable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderColumn_IsReorderable[1] = {{ wxLua_wxHeaderColumn_IsReorderable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHeaderColumn_IsReorderable }};
//     virtual bool IsReorderable() const;
static int LUACALL wxLua_wxHeaderColumn_IsReorderable(lua_State *L)
{
    // get this
    wxHeaderColumn * self = (wxHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderColumn);
    // call IsReorderable
    bool returns = (self->IsReorderable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderColumn_IsResizeable[] = { &wxluatype_wxHeaderColumn, NULL };
static int LUACALL wxLua_wxHeaderColumn_IsResizeable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderColumn_IsResizeable[1] = {{ wxLua_wxHeaderColumn_IsResizeable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHeaderColumn_IsResizeable }};
//     virtual bool IsResizeable() const;
static int LUACALL wxLua_wxHeaderColumn_IsResizeable(lua_State *L)
{
    // get this
    wxHeaderColumn * self = (wxHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderColumn);
    // call IsResizeable
    bool returns = (self->IsResizeable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderColumn_IsShown[] = { &wxluatype_wxHeaderColumn, NULL };
static int LUACALL wxLua_wxHeaderColumn_IsShown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderColumn_IsShown[1] = {{ wxLua_wxHeaderColumn_IsShown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHeaderColumn_IsShown }};
//     bool IsShown() const;
static int LUACALL wxLua_wxHeaderColumn_IsShown(lua_State *L)
{
    // get this
    wxHeaderColumn * self = (wxHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderColumn);
    // call IsShown
    bool returns = (self->IsShown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderColumn_IsSortKey[] = { &wxluatype_wxHeaderColumn, NULL };
static int LUACALL wxLua_wxHeaderColumn_IsSortKey(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderColumn_IsSortKey[1] = {{ wxLua_wxHeaderColumn_IsSortKey, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHeaderColumn_IsSortKey }};
//     virtual bool IsSortKey() const;
static int LUACALL wxLua_wxHeaderColumn_IsSortKey(lua_State *L)
{
    // get this
    wxHeaderColumn * self = (wxHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderColumn);
    // call IsSortKey
    bool returns = (self->IsSortKey());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderColumn_IsSortOrderAscending[] = { &wxluatype_wxHeaderColumn, NULL };
static int LUACALL wxLua_wxHeaderColumn_IsSortOrderAscending(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderColumn_IsSortOrderAscending[1] = {{ wxLua_wxHeaderColumn_IsSortOrderAscending, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHeaderColumn_IsSortOrderAscending }};
//     virtual bool IsSortOrderAscending() const;
static int LUACALL wxLua_wxHeaderColumn_IsSortOrderAscending(lua_State *L)
{
    // get this
    wxHeaderColumn * self = (wxHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderColumn);
    // call IsSortOrderAscending
    bool returns = (self->IsSortOrderAscending());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderColumn_IsSortable[] = { &wxluatype_wxHeaderColumn, NULL };
static int LUACALL wxLua_wxHeaderColumn_IsSortable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderColumn_IsSortable[1] = {{ wxLua_wxHeaderColumn_IsSortable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxHeaderColumn_IsSortable }};
//     virtual bool IsSortable() const
static int LUACALL wxLua_wxHeaderColumn_IsSortable(lua_State *L)
{
    // get this
    wxHeaderColumn * self = (wxHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxHeaderColumn);
    // call IsSortable
    bool returns = (self->IsSortable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxHeaderColumn_delete[] = { &wxluatype_wxHeaderColumn, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxHeaderColumn_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxHeaderColumn_delete }};




void wxLua_wxHeaderColumn_delete_function(void** p)
{
    wxHeaderColumn* o = (wxHeaderColumn*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxHeaderColumn_methods[] = {
    { "GetAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderColumn_GetAlignment, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { "GetBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderColumn_GetBitmap, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)

    { "GetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderColumn_GetFlags, 1, NULL },
    { "GetMinWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderColumn_GetMinWidth, 1, NULL },
    { "GetTitle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderColumn_GetTitle, 1, NULL },
    { "GetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderColumn_GetWidth, 1, NULL },
    { "HasFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderColumn_HasFlag, 1, NULL },
    { "IsHidden", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderColumn_IsHidden, 1, NULL },
    { "IsReorderable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderColumn_IsReorderable, 1, NULL },
    { "IsResizeable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderColumn_IsResizeable, 1, NULL },
    { "IsShown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderColumn_IsShown, 1, NULL },
    { "IsSortKey", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderColumn_IsSortKey, 1, NULL },
    { "IsSortOrderAscending", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderColumn_IsSortOrderAscending, 1, NULL },
    { "IsSortable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxHeaderColumn_IsSortable, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxHeaderColumn_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxHeaderColumn_methodCount = sizeof(wxHeaderColumn_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxSettableHeaderColumn
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxSettableHeaderColumn'
int wxluatype_wxSettableHeaderColumn = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxSettableHeaderColumn_ChangeFlag[] = { &wxluatype_wxSettableHeaderColumn, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSettableHeaderColumn_ChangeFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSettableHeaderColumn_ChangeFlag[1] = {{ wxLua_wxSettableHeaderColumn_ChangeFlag, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxSettableHeaderColumn_ChangeFlag }};
//     void ChangeFlag(int flag, bool set);
static int LUACALL wxLua_wxSettableHeaderColumn_ChangeFlag(lua_State *L)
{
    // bool set
    bool set = wxlua_getbooleantype(L, 3);
    // int flag
    int flag = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSettableHeaderColumn * self = (wxSettableHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSettableHeaderColumn);
    // call ChangeFlag
    self->ChangeFlag(flag, set);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSettableHeaderColumn_ClearFlag[] = { &wxluatype_wxSettableHeaderColumn, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSettableHeaderColumn_ClearFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSettableHeaderColumn_ClearFlag[1] = {{ wxLua_wxSettableHeaderColumn_ClearFlag, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSettableHeaderColumn_ClearFlag }};
//     void ClearFlag(int flag);
static int LUACALL wxLua_wxSettableHeaderColumn_ClearFlag(lua_State *L)
{
    // int flag
    int flag = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSettableHeaderColumn * self = (wxSettableHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSettableHeaderColumn);
    // call ClearFlag
    self->ClearFlag(flag);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetAlignment[] = { &wxluatype_wxSettableHeaderColumn, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxSettableHeaderColumn_SetAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSettableHeaderColumn_SetAlignment[1] = {{ wxLua_wxSettableHeaderColumn_SetAlignment, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetAlignment }};
//     virtual void SetAlignment(wxAlignment align) = 0;
static int LUACALL wxLua_wxSettableHeaderColumn_SetAlignment(lua_State *L)
{
    // wxAlignment align
    wxAlignment align = (wxAlignment)wxlua_getenumtype(L, 2);
    // get this
    wxSettableHeaderColumn * self = (wxSettableHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSettableHeaderColumn);
    // call SetAlignment
    self->SetAlignment(align);

    return 0;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetBitmap[] = { &wxluatype_wxSettableHeaderColumn, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxSettableHeaderColumn_SetBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSettableHeaderColumn_SetBitmap[1] = {{ wxLua_wxSettableHeaderColumn_SetBitmap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetBitmap }};
//     virtual void SetBitmap(const wxBitmap& bitmap) = 0;
static int LUACALL wxLua_wxSettableHeaderColumn_SetBitmap(lua_State *L)
{
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxSettableHeaderColumn * self = (wxSettableHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSettableHeaderColumn);
    // call SetBitmap
    self->SetBitmap(*bitmap);

    return 0;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetFlag[] = { &wxluatype_wxSettableHeaderColumn, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSettableHeaderColumn_SetFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSettableHeaderColumn_SetFlag[1] = {{ wxLua_wxSettableHeaderColumn_SetFlag, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetFlag }};
//     void SetFlag(int flag);
static int LUACALL wxLua_wxSettableHeaderColumn_SetFlag(lua_State *L)
{
    // int flag
    int flag = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSettableHeaderColumn * self = (wxSettableHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSettableHeaderColumn);
    // call SetFlag
    self->SetFlag(flag);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetFlags[] = { &wxluatype_wxSettableHeaderColumn, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSettableHeaderColumn_SetFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSettableHeaderColumn_SetFlags[1] = {{ wxLua_wxSettableHeaderColumn_SetFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetFlags }};
//     virtual void SetFlags(int flags) = 0;
static int LUACALL wxLua_wxSettableHeaderColumn_SetFlags(lua_State *L)
{
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSettableHeaderColumn * self = (wxSettableHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSettableHeaderColumn);
    // call SetFlags
    self->SetFlags(flags);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetHidden[] = { &wxluatype_wxSettableHeaderColumn, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSettableHeaderColumn_SetHidden(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSettableHeaderColumn_SetHidden[1] = {{ wxLua_wxSettableHeaderColumn_SetHidden, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetHidden }};
//     virtual void SetHidden(bool hidden);
static int LUACALL wxLua_wxSettableHeaderColumn_SetHidden(lua_State *L)
{
    // bool hidden
    bool hidden = wxlua_getbooleantype(L, 2);
    // get this
    wxSettableHeaderColumn * self = (wxSettableHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSettableHeaderColumn);
    // call SetHidden
    self->SetHidden(hidden);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetMinWidth[] = { &wxluatype_wxSettableHeaderColumn, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSettableHeaderColumn_SetMinWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSettableHeaderColumn_SetMinWidth[1] = {{ wxLua_wxSettableHeaderColumn_SetMinWidth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetMinWidth }};
//     virtual void SetMinWidth(int minWidth) = 0;
static int LUACALL wxLua_wxSettableHeaderColumn_SetMinWidth(lua_State *L)
{
    // int minWidth
    int minWidth = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSettableHeaderColumn * self = (wxSettableHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSettableHeaderColumn);
    // call SetMinWidth
    self->SetMinWidth(minWidth);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetReorderable[] = { &wxluatype_wxSettableHeaderColumn, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSettableHeaderColumn_SetReorderable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSettableHeaderColumn_SetReorderable[1] = {{ wxLua_wxSettableHeaderColumn_SetReorderable, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetReorderable }};
//     virtual void SetReorderable(bool reorderable);
static int LUACALL wxLua_wxSettableHeaderColumn_SetReorderable(lua_State *L)
{
    // bool reorderable
    bool reorderable = wxlua_getbooleantype(L, 2);
    // get this
    wxSettableHeaderColumn * self = (wxSettableHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSettableHeaderColumn);
    // call SetReorderable
    self->SetReorderable(reorderable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetResizeable[] = { &wxluatype_wxSettableHeaderColumn, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSettableHeaderColumn_SetResizeable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSettableHeaderColumn_SetResizeable[1] = {{ wxLua_wxSettableHeaderColumn_SetResizeable, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetResizeable }};
//     virtual void SetResizeable(bool resizable);
static int LUACALL wxLua_wxSettableHeaderColumn_SetResizeable(lua_State *L)
{
    // bool resizable
    bool resizable = wxlua_getbooleantype(L, 2);
    // get this
    wxSettableHeaderColumn * self = (wxSettableHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSettableHeaderColumn);
    // call SetResizeable
    self->SetResizeable(resizable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetSortOrder[] = { &wxluatype_wxSettableHeaderColumn, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSettableHeaderColumn_SetSortOrder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSettableHeaderColumn_SetSortOrder[1] = {{ wxLua_wxSettableHeaderColumn_SetSortOrder, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetSortOrder }};
//     virtual void SetSortOrder(bool ascending) = 0;
static int LUACALL wxLua_wxSettableHeaderColumn_SetSortOrder(lua_State *L)
{
    // bool ascending
    bool ascending = wxlua_getbooleantype(L, 2);
    // get this
    wxSettableHeaderColumn * self = (wxSettableHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSettableHeaderColumn);
    // call SetSortOrder
    self->SetSortOrder(ascending);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetSortable[] = { &wxluatype_wxSettableHeaderColumn, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxSettableHeaderColumn_SetSortable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSettableHeaderColumn_SetSortable[1] = {{ wxLua_wxSettableHeaderColumn_SetSortable, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetSortable }};
//     virtual void SetSortable(bool sortable);
static int LUACALL wxLua_wxSettableHeaderColumn_SetSortable(lua_State *L)
{
    // bool sortable
    bool sortable = wxlua_getbooleantype(L, 2);
    // get this
    wxSettableHeaderColumn * self = (wxSettableHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSettableHeaderColumn);
    // call SetSortable
    self->SetSortable(sortable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetTitle[] = { &wxluatype_wxSettableHeaderColumn, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxSettableHeaderColumn_SetTitle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSettableHeaderColumn_SetTitle[1] = {{ wxLua_wxSettableHeaderColumn_SetTitle, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetTitle }};
//     virtual void SetTitle(const wxString& title) = 0;
static int LUACALL wxLua_wxSettableHeaderColumn_SetTitle(lua_State *L)
{
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 2);
    // get this
    wxSettableHeaderColumn * self = (wxSettableHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSettableHeaderColumn);
    // call SetTitle
    self->SetTitle(title);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetWidth[] = { &wxluatype_wxSettableHeaderColumn, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSettableHeaderColumn_SetWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSettableHeaderColumn_SetWidth[1] = {{ wxLua_wxSettableHeaderColumn_SetWidth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSettableHeaderColumn_SetWidth }};
//     virtual void SetWidth(int width) = 0;
static int LUACALL wxLua_wxSettableHeaderColumn_SetWidth(lua_State *L)
{
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSettableHeaderColumn * self = (wxSettableHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSettableHeaderColumn);
    // call SetWidth
    self->SetWidth(width);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSettableHeaderColumn_ToggleFlag[] = { &wxluatype_wxSettableHeaderColumn, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxSettableHeaderColumn_ToggleFlag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSettableHeaderColumn_ToggleFlag[1] = {{ wxLua_wxSettableHeaderColumn_ToggleFlag, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxSettableHeaderColumn_ToggleFlag }};
//     void ToggleFlag(int flag);
static int LUACALL wxLua_wxSettableHeaderColumn_ToggleFlag(lua_State *L)
{
    // int flag
    int flag = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxSettableHeaderColumn * self = (wxSettableHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSettableHeaderColumn);
    // call ToggleFlag
    self->ToggleFlag(flag);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSettableHeaderColumn_ToggleSortOrder[] = { &wxluatype_wxSettableHeaderColumn, NULL };
static int LUACALL wxLua_wxSettableHeaderColumn_ToggleSortOrder(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSettableHeaderColumn_ToggleSortOrder[1] = {{ wxLua_wxSettableHeaderColumn_ToggleSortOrder, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSettableHeaderColumn_ToggleSortOrder }};
//     void ToggleSortOrder();
static int LUACALL wxLua_wxSettableHeaderColumn_ToggleSortOrder(lua_State *L)
{
    // get this
    wxSettableHeaderColumn * self = (wxSettableHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSettableHeaderColumn);
    // call ToggleSortOrder
    self->ToggleSortOrder();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxSettableHeaderColumn_UnsetAsSortKey[] = { &wxluatype_wxSettableHeaderColumn, NULL };
static int LUACALL wxLua_wxSettableHeaderColumn_UnsetAsSortKey(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxSettableHeaderColumn_UnsetAsSortKey[1] = {{ wxLua_wxSettableHeaderColumn_UnsetAsSortKey, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxSettableHeaderColumn_UnsetAsSortKey }};
//     virtual void UnsetAsSortKey();
static int LUACALL wxLua_wxSettableHeaderColumn_UnsetAsSortKey(lua_State *L)
{
    // get this
    wxSettableHeaderColumn * self = (wxSettableHeaderColumn *)wxluaT_getuserdatatype(L, 1, wxluatype_wxSettableHeaderColumn);
    // call UnsetAsSortKey
    self->UnsetAsSortKey();

    return 0;
}




void wxLua_wxSettableHeaderColumn_delete_function(void** p)
{
    wxSettableHeaderColumn* o = (wxSettableHeaderColumn*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxSettableHeaderColumn_methods[] = {
    { "ChangeFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSettableHeaderColumn_ChangeFlag, 1, NULL },
    { "ClearFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSettableHeaderColumn_ClearFlag, 1, NULL },
    { "SetAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSettableHeaderColumn_SetAlignment, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { "SetBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSettableHeaderColumn_SetBitmap, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)

    { "SetFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSettableHeaderColumn_SetFlag, 1, NULL },
    { "SetFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSettableHeaderColumn_SetFlags, 1, NULL },
    { "SetHidden", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSettableHeaderColumn_SetHidden, 1, NULL },
    { "SetMinWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSettableHeaderColumn_SetMinWidth, 1, NULL },
    { "SetReorderable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSettableHeaderColumn_SetReorderable, 1, NULL },
    { "SetResizeable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSettableHeaderColumn_SetResizeable, 1, NULL },
    { "SetSortOrder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSettableHeaderColumn_SetSortOrder, 1, NULL },
    { "SetSortable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSettableHeaderColumn_SetSortable, 1, NULL },
    { "SetTitle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSettableHeaderColumn_SetTitle, 1, NULL },
    { "SetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSettableHeaderColumn_SetWidth, 1, NULL },
    { "ToggleFlag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSettableHeaderColumn_ToggleFlag, 1, NULL },
    { "ToggleSortOrder", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSettableHeaderColumn_ToggleSortOrder, 1, NULL },
    { "UnsetAsSortKey", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxSettableHeaderColumn_UnsetAsSortKey, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxSettableHeaderColumn_methodCount = sizeof(wxSettableHeaderColumn_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewColumnBase
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewColumnBase'
int wxluatype_wxDataViewColumnBase = WXLUA_TUNKNOWN;

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewColumnBase_GetBitmap[] = { &wxluatype_wxDataViewColumnBase, NULL };
static int LUACALL wxLua_wxDataViewColumnBase_GetBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewColumnBase_GetBitmap[1] = {{ wxLua_wxDataViewColumnBase_GetBitmap, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewColumnBase_GetBitmap }};
//     virtual wxBitmap GetBitmap() const;
static int LUACALL wxLua_wxDataViewColumnBase_GetBitmap(lua_State *L)
{
    // get this
    wxDataViewColumnBase * self = (wxDataViewColumnBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewColumnBase);
    // call GetBitmap
    // allocate a new object using the copy constructor
    wxBitmap* returns = new wxBitmap(self->GetBitmap());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxBitmap);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxBitmap);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewColumnBase_GetModelColumn[] = { &wxluatype_wxDataViewColumnBase, NULL };
static int LUACALL wxLua_wxDataViewColumnBase_GetModelColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewColumnBase_GetModelColumn[1] = {{ wxLua_wxDataViewColumnBase_GetModelColumn, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewColumnBase_GetModelColumn }};
//     unsigned int GetModelColumn() const;
static int LUACALL wxLua_wxDataViewColumnBase_GetModelColumn(lua_State *L)
{
    // get this
    wxDataViewColumnBase * self = (wxDataViewColumnBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewColumnBase);
    // call GetModelColumn
    unsigned int returns = (self->GetModelColumn());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewColumnBase_GetOwner[] = { &wxluatype_wxDataViewColumnBase, NULL };
static int LUACALL wxLua_wxDataViewColumnBase_GetOwner(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewColumnBase_GetOwner[1] = {{ wxLua_wxDataViewColumnBase_GetOwner, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewColumnBase_GetOwner }};
//     wxDataViewCtrl *GetOwner() const;
static int LUACALL wxLua_wxDataViewColumnBase_GetOwner(lua_State *L)
{
    // get this
    wxDataViewColumnBase * self = (wxDataViewColumnBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewColumnBase);
    // call GetOwner
    wxDataViewCtrl* returns = (wxDataViewCtrl*)self->GetOwner();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewCtrl);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewColumnBase_GetRenderer[] = { &wxluatype_wxDataViewColumnBase, NULL };
static int LUACALL wxLua_wxDataViewColumnBase_GetRenderer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewColumnBase_GetRenderer[1] = {{ wxLua_wxDataViewColumnBase_GetRenderer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewColumnBase_GetRenderer }};
//     wxDataViewRenderer* GetRenderer() const;
static int LUACALL wxLua_wxDataViewColumnBase_GetRenderer(lua_State *L)
{
    // get this
    wxDataViewColumnBase * self = (wxDataViewColumnBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewColumnBase);
    // call GetRenderer
    wxDataViewRenderer* returns = (wxDataViewRenderer*)self->GetRenderer();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewRenderer);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewColumnBase_SetBitmap[] = { &wxluatype_wxDataViewColumnBase, &wxluatype_wxBitmap, NULL };
static int LUACALL wxLua_wxDataViewColumnBase_SetBitmap(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewColumnBase_SetBitmap[1] = {{ wxLua_wxDataViewColumnBase_SetBitmap, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewColumnBase_SetBitmap }};
//     virtual void SetBitmap(const wxBitmap& bitmap);
static int LUACALL wxLua_wxDataViewColumnBase_SetBitmap(lua_State *L)
{
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxDataViewColumnBase * self = (wxDataViewColumnBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewColumnBase);
    // call SetBitmap
    self->SetBitmap(*bitmap);

    return 0;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewColumnBase_SetOwner[] = { &wxluatype_wxDataViewColumnBase, &wxluatype_wxDataViewCtrl, NULL };
static int LUACALL wxLua_wxDataViewColumnBase_SetOwner(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewColumnBase_SetOwner[1] = {{ wxLua_wxDataViewColumnBase_SetOwner, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewColumnBase_SetOwner }};
//     virtual void SetOwner(wxDataViewCtrl *owner) %ungc_this;	// NOTE: valid owner must be presented
static int LUACALL wxLua_wxDataViewColumnBase_SetOwner(lua_State *L)
{
    // wxDataViewCtrl owner
    wxDataViewCtrl * owner = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewCtrl);
    // get this
    wxDataViewColumnBase * self = (wxDataViewColumnBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewColumnBase);
    // call SetOwner
    self->SetOwner(owner);

    return 0;
}




void wxLua_wxDataViewColumnBase_delete_function(void** p)
{
    wxDataViewColumnBase* o = (wxDataViewColumnBase*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewColumnBase_methods[] = {
#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { "GetBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewColumnBase_GetBitmap, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)

    { "GetModelColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewColumnBase_GetModelColumn, 1, NULL },
    { "GetOwner", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewColumnBase_GetOwner, 1, NULL },
    { "GetRenderer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewColumnBase_GetRenderer, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { "SetBitmap", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewColumnBase_SetBitmap, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)

    { "SetOwner", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewColumnBase_SetOwner, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDataViewColumnBase_methodCount = sizeof(wxDataViewColumnBase_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewColumn
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewColumn'
int wxluatype_wxDataViewColumn = WXLUA_TUNKNOWN;

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewColumn_constructor1[] = { &wxluatype_wxBitmap, &wxluatype_wxDataViewRenderer, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewColumn_constructor1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewColumn_constructor1[1] = {{ wxLua_wxDataViewColumn_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 6, s_wxluatypeArray_wxLua_wxDataViewColumn_constructor1 }};
//                       int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewColumn_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_CENTER
    wxAlignment align = (argCount >= 5 ? (wxAlignment)wxlua_getenumtype(L, 5) : wxALIGN_CENTER);
    // int width = wxDVC_DEFAULT_WIDTH
    int width = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxDVC_DEFAULT_WIDTH);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // wxDataViewRenderer renderer
    wxDataViewRenderer * renderer = (wxDataViewRenderer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewRenderer);
    // const wxBitmap bitmap
    const wxBitmap * bitmap = (const wxBitmap *)wxluaT_getuserdatatype(L, 1, wxluatype_wxBitmap);
    // call constructor
    wxDataViewColumn* returns = new wxDataViewColumn(*bitmap, renderer, model_column, width, align, flags);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewColumn_constructor[] = { &wxluatype_TSTRING, &wxluatype_wxDataViewRenderer, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewColumn_constructor(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewColumn_constructor[1] = {{ wxLua_wxDataViewColumn_constructor, WXLUAMETHOD_CONSTRUCTOR, 3, 6, s_wxluatypeArray_wxLua_wxDataViewColumn_constructor }};
//                       int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewColumn_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_CENTER
    wxAlignment align = (argCount >= 5 ? (wxAlignment)wxlua_getenumtype(L, 5) : wxALIGN_CENTER);
    // int width = wxDVC_DEFAULT_WIDTH
    int width = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxDVC_DEFAULT_WIDTH);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // wxDataViewRenderer renderer
    wxDataViewRenderer * renderer = (wxDataViewRenderer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewRenderer);
    // const wxString title
    const wxString title = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxDataViewColumn* returns = new wxDataViewColumn(title, renderer, model_column, width, align, flags);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}




#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewColumn_constructor_overload[] =
{

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewColumn_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 6, s_wxluatypeArray_wxLua_wxDataViewColumn_constructor1 },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewColumn_constructor, WXLUAMETHOD_CONSTRUCTOR, 3, 6, s_wxluatypeArray_wxLua_wxDataViewColumn_constructor },
};
static int s_wxluafunc_wxLua_wxDataViewColumn_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewColumn_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

void wxLua_wxDataViewColumn_delete_function(void** p)
{
    wxDataViewColumn* o = (wxDataViewColumn*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewColumn_methods[] = {
#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
    { "wxDataViewColumn", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewColumn_constructor_overload, s_wxluafunc_wxLua_wxDataViewColumn_constructor_overload_count, 0 },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

    { 0, 0, 0, 0 },
};

int wxDataViewColumn_methodCount = sizeof(wxDataViewColumn_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewCtrlBase
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewCtrlBase'
int wxluatype_wxDataViewCtrlBase = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AllowMultiColumnSort[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_AllowMultiColumnSort(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_AllowMultiColumnSort[1] = {{ wxLua_wxDataViewCtrlBase_AllowMultiColumnSort, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AllowMultiColumnSort }};
//     virtual bool AllowMultiColumnSort(bool allow);
static int LUACALL wxLua_wxDataViewCtrlBase_AllowMultiColumnSort(lua_State *L)
{
    // bool allow
    bool allow = wxlua_getbooleantype(L, 2);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call AllowMultiColumnSort
    bool returns = (self->AllowMultiColumnSort(allow));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendBitmapColumn1[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxBitmap, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_AppendBitmapColumn1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendBitmapColumn1[1] = {{ wxLua_wxDataViewCtrlBase_AppendBitmapColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendBitmapColumn1 }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_AppendBitmapColumn1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_CENTER
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_CENTER);
    // int width = -1
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_INERT);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxBitmap label
    const wxBitmap * label = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call AppendBitmapColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->AppendBitmapColumn(*label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendBitmapColumn[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_AppendBitmapColumn(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendBitmapColumn[1] = {{ wxLua_wxDataViewCtrlBase_AppendBitmapColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendBitmapColumn }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_AppendBitmapColumn(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_CENTER
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_CENTER);
    // int width = -1
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_INERT);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call AppendBitmapColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->AppendBitmapColumn(label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendColumn[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewColumn, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_AppendColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendColumn[1] = {{ wxLua_wxDataViewCtrlBase_AppendColumn, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendColumn }};
//     virtual bool AppendColumn(%ungc wxDataViewColumn *col );
static int LUACALL wxLua_wxDataViewCtrlBase_AppendColumn(lua_State *L)
{
    // wxDataViewColumn col
    wxDataViewColumn * col = (wxDataViewColumn *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewColumn);
    if (wxluaO_isgcobject(L, col)) wxluaO_undeletegcobject(L, col);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call AppendColumn
    bool returns = (self->AppendColumn(col));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendDateColumn1[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxBitmap, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_AppendDateColumn1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendDateColumn1[1] = {{ wxLua_wxDataViewCtrlBase_AppendDateColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendDateColumn1 }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_AppendDateColumn1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_NOT
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_NOT);
    // int width = -1
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_ACTIVATABLE
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_ACTIVATABLE);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxBitmap label
    const wxBitmap * label = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call AppendDateColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->AppendDateColumn(*label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendDateColumn[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_AppendDateColumn(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendDateColumn[1] = {{ wxLua_wxDataViewCtrlBase_AppendDateColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendDateColumn }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_AppendDateColumn(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_NOT
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_NOT);
    // int width = -1
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_ACTIVATABLE
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_ACTIVATABLE);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call AppendDateColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->AppendDateColumn(label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendIconTextColumn1[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxBitmap, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_AppendIconTextColumn1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendIconTextColumn1[1] = {{ wxLua_wxDataViewCtrlBase_AppendIconTextColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendIconTextColumn1 }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_AppendIconTextColumn1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_NOT
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_NOT);
    // int width = -1
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_INERT);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxBitmap label
    const wxBitmap * label = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call AppendIconTextColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->AppendIconTextColumn(*label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendIconTextColumn[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_AppendIconTextColumn(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendIconTextColumn[1] = {{ wxLua_wxDataViewCtrlBase_AppendIconTextColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendIconTextColumn }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_AppendIconTextColumn(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_NOT
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_NOT);
    // int width = -1
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_INERT);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call AppendIconTextColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->AppendIconTextColumn(label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendProgressColumn1[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxBitmap, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_AppendProgressColumn1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendProgressColumn1[1] = {{ wxLua_wxDataViewCtrlBase_AppendProgressColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendProgressColumn1 }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_AppendProgressColumn1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_CENTER
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_CENTER);
    // int width = wxDVC_DEFAULT_WIDTH
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxDVC_DEFAULT_WIDTH);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_INERT);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxBitmap label
    const wxBitmap * label = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call AppendProgressColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->AppendProgressColumn(*label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendProgressColumn[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_AppendProgressColumn(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendProgressColumn[1] = {{ wxLua_wxDataViewCtrlBase_AppendProgressColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendProgressColumn }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_AppendProgressColumn(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_CENTER
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_CENTER);
    // int width = wxDVC_DEFAULT_WIDTH
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxDVC_DEFAULT_WIDTH);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_INERT);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call AppendProgressColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->AppendProgressColumn(label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendTextColumn1[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxBitmap, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_AppendTextColumn1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendTextColumn1[1] = {{ wxLua_wxDataViewCtrlBase_AppendTextColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendTextColumn1 }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_AppendTextColumn1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_NOT
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_NOT);
    // int width = -1
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_INERT);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxBitmap label
    const wxBitmap * label = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call AppendTextColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->AppendTextColumn(*label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendTextColumn[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_AppendTextColumn(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendTextColumn[1] = {{ wxLua_wxDataViewCtrlBase_AppendTextColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendTextColumn }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_AppendTextColumn(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_NOT
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_NOT);
    // int width = -1
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_INERT);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call AppendTextColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->AppendTextColumn(label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendToggleColumn1[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxBitmap, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_AppendToggleColumn1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendToggleColumn1[1] = {{ wxLua_wxDataViewCtrlBase_AppendToggleColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendToggleColumn1 }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_AppendToggleColumn1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_CENTER
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_CENTER);
    // int width = wxDVC_TOGGLE_DEFAULT_WIDTH
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxDVC_TOGGLE_DEFAULT_WIDTH);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_INERT);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxBitmap label
    const wxBitmap * label = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call AppendToggleColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->AppendToggleColumn(*label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendToggleColumn[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_AppendToggleColumn(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendToggleColumn[1] = {{ wxLua_wxDataViewCtrlBase_AppendToggleColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendToggleColumn }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_AppendToggleColumn(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_CENTER
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_CENTER);
    // int width = wxDVC_TOGGLE_DEFAULT_WIDTH
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxDVC_TOGGLE_DEFAULT_WIDTH);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_INERT);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call AppendToggleColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->AppendToggleColumn(label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AssociateModel[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewModel, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_AssociateModel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_AssociateModel[1] = {{ wxLua_wxDataViewCtrlBase_AssociateModel, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AssociateModel }};
//     virtual bool AssociateModel( wxDataViewModel *model );
static int LUACALL wxLua_wxDataViewCtrlBase_AssociateModel(lua_State *L)
{
    // wxDataViewModel model
    wxDataViewModel * model = (wxDataViewModel *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewModel);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call AssociateModel
    bool returns = (self->AssociateModel(model));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_ClearColumns[] = { &wxluatype_wxDataViewCtrlBase, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_ClearColumns(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_ClearColumns[1] = {{ wxLua_wxDataViewCtrlBase_ClearColumns, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_ClearColumns }};
//     virtual bool ClearColumns() = 0;
static int LUACALL wxLua_wxDataViewCtrlBase_ClearColumns(lua_State *L)
{
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call ClearColumns
    bool returns = (self->ClearColumns());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_Collapse[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_Collapse(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_Collapse[1] = {{ wxLua_wxDataViewCtrlBase_Collapse, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_Collapse }};
//     virtual void Collapse( const wxDataViewItem & item ) = 0;
static int LUACALL wxLua_wxDataViewCtrlBase_Collapse(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call Collapse
    self->Collapse(*item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_DeleteColumn[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewColumn, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_DeleteColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_DeleteColumn[1] = {{ wxLua_wxDataViewCtrlBase_DeleteColumn, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_DeleteColumn }};
//     virtual bool DeleteColumn( wxDataViewColumn *column ) = 0;
static int LUACALL wxLua_wxDataViewCtrlBase_DeleteColumn(lua_State *L)
{
    // wxDataViewColumn column
    wxDataViewColumn * column = (wxDataViewColumn *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewColumn);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call DeleteColumn
    bool returns = (self->DeleteColumn(column));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_EditItem[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewItem, &wxluatype_wxDataViewColumn, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_EditItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_EditItem[1] = {{ wxLua_wxDataViewCtrlBase_EditItem, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_EditItem }};
//     virtual void EditItem(const wxDataViewItem& item, const wxDataViewColumn *column) = 0;
static int LUACALL wxLua_wxDataViewCtrlBase_EditItem(lua_State *L)
{
    // const wxDataViewColumn column
    const wxDataViewColumn * column = (const wxDataViewColumn *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewColumn);
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call EditItem
    self->EditItem(*item, column);

    return 0;
}


#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_EnableDragSource[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataFormat, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_EnableDragSource(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_EnableDragSource[1] = {{ wxLua_wxDataViewCtrlBase_EnableDragSource, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_EnableDragSource }};
//     virtual bool EnableDragSource(const wxDataFormat& format);
static int LUACALL wxLua_wxDataViewCtrlBase_EnableDragSource(lua_State *L)
{
    // const wxDataFormat format
    const wxDataFormat * format = (const wxDataFormat *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataFormat);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call EnableDragSource
    bool returns = (self->EnableDragSource(*format));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_EnableDropTarget[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataFormat, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_EnableDropTarget(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_EnableDropTarget[1] = {{ wxLua_wxDataViewCtrlBase_EnableDropTarget, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_EnableDropTarget }};
//     virtual bool EnableDropTarget(const wxDataFormat& format);
static int LUACALL wxLua_wxDataViewCtrlBase_EnableDropTarget(lua_State *L)
{
    // const wxDataFormat format
    const wxDataFormat * format = (const wxDataFormat *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataFormat);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call EnableDropTarget
    bool returns = (self->EnableDropTarget(*format));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_EnsureVisible[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewItem, &wxluatype_wxDataViewColumn, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_EnsureVisible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_EnsureVisible[1] = {{ wxLua_wxDataViewCtrlBase_EnsureVisible, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_EnsureVisible }};
//     virtual void EnsureVisible( const wxDataViewItem & item, const wxDataViewColumn *column = NULL ) = 0;
static int LUACALL wxLua_wxDataViewCtrlBase_EnsureVisible(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxDataViewColumn column = NULL
    const wxDataViewColumn * column = (argCount >= 3 ? (const wxDataViewColumn *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewColumn) : NULL);
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call EnsureVisible
    self->EnsureVisible(*item, column);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_Expand[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_Expand(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_Expand[1] = {{ wxLua_wxDataViewCtrlBase_Expand, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_Expand }};
//     void Expand( const wxDataViewItem & item );
static int LUACALL wxLua_wxDataViewCtrlBase_Expand(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call Expand
    self->Expand(*item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_ExpandAncestors[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_ExpandAncestors(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_ExpandAncestors[1] = {{ wxLua_wxDataViewCtrlBase_ExpandAncestors, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_ExpandAncestors }};
//     void ExpandAncestors( const wxDataViewItem & item );
static int LUACALL wxLua_wxDataViewCtrlBase_ExpandAncestors(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call ExpandAncestors
    self->ExpandAncestors(*item);

    return 0;
}


#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,1,5))) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_ExpandChildren[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_ExpandChildren(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_ExpandChildren[1] = {{ wxLua_wxDataViewCtrlBase_ExpandChildren, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_ExpandChildren }};
//     %wxchkver_3_1_5 void ExpandChildren( const wxDataViewItem & item );
static int LUACALL wxLua_wxDataViewCtrlBase_ExpandChildren(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call ExpandChildren
    self->ExpandChildren(*item);

    return 0;
}

#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,1,5))) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetClassDefaultAttributes[] = { &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_GetClassDefaultAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_GetClassDefaultAttributes[1] = {{ wxLua_wxDataViewCtrlBase_GetClassDefaultAttributes, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 1, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetClassDefaultAttributes }};
//     static wxVisualAttributes GetClassDefaultAttributes(wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL);
static int LUACALL wxLua_wxDataViewCtrlBase_GetClassDefaultAttributes(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    wxWindowVariant variant = (argCount >= 1 ? (wxWindowVariant)wxlua_getenumtype(L, 1) : wxWINDOW_VARIANT_NORMAL);
    // call GetClassDefaultAttributes
    // allocate a new object using the copy constructor
    wxVisualAttributes* returns = new wxVisualAttributes(wxDataViewCtrlBase::GetClassDefaultAttributes(variant));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxVisualAttributes);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxVisualAttributes);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetColumn[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_GetColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_GetColumn[1] = {{ wxLua_wxDataViewCtrlBase_GetColumn, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetColumn }};
//     virtual wxDataViewColumn* GetColumn( unsigned int pos ) const = 0;
static int LUACALL wxLua_wxDataViewCtrlBase_GetColumn(lua_State *L)
{
    // unsigned int pos
    unsigned int pos = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call GetColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->GetColumn(pos);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetColumnCount[] = { &wxluatype_wxDataViewCtrlBase, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_GetColumnCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_GetColumnCount[1] = {{ wxLua_wxDataViewCtrlBase_GetColumnCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetColumnCount }};
//     virtual unsigned int GetColumnCount() const = 0;
static int LUACALL wxLua_wxDataViewCtrlBase_GetColumnCount(lua_State *L)
{
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call GetColumnCount
    unsigned int returns = (self->GetColumnCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetColumnPosition[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewColumn, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_GetColumnPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_GetColumnPosition[1] = {{ wxLua_wxDataViewCtrlBase_GetColumnPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetColumnPosition }};
//     virtual int GetColumnPosition(const wxDataViewColumn *column ) const = 0;
static int LUACALL wxLua_wxDataViewCtrlBase_GetColumnPosition(lua_State *L)
{
    // const wxDataViewColumn column
    const wxDataViewColumn * column = (const wxDataViewColumn *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewColumn);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call GetColumnPosition
    int returns = (self->GetColumnPosition(column));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetCountPerPage[] = { &wxluatype_wxDataViewCtrlBase, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_GetCountPerPage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_GetCountPerPage[1] = {{ wxLua_wxDataViewCtrlBase_GetCountPerPage, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetCountPerPage }};
//     virtual int GetCountPerPage() const;
static int LUACALL wxLua_wxDataViewCtrlBase_GetCountPerPage(lua_State *L)
{
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call GetCountPerPage
    int returns = (self->GetCountPerPage());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetCurrentColumn[] = { &wxluatype_wxDataViewCtrlBase, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_GetCurrentColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_GetCurrentColumn[1] = {{ wxLua_wxDataViewCtrlBase_GetCurrentColumn, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetCurrentColumn }};
//     virtual wxDataViewColumn *GetCurrentColumn() const = 0;
static int LUACALL wxLua_wxDataViewCtrlBase_GetCurrentColumn(lua_State *L)
{
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call GetCurrentColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->GetCurrentColumn();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetCurrentItem[] = { &wxluatype_wxDataViewCtrlBase, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_GetCurrentItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_GetCurrentItem[1] = {{ wxLua_wxDataViewCtrlBase_GetCurrentItem, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetCurrentItem }};
//     wxDataViewItem GetCurrentItem() const;
static int LUACALL wxLua_wxDataViewCtrlBase_GetCurrentItem(lua_State *L)
{
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call GetCurrentItem
    // allocate a new object using the copy constructor
    wxDataViewItem* returns = new wxDataViewItem(self->GetCurrentItem());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItem);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetDefaultAttributes[] = { &wxluatype_wxDataViewCtrlBase, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_GetDefaultAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_GetDefaultAttributes[1] = {{ wxLua_wxDataViewCtrlBase_GetDefaultAttributes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetDefaultAttributes }};
//     virtual wxVisualAttributes GetDefaultAttributes() const;
static int LUACALL wxLua_wxDataViewCtrlBase_GetDefaultAttributes(lua_State *L)
{
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call GetDefaultAttributes
    // allocate a new object using the copy constructor
    wxVisualAttributes* returns = new wxVisualAttributes(self->GetDefaultAttributes());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxVisualAttributes);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxVisualAttributes);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetExpanderColumn[] = { &wxluatype_wxDataViewCtrlBase, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_GetExpanderColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_GetExpanderColumn[1] = {{ wxLua_wxDataViewCtrlBase_GetExpanderColumn, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetExpanderColumn }};
//     wxDataViewColumn *GetExpanderColumn() const;
static int LUACALL wxLua_wxDataViewCtrlBase_GetExpanderColumn(lua_State *L)
{
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call GetExpanderColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->GetExpanderColumn();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetIndent[] = { &wxluatype_wxDataViewCtrlBase, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_GetIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_GetIndent[1] = {{ wxLua_wxDataViewCtrlBase_GetIndent, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetIndent }};
//     int GetIndent() const;
static int LUACALL wxLua_wxDataViewCtrlBase_GetIndent(lua_State *L)
{
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call GetIndent
    int returns = (self->GetIndent());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetItemRect[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewItem, &wxluatype_wxDataViewColumn, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_GetItemRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_GetItemRect[1] = {{ wxLua_wxDataViewCtrlBase_GetItemRect, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetItemRect }};
//     virtual wxRect GetItemRect( const wxDataViewItem & item, const wxDataViewColumn *column = NULL ) const = 0;
static int LUACALL wxLua_wxDataViewCtrlBase_GetItemRect(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxDataViewColumn column = NULL
    const wxDataViewColumn * column = (argCount >= 3 ? (const wxDataViewColumn *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewColumn) : NULL);
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call GetItemRect
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->GetItemRect(*item, column));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRect);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetModel[] = { &wxluatype_wxDataViewCtrlBase, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_GetModel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_GetModel[1] = {{ wxLua_wxDataViewCtrlBase_GetModel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetModel }};
//     wxDataViewModel* GetModel();
static int LUACALL wxLua_wxDataViewCtrlBase_GetModel(lua_State *L)
{
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call GetModel
    wxDataViewModel* returns = (wxDataViewModel*)self->GetModel();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewModel);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetSelectedItemsCount[] = { &wxluatype_wxDataViewCtrlBase, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_GetSelectedItemsCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_GetSelectedItemsCount[1] = {{ wxLua_wxDataViewCtrlBase_GetSelectedItemsCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetSelectedItemsCount }};
//     virtual int GetSelectedItemsCount() const = 0;
static int LUACALL wxLua_wxDataViewCtrlBase_GetSelectedItemsCount(lua_State *L)
{
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call GetSelectedItemsCount
    int returns = (self->GetSelectedItemsCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetSelection[] = { &wxluatype_wxDataViewCtrlBase, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_GetSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_GetSelection[1] = {{ wxLua_wxDataViewCtrlBase_GetSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetSelection }};
//     wxDataViewItem GetSelection() const;
static int LUACALL wxLua_wxDataViewCtrlBase_GetSelection(lua_State *L)
{
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call GetSelection
    // allocate a new object using the copy constructor
    wxDataViewItem* returns = new wxDataViewItem(self->GetSelection());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItem);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetSelections[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewItemArray, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_GetSelections(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_GetSelections[1] = {{ wxLua_wxDataViewCtrlBase_GetSelections, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetSelections }};
//     virtual int GetSelections( wxDataViewItemArray & sel ) const = 0;
static int LUACALL wxLua_wxDataViewCtrlBase_GetSelections(lua_State *L)
{
    // wxDataViewItemArray sel
    wxDataViewItemArray * sel = (wxDataViewItemArray *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItemArray);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call GetSelections
    int returns = (self->GetSelections(*sel));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetSortingColumn[] = { &wxluatype_wxDataViewCtrlBase, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_GetSortingColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_GetSortingColumn[1] = {{ wxLua_wxDataViewCtrlBase_GetSortingColumn, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetSortingColumn }};
//     virtual wxDataViewColumn *GetSortingColumn() const = 0;
static int LUACALL wxLua_wxDataViewCtrlBase_GetSortingColumn(lua_State *L)
{
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call GetSortingColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->GetSortingColumn();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetTopItem[] = { &wxluatype_wxDataViewCtrlBase, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_GetTopItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_GetTopItem[1] = {{ wxLua_wxDataViewCtrlBase_GetTopItem, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_GetTopItem }};
//     virtual wxDataViewItem GetTopItem() const;
static int LUACALL wxLua_wxDataViewCtrlBase_GetTopItem(lua_State *L)
{
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call GetTopItem
    // allocate a new object using the copy constructor
    wxDataViewItem* returns = new wxDataViewItem(self->GetTopItem());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItem);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_HasSelection[] = { &wxluatype_wxDataViewCtrlBase, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_HasSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_HasSelection[1] = {{ wxLua_wxDataViewCtrlBase_HasSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_HasSelection }};
//     bool HasSelection() const;
static int LUACALL wxLua_wxDataViewCtrlBase_HasSelection(lua_State *L)
{
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call HasSelection
    bool returns = (self->HasSelection());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_InsertColumn[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_TINTEGER, &wxluatype_wxDataViewColumn, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_InsertColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_InsertColumn[1] = {{ wxLua_wxDataViewCtrlBase_InsertColumn, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_InsertColumn }};
//     virtual bool InsertColumn(unsigned int pos, %ungc wxDataViewColumn *col);
static int LUACALL wxLua_wxDataViewCtrlBase_InsertColumn(lua_State *L)
{
    // wxDataViewColumn col
    wxDataViewColumn * col = (wxDataViewColumn *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewColumn);
    // unsigned int pos
    unsigned int pos = (unsigned int)wxlua_getuintegertype(L, 2);
    if (wxluaO_isgcobject(L, col)) wxluaO_undeletegcobject(L, col);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call InsertColumn
    bool returns = (self->InsertColumn(pos, col));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_IsExpanded[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_IsExpanded(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_IsExpanded[1] = {{ wxLua_wxDataViewCtrlBase_IsExpanded, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_IsExpanded }};
//     virtual bool IsExpanded( const wxDataViewItem & item ) const = 0;
static int LUACALL wxLua_wxDataViewCtrlBase_IsExpanded(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call IsExpanded
    bool returns = (self->IsExpanded(*item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_IsMultiColumnSortAllowed[] = { &wxluatype_wxDataViewCtrlBase, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_IsMultiColumnSortAllowed(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_IsMultiColumnSortAllowed[1] = {{ wxLua_wxDataViewCtrlBase_IsMultiColumnSortAllowed, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_IsMultiColumnSortAllowed }};
//     virtual bool IsMultiColumnSortAllowed() const;
static int LUACALL wxLua_wxDataViewCtrlBase_IsMultiColumnSortAllowed(lua_State *L)
{
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call IsMultiColumnSortAllowed
    bool returns = (self->IsMultiColumnSortAllowed());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_IsSelected[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_IsSelected(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_IsSelected[1] = {{ wxLua_wxDataViewCtrlBase_IsSelected, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_IsSelected }};
//     virtual bool IsSelected( const wxDataViewItem & item ) const = 0;
static int LUACALL wxLua_wxDataViewCtrlBase_IsSelected(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call IsSelected
    bool returns = (self->IsSelected(*item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependBitmapColumn1[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxBitmap, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_PrependBitmapColumn1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependBitmapColumn1[1] = {{ wxLua_wxDataViewCtrlBase_PrependBitmapColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependBitmapColumn1 }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_PrependBitmapColumn1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_CENTER
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_CENTER);
    // int width = -1
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_INERT);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxBitmap label
    const wxBitmap * label = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call PrependBitmapColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->PrependBitmapColumn(*label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependBitmapColumn[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_PrependBitmapColumn(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependBitmapColumn[1] = {{ wxLua_wxDataViewCtrlBase_PrependBitmapColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependBitmapColumn }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_PrependBitmapColumn(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_CENTER
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_CENTER);
    // int width = -1
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_INERT);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call PrependBitmapColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->PrependBitmapColumn(label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependColumn[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewColumn, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_PrependColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependColumn[1] = {{ wxLua_wxDataViewCtrlBase_PrependColumn, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependColumn }};
//     virtual bool PrependColumn(%ungc wxDataViewColumn *col );
static int LUACALL wxLua_wxDataViewCtrlBase_PrependColumn(lua_State *L)
{
    // wxDataViewColumn col
    wxDataViewColumn * col = (wxDataViewColumn *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewColumn);
    if (wxluaO_isgcobject(L, col)) wxluaO_undeletegcobject(L, col);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call PrependColumn
    bool returns = (self->PrependColumn(col));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependDateColumn1[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxBitmap, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_PrependDateColumn1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependDateColumn1[1] = {{ wxLua_wxDataViewCtrlBase_PrependDateColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependDateColumn1 }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_PrependDateColumn1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_NOT
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_NOT);
    // int width = -1
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_ACTIVATABLE
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_ACTIVATABLE);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxBitmap label
    const wxBitmap * label = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call PrependDateColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->PrependDateColumn(*label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependDateColumn[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_PrependDateColumn(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependDateColumn[1] = {{ wxLua_wxDataViewCtrlBase_PrependDateColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependDateColumn }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_PrependDateColumn(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_NOT
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_NOT);
    // int width = -1
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_ACTIVATABLE
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_ACTIVATABLE);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call PrependDateColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->PrependDateColumn(label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependIconTextColumn1[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxBitmap, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_PrependIconTextColumn1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependIconTextColumn1[1] = {{ wxLua_wxDataViewCtrlBase_PrependIconTextColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependIconTextColumn1 }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_PrependIconTextColumn1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_NOT
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_NOT);
    // int width = -1
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_INERT);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxBitmap label
    const wxBitmap * label = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call PrependIconTextColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->PrependIconTextColumn(*label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependIconTextColumn[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_PrependIconTextColumn(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependIconTextColumn[1] = {{ wxLua_wxDataViewCtrlBase_PrependIconTextColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependIconTextColumn }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_PrependIconTextColumn(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_NOT
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_NOT);
    // int width = -1
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_INERT);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call PrependIconTextColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->PrependIconTextColumn(label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependProgressColumn1[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxBitmap, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_PrependProgressColumn1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependProgressColumn1[1] = {{ wxLua_wxDataViewCtrlBase_PrependProgressColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependProgressColumn1 }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_PrependProgressColumn1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_CENTER
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_CENTER);
    // int width = wxDVC_DEFAULT_WIDTH
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxDVC_DEFAULT_WIDTH);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_INERT);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxBitmap label
    const wxBitmap * label = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call PrependProgressColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->PrependProgressColumn(*label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependProgressColumn[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_PrependProgressColumn(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependProgressColumn[1] = {{ wxLua_wxDataViewCtrlBase_PrependProgressColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependProgressColumn }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_PrependProgressColumn(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_CENTER
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_CENTER);
    // int width = wxDVC_DEFAULT_WIDTH
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxDVC_DEFAULT_WIDTH);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_INERT);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call PrependProgressColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->PrependProgressColumn(label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependTextColumn1[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxBitmap, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_PrependTextColumn1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependTextColumn1[1] = {{ wxLua_wxDataViewCtrlBase_PrependTextColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependTextColumn1 }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_PrependTextColumn1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_NOT
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_NOT);
    // int width = -1
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_INERT);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxBitmap label
    const wxBitmap * label = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call PrependTextColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->PrependTextColumn(*label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependTextColumn[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_PrependTextColumn(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependTextColumn[1] = {{ wxLua_wxDataViewCtrlBase_PrependTextColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependTextColumn }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_PrependTextColumn(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_NOT
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_NOT);
    // int width = -1
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_INERT);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call PrependTextColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->PrependTextColumn(label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependToggleColumn1[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxBitmap, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_PrependToggleColumn1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependToggleColumn1[1] = {{ wxLua_wxDataViewCtrlBase_PrependToggleColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependToggleColumn1 }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_PrependToggleColumn1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_CENTER
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_CENTER);
    // int width = wxDVC_TOGGLE_DEFAULT_WIDTH
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxDVC_TOGGLE_DEFAULT_WIDTH);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_INERT);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxBitmap label
    const wxBitmap * label = (const wxBitmap *)wxluaT_getuserdatatype(L, 2, wxluatype_wxBitmap);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call PrependToggleColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->PrependToggleColumn(*label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependToggleColumn[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_PrependToggleColumn(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependToggleColumn[1] = {{ wxLua_wxDataViewCtrlBase_PrependToggleColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependToggleColumn }};
//                     int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewCtrlBase_PrependToggleColumn(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_CENTER
    wxAlignment align = (argCount >= 6 ? (wxAlignment)wxlua_getenumtype(L, 6) : wxALIGN_CENTER);
    // int width = wxDVC_TOGGLE_DEFAULT_WIDTH
    int width = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxDVC_TOGGLE_DEFAULT_WIDTH);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 4 ? (wxDataViewCellMode)wxlua_getenumtype(L, 4) : wxDATAVIEW_CELL_INERT);
    // unsigned int model_column
    unsigned int model_column = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call PrependToggleColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->PrependToggleColumn(label, model_column, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_Select[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_Select(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_Select[1] = {{ wxLua_wxDataViewCtrlBase_Select, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_Select }};
//     virtual void Select( const wxDataViewItem & item ) = 0;
static int LUACALL wxLua_wxDataViewCtrlBase_Select(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call Select
    self->Select(*item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_SelectAll[] = { &wxluatype_wxDataViewCtrlBase, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_SelectAll(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_SelectAll[1] = {{ wxLua_wxDataViewCtrlBase_SelectAll, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_SelectAll }};
//     virtual void SelectAll() = 0;
static int LUACALL wxLua_wxDataViewCtrlBase_SelectAll(lua_State *L)
{
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call SelectAll
    self->SelectAll();

    return 0;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxColourPenBrush)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_SetAlternateRowColour[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_SetAlternateRowColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_SetAlternateRowColour[1] = {{ wxLua_wxDataViewCtrlBase_SetAlternateRowColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_SetAlternateRowColour }};
//     virtual bool SetAlternateRowColour(const wxColour& colour);
static int LUACALL wxLua_wxDataViewCtrlBase_SetAlternateRowColour(lua_State *L)
{
    // const wxColour colour
    const wxColour * colour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call SetAlternateRowColour
    bool returns = (self->SetAlternateRowColour(*colour));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxColourPenBrush)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_SetCurrentItem[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_SetCurrentItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_SetCurrentItem[1] = {{ wxLua_wxDataViewCtrlBase_SetCurrentItem, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_SetCurrentItem }};
//     void SetCurrentItem(const wxDataViewItem& item);
static int LUACALL wxLua_wxDataViewCtrlBase_SetCurrentItem(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call SetCurrentItem
    self->SetCurrentItem(*item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_SetExpanderColumn[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewColumn, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_SetExpanderColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_SetExpanderColumn[1] = {{ wxLua_wxDataViewCtrlBase_SetExpanderColumn, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_SetExpanderColumn }};
//     void SetExpanderColumn( wxDataViewColumn *col );
static int LUACALL wxLua_wxDataViewCtrlBase_SetExpanderColumn(lua_State *L)
{
    // wxDataViewColumn col
    wxDataViewColumn * col = (wxDataViewColumn *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewColumn);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call SetExpanderColumn
    self->SetExpanderColumn(col);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_SetIndent[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_SetIndent(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_SetIndent[1] = {{ wxLua_wxDataViewCtrlBase_SetIndent, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_SetIndent }};
//     void SetIndent( int indent );
static int LUACALL wxLua_wxDataViewCtrlBase_SetIndent(lua_State *L)
{
    // int indent
    int indent = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call SetIndent
    self->SetIndent(indent);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_SetRowHeight[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_SetRowHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_SetRowHeight[1] = {{ wxLua_wxDataViewCtrlBase_SetRowHeight, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_SetRowHeight }};
//     virtual bool SetRowHeight( int rowHeight );
static int LUACALL wxLua_wxDataViewCtrlBase_SetRowHeight(lua_State *L)
{
    // int rowHeight
    int rowHeight = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call SetRowHeight
    bool returns = (self->SetRowHeight(rowHeight));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_SetSelections[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewItemArray, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_SetSelections(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_SetSelections[1] = {{ wxLua_wxDataViewCtrlBase_SetSelections, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_SetSelections }};
//     virtual void SetSelections( const wxDataViewItemArray & sel ) = 0;
static int LUACALL wxLua_wxDataViewCtrlBase_SetSelections(lua_State *L)
{
    // const wxDataViewItemArray sel
    const wxDataViewItemArray * sel = (const wxDataViewItemArray *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItemArray);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call SetSelections
    self->SetSelections(*sel);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_ToggleSortByColumn[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_ToggleSortByColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_ToggleSortByColumn[1] = {{ wxLua_wxDataViewCtrlBase_ToggleSortByColumn, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_ToggleSortByColumn }};
//     virtual void ToggleSortByColumn(int column);
static int LUACALL wxLua_wxDataViewCtrlBase_ToggleSortByColumn(lua_State *L)
{
    // int column
    int column = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call ToggleSortByColumn
    self->ToggleSortByColumn(column);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_Unselect[] = { &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_Unselect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_Unselect[1] = {{ wxLua_wxDataViewCtrlBase_Unselect, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_Unselect }};
//     virtual void Unselect( const wxDataViewItem & item ) = 0;
static int LUACALL wxLua_wxDataViewCtrlBase_Unselect(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call Unselect
    self->Unselect(*item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrlBase_UnselectAll[] = { &wxluatype_wxDataViewCtrlBase, NULL };
static int LUACALL wxLua_wxDataViewCtrlBase_UnselectAll(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_UnselectAll[1] = {{ wxLua_wxDataViewCtrlBase_UnselectAll, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_UnselectAll }};
//     virtual void UnselectAll() = 0;
static int LUACALL wxLua_wxDataViewCtrlBase_UnselectAll(lua_State *L)
{
    // get this
    wxDataViewCtrlBase * self = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrlBase);
    // call UnselectAll
    self->UnselectAll();

    return 0;
}




#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendBitmapColumn_overload[] =
{

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_AppendBitmapColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendBitmapColumn1 },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_AppendBitmapColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendBitmapColumn },
};
static int s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendBitmapColumn_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendBitmapColumn_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendDateColumn_overload[] =
{

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_AppendDateColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendDateColumn1 },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_AppendDateColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendDateColumn },
};
static int s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendDateColumn_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendDateColumn_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendIconTextColumn_overload[] =
{

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_AppendIconTextColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendIconTextColumn1 },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_AppendIconTextColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendIconTextColumn },
};
static int s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendIconTextColumn_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendIconTextColumn_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendProgressColumn_overload[] =
{

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_AppendProgressColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendProgressColumn1 },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_AppendProgressColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendProgressColumn },
};
static int s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendProgressColumn_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendProgressColumn_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendTextColumn_overload[] =
{

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_AppendTextColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendTextColumn1 },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_AppendTextColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendTextColumn },
};
static int s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendTextColumn_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendTextColumn_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendToggleColumn_overload[] =
{

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_AppendToggleColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendToggleColumn1 },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_AppendToggleColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_AppendToggleColumn },
};
static int s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendToggleColumn_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendToggleColumn_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependBitmapColumn_overload[] =
{

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_PrependBitmapColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependBitmapColumn1 },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_PrependBitmapColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependBitmapColumn },
};
static int s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependBitmapColumn_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependBitmapColumn_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependDateColumn_overload[] =
{

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_PrependDateColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependDateColumn1 },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_PrependDateColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependDateColumn },
};
static int s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependDateColumn_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependDateColumn_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependIconTextColumn_overload[] =
{

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_PrependIconTextColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependIconTextColumn1 },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_PrependIconTextColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependIconTextColumn },
};
static int s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependIconTextColumn_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependIconTextColumn_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependProgressColumn_overload[] =
{

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_PrependProgressColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependProgressColumn1 },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_PrependProgressColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependProgressColumn },
};
static int s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependProgressColumn_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependProgressColumn_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependTextColumn_overload[] =
{

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_PrependTextColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependTextColumn1 },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_PrependTextColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependTextColumn },
};
static int s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependTextColumn_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependTextColumn_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependToggleColumn_overload[] =
{

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_PrependToggleColumn1, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependToggleColumn1 },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap)
    { wxLua_wxDataViewCtrlBase_PrependToggleColumn, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewCtrlBase_PrependToggleColumn },
};
static int s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependToggleColumn_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependToggleColumn_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

void wxLua_wxDataViewCtrlBase_delete_function(void** p)
{
    wxDataViewCtrlBase* o = (wxDataViewCtrlBase*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewCtrlBase_methods[] = {
    { "AllowMultiColumnSort", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_AllowMultiColumnSort, 1, NULL },

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
    { "AppendBitmapColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendBitmapColumn_overload, s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendBitmapColumn_overload_count, 0 },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

    { "AppendColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendColumn, 1, NULL },

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
    { "AppendDateColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendDateColumn_overload, s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendDateColumn_overload_count, 0 },
    { "AppendIconTextColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendIconTextColumn_overload, s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendIconTextColumn_overload_count, 0 },
    { "AppendProgressColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendProgressColumn_overload, s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendProgressColumn_overload_count, 0 },
    { "AppendTextColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendTextColumn_overload, s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendTextColumn_overload_count, 0 },
    { "AppendToggleColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendToggleColumn_overload, s_wxluafunc_wxLua_wxDataViewCtrlBase_AppendToggleColumn_overload_count, 0 },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

    { "AssociateModel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_AssociateModel, 1, NULL },
    { "ClearColumns", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_ClearColumns, 1, NULL },
    { "Collapse", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_Collapse, 1, NULL },
    { "DeleteColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_DeleteColumn, 1, NULL },
    { "EditItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_EditItem, 1, NULL },

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
    { "EnableDragSource", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_EnableDragSource, 1, NULL },
    { "EnableDropTarget", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_EnableDropTarget, 1, NULL },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

    { "EnsureVisible", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_EnsureVisible, 1, NULL },
    { "Expand", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_Expand, 1, NULL },
    { "ExpandAncestors", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_ExpandAncestors, 1, NULL },

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,1,5))) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
    { "ExpandChildren", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_ExpandChildren, 1, NULL },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,1,5))) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

    { "GetClassDefaultAttributes", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDataViewCtrlBase_GetClassDefaultAttributes, 1, NULL },
    { "GetColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_GetColumn, 1, NULL },
    { "GetColumnCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_GetColumnCount, 1, NULL },
    { "GetColumnPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_GetColumnPosition, 1, NULL },
    { "GetCountPerPage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_GetCountPerPage, 1, NULL },
    { "GetCurrentColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_GetCurrentColumn, 1, NULL },
    { "GetCurrentItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_GetCurrentItem, 1, NULL },
    { "GetDefaultAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_GetDefaultAttributes, 1, NULL },
    { "GetExpanderColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_GetExpanderColumn, 1, NULL },
    { "GetIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_GetIndent, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)
    { "GetItemRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_GetItemRect, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)

    { "GetModel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_GetModel, 1, NULL },
    { "GetSelectedItemsCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_GetSelectedItemsCount, 1, NULL },
    { "GetSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_GetSelection, 1, NULL },
    { "GetSelections", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_GetSelections, 1, NULL },
    { "GetSortingColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_GetSortingColumn, 1, NULL },
    { "GetTopItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_GetTopItem, 1, NULL },
    { "HasSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_HasSelection, 1, NULL },
    { "InsertColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_InsertColumn, 1, NULL },
    { "IsExpanded", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_IsExpanded, 1, NULL },
    { "IsMultiColumnSortAllowed", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_IsMultiColumnSortAllowed, 1, NULL },
    { "IsSelected", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_IsSelected, 1, NULL },

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
    { "PrependBitmapColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependBitmapColumn_overload, s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependBitmapColumn_overload_count, 0 },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

    { "PrependColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependColumn, 1, NULL },

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
    { "PrependDateColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependDateColumn_overload, s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependDateColumn_overload_count, 0 },
    { "PrependIconTextColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependIconTextColumn_overload, s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependIconTextColumn_overload_count, 0 },
    { "PrependProgressColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependProgressColumn_overload, s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependProgressColumn_overload_count, 0 },
    { "PrependTextColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependTextColumn_overload, s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependTextColumn_overload_count, 0 },
    { "PrependToggleColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependToggleColumn_overload, s_wxluafunc_wxLua_wxDataViewCtrlBase_PrependToggleColumn_overload_count, 0 },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxBitmap))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

    { "Select", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_Select, 1, NULL },
    { "SelectAll", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_SelectAll, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxColourPenBrush)
    { "SetAlternateRowColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_SetAlternateRowColour, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxColourPenBrush)

    { "SetCurrentItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_SetCurrentItem, 1, NULL },
    { "SetExpanderColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_SetExpanderColumn, 1, NULL },
    { "SetIndent", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_SetIndent, 1, NULL },
    { "SetRowHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_SetRowHeight, 1, NULL },
    { "SetSelections", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_SetSelections, 1, NULL },
    { "ToggleSortByColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_ToggleSortByColumn, 1, NULL },
    { "Unselect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_Unselect, 1, NULL },
    { "UnselectAll", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrlBase_UnselectAll, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDataViewCtrlBase_methodCount = sizeof(wxDataViewCtrlBase_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewCtrl'
int wxluatype_wxDataViewCtrl = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_ClearColumns[] = { &wxluatype_wxDataViewCtrl, NULL };
static int LUACALL wxLua_wxDataViewCtrl_ClearColumns(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_ClearColumns[1] = {{ wxLua_wxDataViewCtrl_ClearColumns, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrl_ClearColumns }};
//     virtual bool ClearColumns();
static int LUACALL wxLua_wxDataViewCtrl_ClearColumns(lua_State *L)
{
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call ClearColumns
    bool returns = (self->ClearColumns());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_Collapse[] = { &wxluatype_wxDataViewCtrl, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewCtrl_Collapse(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_Collapse[1] = {{ wxLua_wxDataViewCtrl_Collapse, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrl_Collapse }};
//     virtual void Collapse( const wxDataViewItem & item );
static int LUACALL wxLua_wxDataViewCtrl_Collapse(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call Collapse
    self->Collapse(*item);

    return 0;
}


#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_Create[] = { &wxluatype_wxDataViewCtrl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDataViewCtrl_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_Create[1] = {{ wxLua_wxDataViewCtrl_Create, WXLUAMETHOD_METHOD, 3, 8, s_wxluatypeArray_wxLua_wxDataViewCtrl_Create }};
//            const wxString& name = wxDataViewCtrlNameStr);
static int LUACALL wxLua_wxDataViewCtrl_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = wxDataViewCtrlNameStr
    const wxString name = (argCount >= 8 ? wxlua_getwxStringtype(L, 8) : wxString(wxDataViewCtrlNameStr));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, *validator, name));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_DeleteColumn[] = { &wxluatype_wxDataViewCtrl, &wxluatype_wxDataViewColumn, NULL };
static int LUACALL wxLua_wxDataViewCtrl_DeleteColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_DeleteColumn[1] = {{ wxLua_wxDataViewCtrl_DeleteColumn, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrl_DeleteColumn }};
//     virtual bool DeleteColumn( wxDataViewColumn *column );
static int LUACALL wxLua_wxDataViewCtrl_DeleteColumn(lua_State *L)
{
    // wxDataViewColumn column
    wxDataViewColumn * column = (wxDataViewColumn *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewColumn);
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call DeleteColumn
    bool returns = (self->DeleteColumn(column));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_EditItem[] = { &wxluatype_wxDataViewCtrl, &wxluatype_wxDataViewItem, &wxluatype_wxDataViewColumn, NULL };
static int LUACALL wxLua_wxDataViewCtrl_EditItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_EditItem[1] = {{ wxLua_wxDataViewCtrl_EditItem, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewCtrl_EditItem }};
//     virtual void EditItem(const wxDataViewItem& item, const wxDataViewColumn *column);
static int LUACALL wxLua_wxDataViewCtrl_EditItem(lua_State *L)
{
    // const wxDataViewColumn column
    const wxDataViewColumn * column = (const wxDataViewColumn *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewColumn);
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call EditItem
    self->EditItem(*item, column);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_EnsureVisible[] = { &wxluatype_wxDataViewCtrl, &wxluatype_wxDataViewItem, &wxluatype_wxDataViewColumn, NULL };
static int LUACALL wxLua_wxDataViewCtrl_EnsureVisible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_EnsureVisible[1] = {{ wxLua_wxDataViewCtrl_EnsureVisible, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxDataViewCtrl_EnsureVisible }};
//     virtual void EnsureVisible( const wxDataViewItem & item, const wxDataViewColumn *column = NULL );
static int LUACALL wxLua_wxDataViewCtrl_EnsureVisible(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxDataViewColumn column = NULL
    const wxDataViewColumn * column = (argCount >= 3 ? (const wxDataViewColumn *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewColumn) : NULL);
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call EnsureVisible
    self->EnsureVisible(*item, column);

    return 0;
}


#if (((defined (wxHAS_GENERIC_DATAVIEWCTRL )) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxCHECK_VERSION(3,1,1))) && ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxUSE_HEADERCTRL))
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_GenericGetHeader[] = { &wxluatype_wxDataViewCtrl, NULL };
static int LUACALL wxLua_wxDataViewCtrl_GenericGetHeader(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_GenericGetHeader[1] = {{ wxLua_wxDataViewCtrl_GenericGetHeader, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrl_GenericGetHeader }};
//     %wxchkver_3_1_1 wxHeaderCtrl* GenericGetHeader() const;
static int LUACALL wxLua_wxDataViewCtrl_GenericGetHeader(lua_State *L)
{
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call GenericGetHeader
    wxHeaderCtrl* returns = (wxHeaderCtrl*)self->GenericGetHeader();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxHeaderCtrl);

    return 1;
}

#endif // (((defined (wxHAS_GENERIC_DATAVIEWCTRL )) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxCHECK_VERSION(3,1,1))) && ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxUSE_HEADERCTRL))

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_GetColumn[] = { &wxluatype_wxDataViewCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewCtrl_GetColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_GetColumn[1] = {{ wxLua_wxDataViewCtrl_GetColumn, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrl_GetColumn }};
//     virtual wxDataViewColumn* GetColumn( unsigned int pos ) const;
static int LUACALL wxLua_wxDataViewCtrl_GetColumn(lua_State *L)
{
    // unsigned int pos
    unsigned int pos = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call GetColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->GetColumn(pos);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_GetColumnCount[] = { &wxluatype_wxDataViewCtrl, NULL };
static int LUACALL wxLua_wxDataViewCtrl_GetColumnCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_GetColumnCount[1] = {{ wxLua_wxDataViewCtrl_GetColumnCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrl_GetColumnCount }};
//     virtual unsigned int GetColumnCount() const;
static int LUACALL wxLua_wxDataViewCtrl_GetColumnCount(lua_State *L)
{
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call GetColumnCount
    unsigned int returns = (self->GetColumnCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_GetColumnPosition[] = { &wxluatype_wxDataViewCtrl, &wxluatype_wxDataViewColumn, NULL };
static int LUACALL wxLua_wxDataViewCtrl_GetColumnPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_GetColumnPosition[1] = {{ wxLua_wxDataViewCtrl_GetColumnPosition, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrl_GetColumnPosition }};
//     virtual int GetColumnPosition( const wxDataViewColumn *column );
static int LUACALL wxLua_wxDataViewCtrl_GetColumnPosition(lua_State *L)
{
    // const wxDataViewColumn column
    const wxDataViewColumn * column = (const wxDataViewColumn *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewColumn);
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call GetColumnPosition
    int returns = (self->GetColumnPosition(column));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_GetCurrentColumn[] = { &wxluatype_wxDataViewCtrl, NULL };
static int LUACALL wxLua_wxDataViewCtrl_GetCurrentColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_GetCurrentColumn[1] = {{ wxLua_wxDataViewCtrl_GetCurrentColumn, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrl_GetCurrentColumn }};
//     virtual wxDataViewColumn *GetCurrentColumn() const;
static int LUACALL wxLua_wxDataViewCtrl_GetCurrentColumn(lua_State *L)
{
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call GetCurrentColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->GetCurrentColumn();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_GetItemRect[] = { &wxluatype_wxDataViewCtrl, &wxluatype_wxDataViewItem, &wxluatype_wxDataViewColumn, NULL };
static int LUACALL wxLua_wxDataViewCtrl_GetItemRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_GetItemRect[1] = {{ wxLua_wxDataViewCtrl_GetItemRect, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxDataViewCtrl_GetItemRect }};
//     virtual wxRect GetItemRect( const wxDataViewItem & item, const wxDataViewColumn *column = NULL );
static int LUACALL wxLua_wxDataViewCtrl_GetItemRect(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxDataViewColumn column = NULL
    const wxDataViewColumn * column = (argCount >= 3 ? (const wxDataViewColumn *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewColumn) : NULL);
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call GetItemRect
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->GetItemRect(*item, column));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRect);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_GetSelectedItemsCount[] = { &wxluatype_wxDataViewCtrl, NULL };
static int LUACALL wxLua_wxDataViewCtrl_GetSelectedItemsCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_GetSelectedItemsCount[1] = {{ wxLua_wxDataViewCtrl_GetSelectedItemsCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrl_GetSelectedItemsCount }};
//     virtual int GetSelectedItemsCount() const;
static int LUACALL wxLua_wxDataViewCtrl_GetSelectedItemsCount(lua_State *L)
{
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call GetSelectedItemsCount
    int returns = (self->GetSelectedItemsCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_GetSelections[] = { &wxluatype_wxDataViewCtrl, &wxluatype_wxDataViewItemArray, NULL };
static int LUACALL wxLua_wxDataViewCtrl_GetSelections(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_GetSelections[1] = {{ wxLua_wxDataViewCtrl_GetSelections, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrl_GetSelections }};
//     virtual int GetSelections( wxDataViewItemArray & sel ) const;
static int LUACALL wxLua_wxDataViewCtrl_GetSelections(lua_State *L)
{
    // wxDataViewItemArray sel
    wxDataViewItemArray * sel = (wxDataViewItemArray *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItemArray);
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call GetSelections
    int returns = (self->GetSelections(*sel));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_GetSortingColumn[] = { &wxluatype_wxDataViewCtrl, NULL };
static int LUACALL wxLua_wxDataViewCtrl_GetSortingColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_GetSortingColumn[1] = {{ wxLua_wxDataViewCtrl_GetSortingColumn, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrl_GetSortingColumn }};
//     virtual wxDataViewColumn *GetSortingColumn() const;
static int LUACALL wxLua_wxDataViewCtrl_GetSortingColumn(lua_State *L)
{
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call GetSortingColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->GetSortingColumn();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_IsExpanded[] = { &wxluatype_wxDataViewCtrl, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewCtrl_IsExpanded(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_IsExpanded[1] = {{ wxLua_wxDataViewCtrl_IsExpanded, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrl_IsExpanded }};
//     virtual bool IsExpanded( const wxDataViewItem & item ) const;
static int LUACALL wxLua_wxDataViewCtrl_IsExpanded(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call IsExpanded
    bool returns = (self->IsExpanded(*item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_IsSelected[] = { &wxluatype_wxDataViewCtrl, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewCtrl_IsSelected(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_IsSelected[1] = {{ wxLua_wxDataViewCtrl_IsSelected, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrl_IsSelected }};
//     virtual bool IsSelected( const wxDataViewItem & item ) const;
static int LUACALL wxLua_wxDataViewCtrl_IsSelected(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call IsSelected
    bool returns = (self->IsSelected(*item));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_Select[] = { &wxluatype_wxDataViewCtrl, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewCtrl_Select(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_Select[1] = {{ wxLua_wxDataViewCtrl_Select, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrl_Select }};
//     virtual void Select( const wxDataViewItem & item );
static int LUACALL wxLua_wxDataViewCtrl_Select(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call Select
    self->Select(*item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_SelectAll[] = { &wxluatype_wxDataViewCtrl, NULL };
static int LUACALL wxLua_wxDataViewCtrl_SelectAll(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_SelectAll[1] = {{ wxLua_wxDataViewCtrl_SelectAll, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrl_SelectAll }};
//     virtual void SelectAll();
static int LUACALL wxLua_wxDataViewCtrl_SelectAll(lua_State *L)
{
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call SelectAll
    self->SelectAll();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_SetSelections[] = { &wxluatype_wxDataViewCtrl, &wxluatype_wxDataViewItemArray, NULL };
static int LUACALL wxLua_wxDataViewCtrl_SetSelections(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_SetSelections[1] = {{ wxLua_wxDataViewCtrl_SetSelections, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrl_SetSelections }};
//     virtual void SetSelections( const wxDataViewItemArray & sel );
static int LUACALL wxLua_wxDataViewCtrl_SetSelections(lua_State *L)
{
    // const wxDataViewItemArray sel
    const wxDataViewItemArray * sel = (const wxDataViewItemArray *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItemArray);
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call SetSelections
    self->SetSelections(*sel);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_Unselect[] = { &wxluatype_wxDataViewCtrl, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewCtrl_Unselect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_Unselect[1] = {{ wxLua_wxDataViewCtrl_Unselect, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCtrl_Unselect }};
//     virtual void Unselect( const wxDataViewItem & item );
static int LUACALL wxLua_wxDataViewCtrl_Unselect(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call Unselect
    self->Unselect(*item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_UnselectAll[] = { &wxluatype_wxDataViewCtrl, NULL };
static int LUACALL wxLua_wxDataViewCtrl_UnselectAll(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_UnselectAll[1] = {{ wxLua_wxDataViewCtrl_UnselectAll, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCtrl_UnselectAll }};
//     virtual void UnselectAll();
static int LUACALL wxLua_wxDataViewCtrl_UnselectAll(lua_State *L)
{
    // get this
    wxDataViewCtrl * self = (wxDataViewCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCtrl);
    // call UnselectAll
    self->UnselectAll();

    return 0;
}


#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCtrl_constructor[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDataViewCtrl_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCtrl_constructor[1] = {{ wxLua_wxDataViewCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 7, s_wxluatypeArray_wxLua_wxDataViewCtrl_constructor }};
//            const wxString& name = wxDataViewCtrlNameStr );
static int LUACALL wxLua_wxDataViewCtrl_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = wxDataViewCtrlNameStr
    const wxString name = (argCount >= 7 ? wxlua_getwxStringtype(L, 7) : wxString(wxDataViewCtrlNameStr));
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 6 ? (const wxValidator *)wxluaT_getuserdatatype(L, 6, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = 0
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : 0);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxDataViewCtrl* returns = new wxDataViewCtrl(parent, id, *pos, *size, style, *validator, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewCtrl);

    return 1;
}

#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)



void wxLua_wxDataViewCtrl_delete_function(void** p)
{
    wxDataViewCtrl* o = (wxDataViewCtrl*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewCtrl_methods[] = {
    { "ClearColumns", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_ClearColumns, 1, NULL },
    { "Collapse", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_Collapse, 1, NULL },

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_Create, 1, NULL },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)

    { "DeleteColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_DeleteColumn, 1, NULL },
    { "EditItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_EditItem, 1, NULL },
    { "EnsureVisible", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_EnsureVisible, 1, NULL },

#if (((defined (wxHAS_GENERIC_DATAVIEWCTRL )) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxCHECK_VERSION(3,1,1))) && ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxUSE_HEADERCTRL))
    { "GenericGetHeader", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_GenericGetHeader, 1, NULL },
#endif // (((defined (wxHAS_GENERIC_DATAVIEWCTRL )) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxCHECK_VERSION(3,1,1))) && ((wxLUA_USE_wxButton && wxUSE_BUTTON) && (wxUSE_HEADERCTRL))

    { "GetColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_GetColumn, 1, NULL },
    { "GetColumnCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_GetColumnCount, 1, NULL },
    { "GetColumnPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_GetColumnPosition, 1, NULL },
    { "GetCurrentColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_GetCurrentColumn, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)
    { "GetItemRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_GetItemRect, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)

    { "GetSelectedItemsCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_GetSelectedItemsCount, 1, NULL },
    { "GetSelections", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_GetSelections, 1, NULL },
    { "GetSortingColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_GetSortingColumn, 1, NULL },
    { "IsExpanded", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_IsExpanded, 1, NULL },
    { "IsSelected", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_IsSelected, 1, NULL },
    { "Select", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_Select, 1, NULL },
    { "SelectAll", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_SelectAll, 1, NULL },
    { "SetSelections", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_SetSelections, 1, NULL },
    { "Unselect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_Unselect, 1, NULL },
    { "UnselectAll", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCtrl_UnselectAll, 1, NULL },

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)
    { "wxDataViewCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewCtrl_constructor, 1, NULL },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)

    { 0, 0, 0, 0 },
};

int wxDataViewCtrl_methodCount = sizeof(wxDataViewCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewListCtrl
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewListCtrl'
int wxluatype_wxDataViewListCtrl = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_AppendColumn1[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_wxDataViewColumn, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_AppendColumn1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_AppendColumn1[1] = {{ wxLua_wxDataViewListCtrl_AppendColumn1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewListCtrl_AppendColumn1 }};
//     void AppendColumn( wxDataViewColumn *column, const wxString &varianttype );
static int LUACALL wxLua_wxDataViewListCtrl_AppendColumn1(lua_State *L)
{
    // const wxString varianttype
    const wxString varianttype = wxlua_getwxStringtype(L, 3);
    // wxDataViewColumn column
    wxDataViewColumn * column = (wxDataViewColumn *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewColumn);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call AppendColumn
    self->AppendColumn(column, varianttype);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_AppendColumn[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_wxDataViewColumn, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_AppendColumn(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_AppendColumn[1] = {{ wxLua_wxDataViewListCtrl_AppendColumn, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewListCtrl_AppendColumn }};
//     virtual bool AppendColumn( wxDataViewColumn *column );
static int LUACALL wxLua_wxDataViewListCtrl_AppendColumn(lua_State *L)
{
    // wxDataViewColumn column
    wxDataViewColumn * column = (wxDataViewColumn *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewColumn);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call AppendColumn
    bool returns = (self->AppendColumn(column));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_AppendIconTextColumn[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_AppendIconTextColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_AppendIconTextColumn[1] = {{ wxLua_wxDataViewListCtrl_AppendIconTextColumn, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxDataViewListCtrl_AppendIconTextColumn }};
//           int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewListCtrl_AppendIconTextColumn(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_LEFT
    wxAlignment align = (argCount >= 5 ? (wxAlignment)wxlua_getenumtype(L, 5) : wxALIGN_LEFT);
    // int width = -1
    int width = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 3 ? (wxDataViewCellMode)wxlua_getenumtype(L, 3) : wxDATAVIEW_CELL_INERT);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call AppendIconTextColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->AppendIconTextColumn(label, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_AppendProgressColumn[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_AppendProgressColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_AppendProgressColumn[1] = {{ wxLua_wxDataViewListCtrl_AppendProgressColumn, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxDataViewListCtrl_AppendProgressColumn }};
//           int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewListCtrl_AppendProgressColumn(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_LEFT
    wxAlignment align = (argCount >= 5 ? (wxAlignment)wxlua_getenumtype(L, 5) : wxALIGN_LEFT);
    // int width = -1
    int width = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 3 ? (wxDataViewCellMode)wxlua_getenumtype(L, 3) : wxDATAVIEW_CELL_INERT);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call AppendProgressColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->AppendProgressColumn(label, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_AppendTextColumn[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_AppendTextColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_AppendTextColumn[1] = {{ wxLua_wxDataViewListCtrl_AppendTextColumn, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxDataViewListCtrl_AppendTextColumn }};
//           int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewListCtrl_AppendTextColumn(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_LEFT
    wxAlignment align = (argCount >= 5 ? (wxAlignment)wxlua_getenumtype(L, 5) : wxALIGN_LEFT);
    // int width = -1
    int width = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 3 ? (wxDataViewCellMode)wxlua_getenumtype(L, 3) : wxDATAVIEW_CELL_INERT);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call AppendTextColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->AppendTextColumn(label, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_AppendToggleColumn[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_AppendToggleColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_AppendToggleColumn[1] = {{ wxLua_wxDataViewListCtrl_AppendToggleColumn, WXLUAMETHOD_METHOD, 2, 6, s_wxluatypeArray_wxLua_wxDataViewListCtrl_AppendToggleColumn }};
//           int flags = wxDATAVIEW_COL_RESIZABLE );
static int LUACALL wxLua_wxDataViewListCtrl_AppendToggleColumn(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int flags = wxDATAVIEW_COL_RESIZABLE
    int flags = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : wxDATAVIEW_COL_RESIZABLE);
    // wxAlignment align = wxALIGN_LEFT
    wxAlignment align = (argCount >= 5 ? (wxAlignment)wxlua_getenumtype(L, 5) : wxALIGN_LEFT);
    // int width = -1
    int width = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_ACTIVATABLE
    wxDataViewCellMode mode = (argCount >= 3 ? (wxDataViewCellMode)wxlua_getenumtype(L, 3) : wxDATAVIEW_CELL_ACTIVATABLE);
    // const wxString label
    const wxString label = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call AppendToggleColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->AppendToggleColumn(label, mode, width, align, flags);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}


#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_Create[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_Create(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_Create[1] = {{ wxLua_wxDataViewListCtrl_Create, WXLUAMETHOD_METHOD, 3, 7, s_wxluatypeArray_wxLua_wxDataViewListCtrl_Create }};
//            const wxValidator& validator = wxDefaultValidator );
static int LUACALL wxLua_wxDataViewListCtrl_Create(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 7 ? (const wxValidator *)wxluaT_getuserdatatype(L, 7, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxDV_ROW_LINES
    long style = (argCount >= 6 ? (long)wxlua_getnumbertype(L, 6) : wxDV_ROW_LINES);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 5 ? (const wxSize *)wxluaT_getuserdatatype(L, 5, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 4 ? (const wxPoint *)wxluaT_getuserdatatype(L, 4, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 3);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 2, wxluatype_wxWindow);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call Create
    bool returns = (self->Create(parent, id, *pos, *size, style, *validator));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_DeleteAllItems[] = { &wxluatype_wxDataViewListCtrl, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_DeleteAllItems(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_DeleteAllItems[1] = {{ wxLua_wxDataViewListCtrl_DeleteAllItems, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewListCtrl_DeleteAllItems }};
//     void DeleteAllItems();
static int LUACALL wxLua_wxDataViewListCtrl_DeleteAllItems(lua_State *L)
{
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call DeleteAllItems
    self->DeleteAllItems();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_DeleteItem[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_DeleteItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_DeleteItem[1] = {{ wxLua_wxDataViewListCtrl_DeleteItem, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewListCtrl_DeleteItem }};
//     void DeleteItem( unsigned int row );
static int LUACALL wxLua_wxDataViewListCtrl_DeleteItem(lua_State *L)
{
    // unsigned int row
    unsigned int row = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call DeleteItem
    self->DeleteItem(row);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_GetItemCount[] = { &wxluatype_wxDataViewListCtrl, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_GetItemCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_GetItemCount[1] = {{ wxLua_wxDataViewListCtrl_GetItemCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewListCtrl_GetItemCount }};
//     unsigned int GetItemCount() const;
static int LUACALL wxLua_wxDataViewListCtrl_GetItemCount(lua_State *L)
{
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call GetItemCount
    unsigned int returns = (self->GetItemCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_GetItemData[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_GetItemData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_GetItemData[1] = {{ wxLua_wxDataViewListCtrl_GetItemData, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewListCtrl_GetItemData }};
//     wxUIntPtr GetItemData(const wxDataViewItem& item) const;
static int LUACALL wxLua_wxDataViewListCtrl_GetItemData(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call GetItemData
    wxUIntPtr returns = (self->GetItemData(*item));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_GetSelectedRow[] = { &wxluatype_wxDataViewListCtrl, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_GetSelectedRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_GetSelectedRow[1] = {{ wxLua_wxDataViewListCtrl_GetSelectedRow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewListCtrl_GetSelectedRow }};
//     int GetSelectedRow() const;
static int LUACALL wxLua_wxDataViewListCtrl_GetSelectedRow(lua_State *L)
{
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call GetSelectedRow
    int returns = (self->GetSelectedRow());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_GetStore1[] = { &wxluatype_wxDataViewListCtrl, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_GetStore1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_GetStore1[1] = {{ wxLua_wxDataViewListCtrl_GetStore1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewListCtrl_GetStore1 }};
//     const wxDataViewListStore *GetStore() const;
static int LUACALL wxLua_wxDataViewListCtrl_GetStore1(lua_State *L)
{
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call GetStore
    const wxDataViewListStore* returns = (const wxDataViewListStore*)self->GetStore();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewListStore);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_GetStore[] = { &wxluatype_wxDataViewListCtrl, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_GetStore(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_GetStore[1] = {{ wxLua_wxDataViewListCtrl_GetStore, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewListCtrl_GetStore }};
//     wxDataViewListStore *GetStore();
static int LUACALL wxLua_wxDataViewListCtrl_GetStore(lua_State *L)
{
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call GetStore
    wxDataViewListStore* returns = (wxDataViewListStore*)self->GetStore();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewListStore);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_GetTextValue[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_GetTextValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_GetTextValue[1] = {{ wxLua_wxDataViewListCtrl_GetTextValue, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewListCtrl_GetTextValue }};
//     wxString GetTextValue( unsigned int row, unsigned int col ) const;
static int LUACALL wxLua_wxDataViewListCtrl_GetTextValue(lua_State *L)
{
    // unsigned int col
    unsigned int col = (unsigned int)wxlua_getuintegertype(L, 3);
    // unsigned int row
    unsigned int row = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call GetTextValue
    wxString returns = (self->GetTextValue(row, col));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_GetToggleValue[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_GetToggleValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_GetToggleValue[1] = {{ wxLua_wxDataViewListCtrl_GetToggleValue, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewListCtrl_GetToggleValue }};
//     bool GetToggleValue( unsigned int row, unsigned int col ) const;
static int LUACALL wxLua_wxDataViewListCtrl_GetToggleValue(lua_State *L)
{
    // unsigned int col
    unsigned int col = (unsigned int)wxlua_getuintegertype(L, 3);
    // unsigned int row
    unsigned int row = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call GetToggleValue
    bool returns = (self->GetToggleValue(row, col));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_InsertColumn1[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_TINTEGER, &wxluatype_wxDataViewColumn, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_InsertColumn1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_InsertColumn1[1] = {{ wxLua_wxDataViewListCtrl_InsertColumn1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxDataViewListCtrl_InsertColumn1 }};
//     void InsertColumn( unsigned int pos, wxDataViewColumn *column, const wxString &varianttype );
static int LUACALL wxLua_wxDataViewListCtrl_InsertColumn1(lua_State *L)
{
    // const wxString varianttype
    const wxString varianttype = wxlua_getwxStringtype(L, 4);
    // wxDataViewColumn column
    wxDataViewColumn * column = (wxDataViewColumn *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewColumn);
    // unsigned int pos
    unsigned int pos = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call InsertColumn
    self->InsertColumn(pos, column, varianttype);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_InsertColumn[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_TINTEGER, &wxluatype_wxDataViewColumn, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_InsertColumn(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_InsertColumn[1] = {{ wxLua_wxDataViewListCtrl_InsertColumn, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewListCtrl_InsertColumn }};
//     virtual bool InsertColumn( unsigned int pos, wxDataViewColumn *column );
static int LUACALL wxLua_wxDataViewListCtrl_InsertColumn(lua_State *L)
{
    // wxDataViewColumn column
    wxDataViewColumn * column = (wxDataViewColumn *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewColumn);
    // unsigned int pos
    unsigned int pos = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call InsertColumn
    bool returns = (self->InsertColumn(pos, column));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_IsRowSelected[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_IsRowSelected(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_IsRowSelected[1] = {{ wxLua_wxDataViewListCtrl_IsRowSelected, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewListCtrl_IsRowSelected }};
//     bool IsRowSelected(unsigned int row) const;
static int LUACALL wxLua_wxDataViewListCtrl_IsRowSelected(lua_State *L)
{
    // unsigned int row
    unsigned int row = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call IsRowSelected
    bool returns = (self->IsRowSelected(row));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_ItemToRow[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_ItemToRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_ItemToRow[1] = {{ wxLua_wxDataViewListCtrl_ItemToRow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewListCtrl_ItemToRow }};
//     int ItemToRow(const wxDataViewItem &item) const;
static int LUACALL wxLua_wxDataViewListCtrl_ItemToRow(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call ItemToRow
    int returns = (self->ItemToRow(*item));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_PrependColumn1[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_wxDataViewColumn, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_PrependColumn1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_PrependColumn1[1] = {{ wxLua_wxDataViewListCtrl_PrependColumn1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewListCtrl_PrependColumn1 }};
//     void PrependColumn( wxDataViewColumn *column, const wxString &varianttype );
static int LUACALL wxLua_wxDataViewListCtrl_PrependColumn1(lua_State *L)
{
    // const wxString varianttype
    const wxString varianttype = wxlua_getwxStringtype(L, 3);
    // wxDataViewColumn column
    wxDataViewColumn * column = (wxDataViewColumn *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewColumn);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call PrependColumn
    self->PrependColumn(column, varianttype);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_PrependColumn[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_wxDataViewColumn, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_PrependColumn(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_PrependColumn[1] = {{ wxLua_wxDataViewListCtrl_PrependColumn, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewListCtrl_PrependColumn }};
//     virtual bool PrependColumn( wxDataViewColumn *column );
static int LUACALL wxLua_wxDataViewListCtrl_PrependColumn(lua_State *L)
{
    // wxDataViewColumn column
    wxDataViewColumn * column = (wxDataViewColumn *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewColumn);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call PrependColumn
    bool returns = (self->PrependColumn(column));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_RowToItem[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_RowToItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_RowToItem[1] = {{ wxLua_wxDataViewListCtrl_RowToItem, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewListCtrl_RowToItem }};
//     wxDataViewItem RowToItem(int row) const;
static int LUACALL wxLua_wxDataViewListCtrl_RowToItem(lua_State *L)
{
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call RowToItem
    // allocate a new object using the copy constructor
    wxDataViewItem* returns = new wxDataViewItem(self->RowToItem(row));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItem);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_SelectRow[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_SelectRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_SelectRow[1] = {{ wxLua_wxDataViewListCtrl_SelectRow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewListCtrl_SelectRow }};
//     void SelectRow(unsigned int row);
static int LUACALL wxLua_wxDataViewListCtrl_SelectRow(lua_State *L)
{
    // unsigned int row
    unsigned int row = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call SelectRow
    self->SelectRow(row);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_SetItemData[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_wxDataViewItem, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_SetItemData(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_SetItemData[1] = {{ wxLua_wxDataViewListCtrl_SetItemData, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewListCtrl_SetItemData }};
//     void SetItemData(const wxDataViewItem& item, wxUIntPtr data);
static int LUACALL wxLua_wxDataViewListCtrl_SetItemData(lua_State *L)
{
    // wxUIntPtr data
    wxUIntPtr data = (wxUIntPtr)wxlua_getnumbertype(L, 3);
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call SetItemData
    self->SetItemData(*item, data);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_SetTextValue[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_SetTextValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_SetTextValue[1] = {{ wxLua_wxDataViewListCtrl_SetTextValue, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxDataViewListCtrl_SetTextValue }};
//     void SetTextValue( const wxString &value, unsigned int row, unsigned int col );
static int LUACALL wxLua_wxDataViewListCtrl_SetTextValue(lua_State *L)
{
    // unsigned int col
    unsigned int col = (unsigned int)wxlua_getuintegertype(L, 4);
    // unsigned int row
    unsigned int row = (unsigned int)wxlua_getuintegertype(L, 3);
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call SetTextValue
    self->SetTextValue(value, row, col);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_SetToggleValue[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_TBOOLEAN, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_SetToggleValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_SetToggleValue[1] = {{ wxLua_wxDataViewListCtrl_SetToggleValue, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxDataViewListCtrl_SetToggleValue }};
//     void SetToggleValue( bool value, unsigned int row, unsigned int col );
static int LUACALL wxLua_wxDataViewListCtrl_SetToggleValue(lua_State *L)
{
    // unsigned int col
    unsigned int col = (unsigned int)wxlua_getuintegertype(L, 4);
    // unsigned int row
    unsigned int row = (unsigned int)wxlua_getuintegertype(L, 3);
    // bool value
    bool value = wxlua_getbooleantype(L, 2);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call SetToggleValue
    self->SetToggleValue(value, row, col);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_UnselectRow[] = { &wxluatype_wxDataViewListCtrl, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_UnselectRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_UnselectRow[1] = {{ wxLua_wxDataViewListCtrl_UnselectRow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewListCtrl_UnselectRow }};
//     void UnselectRow(unsigned int row);
static int LUACALL wxLua_wxDataViewListCtrl_UnselectRow(lua_State *L)
{
    // unsigned int row
    unsigned int row = (unsigned int)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewListCtrl * self = (wxDataViewListCtrl *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewListCtrl);
    // call UnselectRow
    self->UnselectRow(row);

    return 0;
}


#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewListCtrl_constructor1[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_wxValidator, NULL };
static int LUACALL wxLua_wxDataViewListCtrl_constructor1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_constructor1[1] = {{ wxLua_wxDataViewListCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxDataViewListCtrl_constructor1 }};
//            const wxValidator& validator = wxDefaultValidator );
static int LUACALL wxLua_wxDataViewListCtrl_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxValidator validator = wxDefaultValidator
    const wxValidator * validator = (argCount >= 6 ? (const wxValidator *)wxluaT_getuserdatatype(L, 6, wxluatype_wxValidator) : &wxDefaultValidator);
    // long style = wxDV_ROW_LINES
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxDV_ROW_LINES);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxDataViewListCtrl* returns = new wxDataViewListCtrl(parent, id, *pos, *size, style, *validator);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewListCtrl);

    return 1;
}

#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)

static int LUACALL wxLua_wxDataViewListCtrl_constructor(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_constructor[1] = {{ wxLua_wxDataViewListCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxDataViewListCtrl();
static int LUACALL wxLua_wxDataViewListCtrl_constructor(lua_State *L)
{
    // call constructor
    wxDataViewListCtrl* returns = new wxDataViewListCtrl();
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewListCtrl);

    return 1;
}




#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_AppendColumn_overload[] =
{
    { wxLua_wxDataViewListCtrl_AppendColumn1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewListCtrl_AppendColumn1 },
    { wxLua_wxDataViewListCtrl_AppendColumn, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewListCtrl_AppendColumn },
};
static int s_wxluafunc_wxLua_wxDataViewListCtrl_AppendColumn_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewListCtrl_AppendColumn_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_GetStore_overload[] =
{
    { wxLua_wxDataViewListCtrl_GetStore1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewListCtrl_GetStore1 },
    { wxLua_wxDataViewListCtrl_GetStore, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewListCtrl_GetStore },
};
static int s_wxluafunc_wxLua_wxDataViewListCtrl_GetStore_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewListCtrl_GetStore_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_InsertColumn_overload[] =
{
    { wxLua_wxDataViewListCtrl_InsertColumn1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxDataViewListCtrl_InsertColumn1 },
    { wxLua_wxDataViewListCtrl_InsertColumn, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewListCtrl_InsertColumn },
};
static int s_wxluafunc_wxLua_wxDataViewListCtrl_InsertColumn_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewListCtrl_InsertColumn_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_PrependColumn_overload[] =
{
    { wxLua_wxDataViewListCtrl_PrependColumn1, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewListCtrl_PrependColumn1 },
    { wxLua_wxDataViewListCtrl_PrependColumn, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewListCtrl_PrependColumn },
};
static int s_wxluafunc_wxLua_wxDataViewListCtrl_PrependColumn_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewListCtrl_PrependColumn_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

#if (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewListCtrl_constructor_overload[] =
{

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)
    { wxLua_wxDataViewListCtrl_constructor1, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxDataViewListCtrl_constructor1 },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)
    { wxLua_wxDataViewListCtrl_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxDataViewListCtrl_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewListCtrl_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

void wxLua_wxDataViewListCtrl_delete_function(void** p)
{
    wxDataViewListCtrl* o = (wxDataViewListCtrl*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewListCtrl_methods[] = {
#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
    { "AppendColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_AppendColumn_overload, s_wxluafunc_wxLua_wxDataViewListCtrl_AppendColumn_overload_count, 0 },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

    { "AppendIconTextColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_AppendIconTextColumn, 1, NULL },
    { "AppendProgressColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_AppendProgressColumn, 1, NULL },
    { "AppendTextColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_AppendTextColumn, 1, NULL },
    { "AppendToggleColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_AppendToggleColumn, 1, NULL },

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)
    { "Create", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_Create, 1, NULL },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS)

    { "DeleteAllItems", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_DeleteAllItems, 1, NULL },
    { "DeleteItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_DeleteItem, 1, NULL },
    { "GetItemCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_GetItemCount, 1, NULL },
    { "GetItemData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_GetItemData, 1, NULL },
    { "GetSelectedRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_GetSelectedRow, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
    { "GetStore", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_GetStore_overload, s_wxluafunc_wxLua_wxDataViewListCtrl_GetStore_overload_count, 0 },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

    { "GetTextValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_GetTextValue, 1, NULL },
    { "GetToggleValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_GetToggleValue, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
    { "InsertColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_InsertColumn_overload, s_wxluafunc_wxLua_wxDataViewListCtrl_InsertColumn_overload_count, 0 },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

    { "IsRowSelected", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_IsRowSelected, 1, NULL },
    { "ItemToRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_ItemToRow, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
    { "PrependColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_PrependColumn_overload, s_wxluafunc_wxLua_wxDataViewListCtrl_PrependColumn_overload_count, 0 },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

    { "RowToItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_RowToItem, 1, NULL },
    { "SelectRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_SelectRow, 1, NULL },
    { "SetItemData", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_SetItemData, 1, NULL },
    { "SetTextValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_SetTextValue, 1, NULL },
    { "SetToggleValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_SetToggleValue, 1, NULL },
    { "UnselectRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewListCtrl_UnselectRow, 1, NULL },

#if (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
    { "wxDataViewListCtrl", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewListCtrl_constructor_overload, s_wxluafunc_wxLua_wxDataViewListCtrl_constructor_overload_count, 0 },
#endif // (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)) && (wxLUA_USE_wxValidator && wxUSE_VALIDATORS))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

    { 0, 0, 0, 0 },
};

int wxDataViewListCtrl_methodCount = sizeof(wxDataViewListCtrl_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewEvent'
int wxluatype_wxDataViewEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_Clone[] = { &wxluatype_wxDataViewEvent, NULL };
static int LUACALL wxLua_wxDataViewEvent_Clone(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_Clone[1] = {{ wxLua_wxDataViewEvent_Clone, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewEvent_Clone }};
//     virtual wxEvent *Clone() const;
static int LUACALL wxLua_wxDataViewEvent_Clone(lua_State *L)
{
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call Clone
    wxEvent* returns = (wxEvent*)self->Clone();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxEvent);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_GetCacheFrom[] = { &wxluatype_wxDataViewEvent, NULL };
static int LUACALL wxLua_wxDataViewEvent_GetCacheFrom(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_GetCacheFrom[1] = {{ wxLua_wxDataViewEvent_GetCacheFrom, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewEvent_GetCacheFrom }};
//     int GetCacheFrom() const;
static int LUACALL wxLua_wxDataViewEvent_GetCacheFrom(lua_State *L)
{
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call GetCacheFrom
    int returns = (self->GetCacheFrom());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_GetCacheTo[] = { &wxluatype_wxDataViewEvent, NULL };
static int LUACALL wxLua_wxDataViewEvent_GetCacheTo(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_GetCacheTo[1] = {{ wxLua_wxDataViewEvent_GetCacheTo, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewEvent_GetCacheTo }};
//     int GetCacheTo() const;
static int LUACALL wxLua_wxDataViewEvent_GetCacheTo(lua_State *L)
{
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call GetCacheTo
    int returns = (self->GetCacheTo());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_GetColumn[] = { &wxluatype_wxDataViewEvent, NULL };
static int LUACALL wxLua_wxDataViewEvent_GetColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_GetColumn[1] = {{ wxLua_wxDataViewEvent_GetColumn, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewEvent_GetColumn }};
//     int GetColumn() const;
static int LUACALL wxLua_wxDataViewEvent_GetColumn(lua_State *L)
{
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call GetColumn
    int returns = (self->GetColumn());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_GetDataBuffer[] = { &wxluatype_wxDataViewEvent, NULL };
static int LUACALL wxLua_wxDataViewEvent_GetDataBuffer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_GetDataBuffer[1] = {{ wxLua_wxDataViewEvent_GetDataBuffer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewEvent_GetDataBuffer }};
// %override wxLua_wxDataViewEvent_GetDataBuffer
// void *GetDataBuffer() const
int wxLua_wxDataViewEvent_GetDataBuffer(lua_State *L)
{
    wxDataViewEvent *self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    lua_pushlstring(L, (const char *) self->GetDataBuffer(), self->GetDataSize());

    return 1;
}


#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_GetDataFormat[] = { &wxluatype_wxDataViewEvent, NULL };
static int LUACALL wxLua_wxDataViewEvent_GetDataFormat(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_GetDataFormat[1] = {{ wxLua_wxDataViewEvent_GetDataFormat, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewEvent_GetDataFormat }};
//     wxDataFormat GetDataFormat() const;
static int LUACALL wxLua_wxDataViewEvent_GetDataFormat(lua_State *L)
{
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call GetDataFormat
    // allocate a new object using the copy constructor
    wxDataFormat* returns = new wxDataFormat(self->GetDataFormat());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataFormat);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataFormat);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_GetDataObject[] = { &wxluatype_wxDataViewEvent, NULL };
static int LUACALL wxLua_wxDataViewEvent_GetDataObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_GetDataObject[1] = {{ wxLua_wxDataViewEvent_GetDataObject, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewEvent_GetDataObject }};
//     wxDataObject *GetDataObject() const;
static int LUACALL wxLua_wxDataViewEvent_GetDataObject(lua_State *L)
{
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call GetDataObject
    wxDataObject* returns = (wxDataObject*)self->GetDataObject();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataObject);

    return 1;
}

#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_GetDataSize[] = { &wxluatype_wxDataViewEvent, NULL };
static int LUACALL wxLua_wxDataViewEvent_GetDataSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_GetDataSize[1] = {{ wxLua_wxDataViewEvent_GetDataSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewEvent_GetDataSize }};
//     size_t GetDataSize() const;
static int LUACALL wxLua_wxDataViewEvent_GetDataSize(lua_State *L)
{
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call GetDataSize
    size_t returns = (self->GetDataSize());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_GetDataViewColumn[] = { &wxluatype_wxDataViewEvent, NULL };
static int LUACALL wxLua_wxDataViewEvent_GetDataViewColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_GetDataViewColumn[1] = {{ wxLua_wxDataViewEvent_GetDataViewColumn, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewEvent_GetDataViewColumn }};
//     wxDataViewColumn *GetDataViewColumn() const;
static int LUACALL wxLua_wxDataViewEvent_GetDataViewColumn(lua_State *L)
{
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call GetDataViewColumn
    wxDataViewColumn* returns = (wxDataViewColumn*)self->GetDataViewColumn();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_GetDragFlags[] = { &wxluatype_wxDataViewEvent, NULL };
static int LUACALL wxLua_wxDataViewEvent_GetDragFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_GetDragFlags[1] = {{ wxLua_wxDataViewEvent_GetDragFlags, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewEvent_GetDragFlags }};
//     int GetDragFlags() const;
static int LUACALL wxLua_wxDataViewEvent_GetDragFlags(lua_State *L)
{
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call GetDragFlags
    int returns = (self->GetDragFlags());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_GetDropEffect[] = { &wxluatype_wxDataViewEvent, NULL };
static int LUACALL wxLua_wxDataViewEvent_GetDropEffect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_GetDropEffect[1] = {{ wxLua_wxDataViewEvent_GetDropEffect, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewEvent_GetDropEffect }};
//     wxDragResult GetDropEffect() const;
static int LUACALL wxLua_wxDataViewEvent_GetDropEffect(lua_State *L)
{
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call GetDropEffect
    wxDragResult returns = (self->GetDropEffect());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_GetItem[] = { &wxluatype_wxDataViewEvent, NULL };
static int LUACALL wxLua_wxDataViewEvent_GetItem(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_GetItem[1] = {{ wxLua_wxDataViewEvent_GetItem, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewEvent_GetItem }};
//     wxDataViewItem GetItem() const;
static int LUACALL wxLua_wxDataViewEvent_GetItem(lua_State *L)
{
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call GetItem
    // allocate a new object using the copy constructor
    wxDataViewItem* returns = new wxDataViewItem(self->GetItem());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewItem);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItem);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_GetModel[] = { &wxluatype_wxDataViewEvent, NULL };
static int LUACALL wxLua_wxDataViewEvent_GetModel(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_GetModel[1] = {{ wxLua_wxDataViewEvent_GetModel, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewEvent_GetModel }};
//     wxDataViewModel* GetModel() const;
static int LUACALL wxLua_wxDataViewEvent_GetModel(lua_State *L)
{
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call GetModel
    wxDataViewModel* returns = (wxDataViewModel*)self->GetModel();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewModel);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_GetPosition[] = { &wxluatype_wxDataViewEvent, NULL };
static int LUACALL wxLua_wxDataViewEvent_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_GetPosition[1] = {{ wxLua_wxDataViewEvent_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewEvent_GetPosition }};
//     wxPoint GetPosition() const;
static int LUACALL wxLua_wxDataViewEvent_GetPosition(lua_State *L)
{
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call GetPosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPosition());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxPoint);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_GetProposedDropIndex[] = { &wxluatype_wxDataViewEvent, NULL };
static int LUACALL wxLua_wxDataViewEvent_GetProposedDropIndex(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_GetProposedDropIndex[1] = {{ wxLua_wxDataViewEvent_GetProposedDropIndex, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewEvent_GetProposedDropIndex }};
//     int GetProposedDropIndex() const;
static int LUACALL wxLua_wxDataViewEvent_GetProposedDropIndex(lua_State *L)
{
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call GetProposedDropIndex
    int returns = (self->GetProposedDropIndex());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_IsEditCancelled[] = { &wxluatype_wxDataViewEvent, NULL };
static int LUACALL wxLua_wxDataViewEvent_IsEditCancelled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_IsEditCancelled[1] = {{ wxLua_wxDataViewEvent_IsEditCancelled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewEvent_IsEditCancelled }};
//     bool IsEditCancelled() const;
static int LUACALL wxLua_wxDataViewEvent_IsEditCancelled(lua_State *L)
{
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call IsEditCancelled
    bool returns = (self->IsEditCancelled());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_SetCache[] = { &wxluatype_wxDataViewEvent, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewEvent_SetCache(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_SetCache[1] = {{ wxLua_wxDataViewEvent_SetCache, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewEvent_SetCache }};
//     void SetCache(int from, int to);
static int LUACALL wxLua_wxDataViewEvent_SetCache(lua_State *L)
{
    // int to
    int to = (int)wxlua_getnumbertype(L, 3);
    // int from
    int from = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call SetCache
    self->SetCache(from, to);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_SetColumn[] = { &wxluatype_wxDataViewEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewEvent_SetColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_SetColumn[1] = {{ wxLua_wxDataViewEvent_SetColumn, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewEvent_SetColumn }};
//     void SetColumn( int col );
static int LUACALL wxLua_wxDataViewEvent_SetColumn(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call SetColumn
    self->SetColumn(col);

    return 0;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_SetDataBuffer[] = { &wxluatype_wxDataViewEvent, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxDataViewEvent_SetDataBuffer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_SetDataBuffer[1] = {{ wxLua_wxDataViewEvent_SetDataBuffer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewEvent_SetDataBuffer }};
//     void SetDataBuffer( void* buf );
static int LUACALL wxLua_wxDataViewEvent_SetDataBuffer(lua_State *L)
{
    // void buf
    void * buf = (void *)wxlua_touserdata(L, 2);
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call SetDataBuffer
    self->SetDataBuffer(buf);

    return 0;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_SetDataFormat[] = { &wxluatype_wxDataViewEvent, &wxluatype_wxDataFormat, NULL };
static int LUACALL wxLua_wxDataViewEvent_SetDataFormat(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_SetDataFormat[1] = {{ wxLua_wxDataViewEvent_SetDataFormat, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewEvent_SetDataFormat }};
//     void SetDataFormat( const wxDataFormat &format );
static int LUACALL wxLua_wxDataViewEvent_SetDataFormat(lua_State *L)
{
    // const wxDataFormat format
    const wxDataFormat * format = (const wxDataFormat *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataFormat);
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call SetDataFormat
    self->SetDataFormat(*format);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_SetDataObject[] = { &wxluatype_wxDataViewEvent, &wxluatype_wxDataObject, NULL };
static int LUACALL wxLua_wxDataViewEvent_SetDataObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_SetDataObject[1] = {{ wxLua_wxDataViewEvent_SetDataObject, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewEvent_SetDataObject }};
//     void SetDataObject(%ungc wxDataObject *obj);
static int LUACALL wxLua_wxDataViewEvent_SetDataObject(lua_State *L)
{
    // wxDataObject obj
    wxDataObject * obj = (wxDataObject *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataObject);
    if (wxluaO_isgcobject(L, obj)) wxluaO_undeletegcobject(L, obj);
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call SetDataObject
    self->SetDataObject(obj);

    return 0;
}

#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_SetDataSize[] = { &wxluatype_wxDataViewEvent, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewEvent_SetDataSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_SetDataSize[1] = {{ wxLua_wxDataViewEvent_SetDataSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewEvent_SetDataSize }};
//     void SetDataSize( size_t size );
static int LUACALL wxLua_wxDataViewEvent_SetDataSize(lua_State *L)
{
    // size_t size
    size_t size = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call SetDataSize
    self->SetDataSize(size);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_SetDragFlags[] = { &wxluatype_wxDataViewEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewEvent_SetDragFlags(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_SetDragFlags[1] = {{ wxLua_wxDataViewEvent_SetDragFlags, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewEvent_SetDragFlags }};
//     void SetDragFlags( int flags );
static int LUACALL wxLua_wxDataViewEvent_SetDragFlags(lua_State *L)
{
    // int flags
    int flags = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call SetDragFlags
    self->SetDragFlags(flags);

    return 0;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_SetDropEffect[] = { &wxluatype_wxDataViewEvent, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewEvent_SetDropEffect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_SetDropEffect[1] = {{ wxLua_wxDataViewEvent_SetDropEffect, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewEvent_SetDropEffect }};
//     void SetDropEffect( wxDragResult effect );
static int LUACALL wxLua_wxDataViewEvent_SetDropEffect(lua_State *L)
{
    // wxDragResult effect
    wxDragResult effect = (wxDragResult)wxlua_getenumtype(L, 2);
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call SetDropEffect
    self->SetDropEffect(effect);

    return 0;
}

#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_SetEditCancelled[] = { &wxluatype_wxDataViewEvent, NULL };
static int LUACALL wxLua_wxDataViewEvent_SetEditCancelled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_SetEditCancelled[1] = {{ wxLua_wxDataViewEvent_SetEditCancelled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewEvent_SetEditCancelled }};
//     void SetEditCancelled();
static int LUACALL wxLua_wxDataViewEvent_SetEditCancelled(lua_State *L)
{
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call SetEditCancelled
    self->SetEditCancelled();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_SetPosition[] = { &wxluatype_wxDataViewEvent, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewEvent_SetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_SetPosition[1] = {{ wxLua_wxDataViewEvent_SetPosition, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewEvent_SetPosition }};
//     void SetPosition( int x, int y );
static int LUACALL wxLua_wxDataViewEvent_SetPosition(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call SetPosition
    self->SetPosition(x, y);

    return 0;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_SetProposedDropIndex[] = { &wxluatype_wxDataViewEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewEvent_SetProposedDropIndex(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_SetProposedDropIndex[1] = {{ wxLua_wxDataViewEvent_SetProposedDropIndex, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewEvent_SetProposedDropIndex }};
//     void SetProposedDropIndex(int index);
static int LUACALL wxLua_wxDataViewEvent_SetProposedDropIndex(lua_State *L)
{
    // int index
    int index = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDataViewEvent * self = (wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call SetProposedDropIndex
    self->SetProposedDropIndex(index);

    return 0;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_delete[] = { &wxluatype_wxDataViewEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxDataViewEvent_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_constructor4[] = { &wxluatype_wxDataViewEvent, NULL };
static int LUACALL wxLua_wxDataViewEvent_constructor4(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_constructor4[1] = {{ wxLua_wxDataViewEvent_constructor4, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxDataViewEvent_constructor4 }};
//     wxDataViewEvent(const wxDataViewEvent& event);
static int LUACALL wxLua_wxDataViewEvent_constructor4(lua_State *L)
{
    // const wxDataViewEvent event
    const wxDataViewEvent * event = (const wxDataViewEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewEvent);
    // call constructor
    wxDataViewEvent* returns = new wxDataViewEvent(*event);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewEvent);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_constructor3[] = { &wxluatype_TNUMBER, &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewEvent_constructor3(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_constructor3[1] = {{ wxLua_wxDataViewEvent_constructor3, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxDataViewEvent_constructor3 }};
//     wxDataViewEvent(wxEventType evtType, wxDataViewCtrlBase* dvc, const wxDataViewItem& item);
static int LUACALL wxLua_wxDataViewEvent_constructor3(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewItem);
    // wxDataViewCtrlBase dvc
    wxDataViewCtrlBase * dvc = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewCtrlBase);
    // wxEventType evtType
    wxEventType evtType = (wxEventType)wxlua_getnumbertype(L, 1);
    // call constructor
    wxDataViewEvent* returns = new wxDataViewEvent(evtType, dvc, *item);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewEvent);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_constructor2[] = { &wxluatype_TNUMBER, &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewColumn, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewEvent_constructor2(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_constructor2[1] = {{ wxLua_wxDataViewEvent_constructor2, WXLUAMETHOD_CONSTRUCTOR, 4, 4, s_wxluatypeArray_wxLua_wxDataViewEvent_constructor2 }};
//     wxDataViewEvent(wxEventType evtType,  wxDataViewCtrlBase* dvc, wxDataViewColumn* column, const wxDataViewItem& item);
static int LUACALL wxLua_wxDataViewEvent_constructor2(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 4, wxluatype_wxDataViewItem);
    // wxDataViewColumn column
    wxDataViewColumn * column = (wxDataViewColumn *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewColumn);
    // wxDataViewCtrlBase dvc
    wxDataViewCtrlBase * dvc = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewCtrlBase);
    // wxEventType evtType
    wxEventType evtType = (wxEventType)wxlua_getnumbertype(L, 1);
    // call constructor
    wxDataViewEvent* returns = new wxDataViewEvent(evtType, dvc, column, *item);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewEvent);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewEvent_constructor1[] = { &wxluatype_TNUMBER, &wxluatype_wxDataViewCtrlBase, &wxluatype_wxDataViewColumn, NULL };
static int LUACALL wxLua_wxDataViewEvent_constructor1(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_constructor1[1] = {{ wxLua_wxDataViewEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxDataViewEvent_constructor1 }};
//     wxDataViewEvent(wxEventType evtType,  wxDataViewCtrlBase* dvc, wxDataViewColumn* column);
static int LUACALL wxLua_wxDataViewEvent_constructor1(lua_State *L)
{
    // wxDataViewColumn column
    wxDataViewColumn * column = (wxDataViewColumn *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewColumn);
    // wxDataViewCtrlBase dvc
    wxDataViewCtrlBase * dvc = (wxDataViewCtrlBase *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewCtrlBase);
    // wxEventType evtType
    wxEventType evtType = (wxEventType)wxlua_getnumbertype(L, 1);
    // call constructor
    wxDataViewEvent* returns = new wxDataViewEvent(evtType, dvc, column);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewEvent);

    return 1;
}

static int LUACALL wxLua_wxDataViewEvent_constructor(lua_State *L);
// // // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_constructor[1] = {{ wxLua_wxDataViewEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxDataViewEvent();
static int LUACALL wxLua_wxDataViewEvent_constructor(lua_State *L)
{
    // call constructor
    wxDataViewEvent* returns = new wxDataViewEvent();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxDataViewEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewEvent);

    return 1;
}




#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewEvent_constructor_overload[] =
{
    { wxLua_wxDataViewEvent_constructor4, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxDataViewEvent_constructor4 },
    { wxLua_wxDataViewEvent_constructor3, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxDataViewEvent_constructor3 },
    { wxLua_wxDataViewEvent_constructor2, WXLUAMETHOD_CONSTRUCTOR, 4, 4, s_wxluatypeArray_wxLua_wxDataViewEvent_constructor2 },
    { wxLua_wxDataViewEvent_constructor1, WXLUAMETHOD_CONSTRUCTOR, 3, 3, s_wxluatypeArray_wxLua_wxDataViewEvent_constructor1 },
    { wxLua_wxDataViewEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxDataViewEvent_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewEvent_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

void wxLua_wxDataViewEvent_delete_function(void** p)
{
    wxDataViewEvent* o = (wxDataViewEvent*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewEvent_methods[] = {
    { "Clone", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_Clone, 1, NULL },
    { "GetCacheFrom", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_GetCacheFrom, 1, NULL },
    { "GetCacheTo", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_GetCacheTo, 1, NULL },
    { "GetColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_GetColumn, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)
    { "GetDataBuffer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_GetDataBuffer, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
    { "GetDataFormat", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_GetDataFormat, 1, NULL },
    { "GetDataObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_GetDataObject, 1, NULL },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)
    { "GetDataSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_GetDataSize, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)

    { "GetDataViewColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_GetDataViewColumn, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)
    { "GetDragFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_GetDragFlags, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)
    { "GetDropEffect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_GetDropEffect, 1, NULL },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)

    { "GetItem", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_GetItem, 1, NULL },
    { "GetModel", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_GetModel, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_GetPosition, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)
    { "GetProposedDropIndex", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_GetProposedDropIndex, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)

    { "IsEditCancelled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_IsEditCancelled, 1, NULL },
    { "SetCache", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_SetCache, 1, NULL },
    { "SetColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_SetColumn, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)
    { "SetDataBuffer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_SetDataBuffer, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)
    { "SetDataFormat", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_SetDataFormat, 1, NULL },
    { "SetDataObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_SetDataObject, 1, NULL },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDataObject && wxUSE_DATAOBJ)

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)
    { "SetDataSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_SetDataSize, 1, NULL },
    { "SetDragFlags", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_SetDragFlags, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)
    { "SetDropEffect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_SetDropEffect, 1, NULL },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)) && (wxLUA_USE_wxDragDrop && wxUSE_DRAG_AND_DROP)

    { "SetEditCancelled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_SetEditCancelled, 1, NULL },
    { "SetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_SetPosition, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)
    { "SetProposedDropIndex", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewEvent_SetProposedDropIndex, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_DRAG_AND_DROP)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxDataViewEvent_delete, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
    { "wxDataViewEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewEvent_constructor_overload, s_wxluafunc_wxLua_wxDataViewEvent_constructor_overload_count, 0 },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

    { 0, 0, 0, 0 },
};

int wxDataViewEvent_methodCount = sizeof(wxDataViewEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl



// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxadv_dvrenderers.cpp was generated by genwxbind.lua
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------



#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewIconText
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewIconText'
int wxluatype_wxDataViewIconText = WXLUA_TUNKNOWN;

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewIconText_GetIcon1[] = { &wxluatype_wxDataViewIconText, NULL };
static int LUACALL wxLua_wxDataViewIconText_GetIcon1(lua_State *L);
// // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewIconText_GetIcon1[1] = {{ wxLua_wxDataViewIconText_GetIcon1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewIconText_GetIcon1 }};
//     %wxchkver_3_2_0 wxIcon GetIcon() const;
static int LUACALL wxLua_wxDataViewIconText_GetIcon1(lua_State *L)
{
    // get this
    wxDataViewIconText * self = (wxDataViewIconText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewIconText);
    // call GetIcon
    // allocate a new object using the copy constructor
    wxIcon* returns = new wxIcon(self->GetIcon());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxIcon);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}

#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon)

#if ((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewIconText_GetIcon[] = { &wxluatype_wxDataViewIconText, NULL };
static int LUACALL wxLua_wxDataViewIconText_GetIcon(lua_State *L);
// // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewIconText_GetIcon[1] = {{ wxLua_wxDataViewIconText_GetIcon, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewIconText_GetIcon }};
//     !%wxchkver_3_2_0 const wxIcon &GetIcon() const;
static int LUACALL wxLua_wxDataViewIconText_GetIcon(lua_State *L)
{
    // get this
    wxDataViewIconText * self = (wxDataViewIconText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewIconText);
    // call GetIcon
    const wxIcon* returns = (const wxIcon*)&self->GetIcon();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxIcon);

    return 1;
}

#endif // ((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewIconText_GetText[] = { &wxluatype_wxDataViewIconText, NULL };
static int LUACALL wxLua_wxDataViewIconText_GetText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewIconText_GetText[1] = {{ wxLua_wxDataViewIconText_GetText, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewIconText_GetText }};
//     wxString GetText() const;
static int LUACALL wxLua_wxDataViewIconText_GetText(lua_State *L)
{
    // get this
    wxDataViewIconText * self = (wxDataViewIconText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewIconText);
    // call GetText
    wxString returns = (self->GetText());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewIconText_SetIcon[] = { &wxluatype_wxDataViewIconText, &wxluatype_wxIcon, NULL };
static int LUACALL wxLua_wxDataViewIconText_SetIcon(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewIconText_SetIcon[1] = {{ wxLua_wxDataViewIconText_SetIcon, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewIconText_SetIcon }};
//     void SetIcon( const wxIcon &icon );
static int LUACALL wxLua_wxDataViewIconText_SetIcon(lua_State *L)
{
    // const wxIcon icon
    const wxIcon * icon = (const wxIcon *)wxluaT_getuserdatatype(L, 2, wxluatype_wxIcon);
    // get this
    wxDataViewIconText * self = (wxDataViewIconText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewIconText);
    // call SetIcon
    self->SetIcon(*icon);

    return 0;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewIconText_SetText[] = { &wxluatype_wxDataViewIconText, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxDataViewIconText_SetText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewIconText_SetText[1] = {{ wxLua_wxDataViewIconText_SetText, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewIconText_SetText }};
//     void SetText( const wxString &text );
static int LUACALL wxLua_wxDataViewIconText_SetText(lua_State *L)
{
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewIconText * self = (wxDataViewIconText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewIconText);
    // call SetText
    self->SetText(text);

    return 0;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewIconText_constructor[] = { &wxluatype_TSTRING, &wxluatype_wxIcon, NULL };
static int LUACALL wxLua_wxDataViewIconText_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewIconText_constructor[1] = {{ wxLua_wxDataViewIconText_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxDataViewIconText_constructor }};
//     wxDataViewIconText(const wxString &text = wxEmptyString, const wxIcon& icon = wxNullIcon );
static int LUACALL wxLua_wxDataViewIconText_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxIcon icon = wxNullIcon
    const wxIcon * icon = (argCount >= 2 ? (const wxIcon *)wxluaT_getuserdatatype(L, 2, wxluatype_wxIcon) : &wxNullIcon);
    // const wxString text = wxEmptyString
    const wxString text = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    wxDataViewIconText* returns = new wxDataViewIconText(text, *icon);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewIconText);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)



#if (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon))||(((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewIconText_GetIcon_overload[] =
{

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon)
    { wxLua_wxDataViewIconText_GetIcon1, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewIconText_GetIcon1 },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon)

#if ((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)
    { wxLua_wxDataViewIconText_GetIcon, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewIconText_GetIcon },
#endif // ((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon)
};
static int s_wxluafunc_wxLua_wxDataViewIconText_GetIcon_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewIconText_GetIcon_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon))||(((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon))

void wxLua_wxDataViewIconText_delete_function(void** p)
{
    wxDataViewIconText* o = (wxDataViewIconText*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewIconText_methods[] = {
#if (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon))||(((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon))
    { "GetIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewIconText_GetIcon_overload, s_wxluafunc_wxLua_wxDataViewIconText_GetIcon_overload_count, 0 },
#endif // (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxCHECK_VERSION(3,2,0))) && (wxLUA_USE_wxIcon))||(((!wxCHECK_VERSION(3,2,0)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)) && (wxLUA_USE_wxIcon))

    { "GetText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewIconText_GetText, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)
    { "SetIcon", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewIconText_SetIcon, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)

    { "SetText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewIconText_SetText, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)
    { "wxDataViewIconText", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewIconText_constructor, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxIcon)

    { 0, 0, 0, 0 },
};

int wxDataViewIconText_methodCount = sizeof(wxDataViewIconText_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewCheckIconText
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewCheckIconText'
int wxluatype_wxDataViewCheckIconText = WXLUA_TUNKNOWN;

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCheckIconText_GetCheckedState[] = { &wxluatype_wxDataViewCheckIconText, NULL };
static int LUACALL wxLua_wxDataViewCheckIconText_GetCheckedState(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCheckIconText_GetCheckedState[1] = {{ wxLua_wxDataViewCheckIconText_GetCheckedState, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCheckIconText_GetCheckedState }};
//     wxCheckBoxState GetCheckedState() const;
static int LUACALL wxLua_wxDataViewCheckIconText_GetCheckedState(lua_State *L)
{
    // get this
    wxDataViewCheckIconText * self = (wxDataViewCheckIconText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCheckIconText);
    // call GetCheckedState
    wxCheckBoxState returns = (self->GetCheckedState());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCheckIconText_SetCheckedState[] = { &wxluatype_wxDataViewCheckIconText, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewCheckIconText_SetCheckedState(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCheckIconText_SetCheckedState[1] = {{ wxLua_wxDataViewCheckIconText_SetCheckedState, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCheckIconText_SetCheckedState }};
//     void SetCheckedState(wxCheckBoxState state);
static int LUACALL wxLua_wxDataViewCheckIconText_SetCheckedState(lua_State *L)
{
    // wxCheckBoxState state
    wxCheckBoxState state = (wxCheckBoxState)wxlua_getenumtype(L, 2);
    // get this
    wxDataViewCheckIconText * self = (wxDataViewCheckIconText *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCheckIconText);
    // call SetCheckedState
    self->SetCheckedState(state);

    return 0;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)) && (wxLUA_USE_wxIcon)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCheckIconText_constructor1[] = { &wxluatype_TSTRING, &wxluatype_wxIcon, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewCheckIconText_constructor1(lua_State *L);
// // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCheckIconText_constructor1[1] = {{ wxLua_wxDataViewCheckIconText_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 3, s_wxluatypeArray_wxLua_wxDataViewCheckIconText_constructor1 }};
//                             wxCheckBoxState checkedState = wxCHK_UNDETERMINED);
static int LUACALL wxLua_wxDataViewCheckIconText_constructor1(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxCheckBoxState checkedState = wxCHK_UNDETERMINED
    wxCheckBoxState checkedState = (argCount >= 3 ? (wxCheckBoxState)wxlua_getenumtype(L, 3) : wxCHK_UNDETERMINED);
    // const wxIcon icon = wxNullIcon
    const wxIcon * icon = (argCount >= 2 ? (const wxIcon *)wxluaT_getuserdatatype(L, 2, wxluatype_wxIcon) : &wxNullIcon);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 1);
    // call constructor
    wxDataViewCheckIconText* returns = new wxDataViewCheckIconText(text, *icon, checkedState);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewCheckIconText);

    return 1;
}

#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)) && (wxLUA_USE_wxIcon)

static int LUACALL wxLua_wxDataViewCheckIconText_constructor(lua_State *L);
// // static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCheckIconText_constructor[1] = {{ wxLua_wxDataViewCheckIconText_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
// 	wxDataViewCheckIconText()
static int LUACALL wxLua_wxDataViewCheckIconText_constructor(lua_State *L)
{
    // call constructor
    wxDataViewCheckIconText* returns = new wxDataViewCheckIconText();
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewCheckIconText);

    return 1;
}




#if (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)) && (wxLUA_USE_wxIcon))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCheckIconText_constructor_overload[] =
{

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)) && (wxLUA_USE_wxIcon)
    { wxLua_wxDataViewCheckIconText_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 3, s_wxluatypeArray_wxLua_wxDataViewCheckIconText_constructor1 },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)) && (wxLUA_USE_wxIcon)
    { wxLua_wxDataViewCheckIconText_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxDataViewCheckIconText_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxDataViewCheckIconText_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)) && (wxLUA_USE_wxIcon))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

void wxLua_wxDataViewCheckIconText_delete_function(void** p)
{
    wxDataViewCheckIconText* o = (wxDataViewCheckIconText*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewCheckIconText_methods[] = {
#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)
    { "GetCheckedState", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCheckIconText_GetCheckedState, 1, NULL },
    { "SetCheckedState", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCheckIconText_SetCheckedState, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)

#if (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)) && (wxLUA_USE_wxIcon))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
    { "wxDataViewCheckIconText", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewCheckIconText_constructor_overload, s_wxluafunc_wxLua_wxDataViewCheckIconText_constructor_overload_count, 0 },
#endif // (((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxCheckBox && wxUSE_CHECKBOX)) && (wxLUA_USE_wxIcon))||(wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

    { 0, 0, 0, 0 },
};

int wxDataViewCheckIconText_methodCount = sizeof(wxDataViewCheckIconText_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewValueAdjuster
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewValueAdjuster'
int wxluatype_wxDataViewValueAdjuster = WXLUA_TUNKNOWN;



void wxLua_wxDataViewValueAdjuster_delete_function(void** p)
{
    wxDataViewValueAdjuster* o = (wxDataViewValueAdjuster*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewValueAdjuster_methods[] = {
    { 0, 0, 0, 0 },
};

int wxDataViewValueAdjuster_methodCount = sizeof(wxDataViewValueAdjuster_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewRendererBase
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewRendererBase'
int wxluatype_wxDataViewRendererBase = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewRendererBase_CancelEditing[] = { &wxluatype_wxDataViewRendererBase, NULL };
static int LUACALL wxLua_wxDataViewRendererBase_CancelEditing(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewRendererBase_CancelEditing[1] = {{ wxLua_wxDataViewRendererBase_CancelEditing, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewRendererBase_CancelEditing }};
//     virtual void CancelEditing();
static int LUACALL wxLua_wxDataViewRendererBase_CancelEditing(lua_State *L)
{
    // get this
    wxDataViewRendererBase * self = (wxDataViewRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewRendererBase);
    // call CancelEditing
    self->CancelEditing();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewRendererBase_FinishEditing[] = { &wxluatype_wxDataViewRendererBase, NULL };
static int LUACALL wxLua_wxDataViewRendererBase_FinishEditing(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewRendererBase_FinishEditing[1] = {{ wxLua_wxDataViewRendererBase_FinishEditing, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewRendererBase_FinishEditing }};
//     virtual bool FinishEditing();
static int LUACALL wxLua_wxDataViewRendererBase_FinishEditing(lua_State *L)
{
    // get this
    wxDataViewRendererBase * self = (wxDataViewRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewRendererBase);
    // call FinishEditing
    bool returns = (self->FinishEditing());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_ACCESSIBILITY)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewRendererBase_GetAccessibleDescription[] = { &wxluatype_wxDataViewRendererBase, NULL };
static int LUACALL wxLua_wxDataViewRendererBase_GetAccessibleDescription(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewRendererBase_GetAccessibleDescription[1] = {{ wxLua_wxDataViewRendererBase_GetAccessibleDescription, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewRendererBase_GetAccessibleDescription }};
//     virtual wxString GetAccessibleDescription() const = 0;
static int LUACALL wxLua_wxDataViewRendererBase_GetAccessibleDescription(lua_State *L)
{
    // get this
    wxDataViewRendererBase * self = (wxDataViewRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewRendererBase);
    // call GetAccessibleDescription
    wxString returns = (self->GetAccessibleDescription());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_ACCESSIBILITY)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewRendererBase_GetAlignment[] = { &wxluatype_wxDataViewRendererBase, NULL };
static int LUACALL wxLua_wxDataViewRendererBase_GetAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewRendererBase_GetAlignment[1] = {{ wxLua_wxDataViewRendererBase_GetAlignment, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewRendererBase_GetAlignment }};
//     virtual int GetAlignment() const = 0;
static int LUACALL wxLua_wxDataViewRendererBase_GetAlignment(lua_State *L)
{
    // get this
    wxDataViewRendererBase * self = (wxDataViewRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewRendererBase);
    // call GetAlignment
    int returns = (self->GetAlignment());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewRendererBase_GetEditorCtrl[] = { &wxluatype_wxDataViewRendererBase, NULL };
static int LUACALL wxLua_wxDataViewRendererBase_GetEditorCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewRendererBase_GetEditorCtrl[1] = {{ wxLua_wxDataViewRendererBase_GetEditorCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewRendererBase_GetEditorCtrl }};
//     wxWindow *GetEditorCtrl() const;
static int LUACALL wxLua_wxDataViewRendererBase_GetEditorCtrl(lua_State *L)
{
    // get this
    wxDataViewRendererBase * self = (wxDataViewRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewRendererBase);
    // call GetEditorCtrl
    wxWindow* returns = (wxWindow*)self->GetEditorCtrl();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewRendererBase_GetEffectiveAlignment[] = { &wxluatype_wxDataViewRendererBase, NULL };
static int LUACALL wxLua_wxDataViewRendererBase_GetEffectiveAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewRendererBase_GetEffectiveAlignment[1] = {{ wxLua_wxDataViewRendererBase_GetEffectiveAlignment, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewRendererBase_GetEffectiveAlignment }};
//     int GetEffectiveAlignment() const;
static int LUACALL wxLua_wxDataViewRendererBase_GetEffectiveAlignment(lua_State *L)
{
    // get this
    wxDataViewRendererBase * self = (wxDataViewRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewRendererBase);
    // call GetEffectiveAlignment
    int returns = (self->GetEffectiveAlignment());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewRendererBase_GetEffectiveAlignmentIfKnown[] = { &wxluatype_wxDataViewRendererBase, NULL };
static int LUACALL wxLua_wxDataViewRendererBase_GetEffectiveAlignmentIfKnown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewRendererBase_GetEffectiveAlignmentIfKnown[1] = {{ wxLua_wxDataViewRendererBase_GetEffectiveAlignmentIfKnown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewRendererBase_GetEffectiveAlignmentIfKnown }};
//     int GetEffectiveAlignmentIfKnown() const;
static int LUACALL wxLua_wxDataViewRendererBase_GetEffectiveAlignmentIfKnown(lua_State *L)
{
    // get this
    wxDataViewRendererBase * self = (wxDataViewRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewRendererBase);
    // call GetEffectiveAlignmentIfKnown
    int returns = (self->GetEffectiveAlignmentIfKnown());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewRendererBase_GetMode[] = { &wxluatype_wxDataViewRendererBase, NULL };
static int LUACALL wxLua_wxDataViewRendererBase_GetMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewRendererBase_GetMode[1] = {{ wxLua_wxDataViewRendererBase_GetMode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewRendererBase_GetMode }};
//     virtual wxDataViewCellMode GetMode() const = 0;
static int LUACALL wxLua_wxDataViewRendererBase_GetMode(lua_State *L)
{
    // get this
    wxDataViewRendererBase * self = (wxDataViewRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewRendererBase);
    // call GetMode
    wxDataViewCellMode returns = (self->GetMode());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewRendererBase_GetOwner[] = { &wxluatype_wxDataViewRendererBase, NULL };
static int LUACALL wxLua_wxDataViewRendererBase_GetOwner(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewRendererBase_GetOwner[1] = {{ wxLua_wxDataViewRendererBase_GetOwner, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewRendererBase_GetOwner }};
//     wxDataViewColumn* GetOwner() const;
static int LUACALL wxLua_wxDataViewRendererBase_GetOwner(lua_State *L)
{
    // get this
    wxDataViewRendererBase * self = (wxDataViewRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewRendererBase);
    // call GetOwner
    wxDataViewColumn* returns = (wxDataViewColumn*)self->GetOwner();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewColumn);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewRendererBase_GetVariantType[] = { &wxluatype_wxDataViewRendererBase, NULL };
static int LUACALL wxLua_wxDataViewRendererBase_GetVariantType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewRendererBase_GetVariantType[1] = {{ wxLua_wxDataViewRendererBase_GetVariantType, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewRendererBase_GetVariantType }};
//     wxString GetVariantType() const;
static int LUACALL wxLua_wxDataViewRendererBase_GetVariantType(lua_State *L)
{
    // get this
    wxDataViewRendererBase * self = (wxDataViewRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewRendererBase);
    // call GetVariantType
    wxString returns = (self->GetVariantType());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewRendererBase_HasEditorCtrl[] = { &wxluatype_wxDataViewRendererBase, NULL };
static int LUACALL wxLua_wxDataViewRendererBase_HasEditorCtrl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewRendererBase_HasEditorCtrl[1] = {{ wxLua_wxDataViewRendererBase_HasEditorCtrl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewRendererBase_HasEditorCtrl }};
//     virtual bool HasEditorCtrl() const;
static int LUACALL wxLua_wxDataViewRendererBase_HasEditorCtrl(lua_State *L)
{
    // get this
    wxDataViewRendererBase * self = (wxDataViewRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewRendererBase);
    // call HasEditorCtrl
    bool returns = (self->HasEditorCtrl());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewRendererBase_IsCustomRenderer[] = { &wxluatype_wxDataViewRendererBase, NULL };
static int LUACALL wxLua_wxDataViewRendererBase_IsCustomRenderer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewRendererBase_IsCustomRenderer[1] = {{ wxLua_wxDataViewRendererBase_IsCustomRenderer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewRendererBase_IsCustomRenderer }};
//     virtual bool IsCustomRenderer() const;
static int LUACALL wxLua_wxDataViewRendererBase_IsCustomRenderer(lua_State *L)
{
    // get this
    wxDataViewRendererBase * self = (wxDataViewRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewRendererBase);
    // call IsCustomRenderer
    bool returns = (self->IsCustomRenderer());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewRendererBase_NotifyEditingStarted[] = { &wxluatype_wxDataViewRendererBase, &wxluatype_wxDataViewItem, NULL };
static int LUACALL wxLua_wxDataViewRendererBase_NotifyEditingStarted(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewRendererBase_NotifyEditingStarted[1] = {{ wxLua_wxDataViewRendererBase_NotifyEditingStarted, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewRendererBase_NotifyEditingStarted }};
//     void NotifyEditingStarted(const wxDataViewItem& item);
static int LUACALL wxLua_wxDataViewRendererBase_NotifyEditingStarted(lua_State *L)
{
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewRendererBase * self = (wxDataViewRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewRendererBase);
    // call NotifyEditingStarted
    self->NotifyEditingStarted(*item);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewRendererBase_SetAlignment[] = { &wxluatype_wxDataViewRendererBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewRendererBase_SetAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewRendererBase_SetAlignment[1] = {{ wxLua_wxDataViewRendererBase_SetAlignment, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewRendererBase_SetAlignment }};
//     virtual void SetAlignment( int align ) = 0;
static int LUACALL wxLua_wxDataViewRendererBase_SetAlignment(lua_State *L)
{
    // int align
    int align = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxDataViewRendererBase * self = (wxDataViewRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewRendererBase);
    // call SetAlignment
    self->SetAlignment(align);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewRendererBase_SetMode[] = { &wxluatype_wxDataViewRendererBase, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewRendererBase_SetMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewRendererBase_SetMode[1] = {{ wxLua_wxDataViewRendererBase_SetMode, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewRendererBase_SetMode }};
//     virtual void SetMode( wxDataViewCellMode mode ) = 0;
static int LUACALL wxLua_wxDataViewRendererBase_SetMode(lua_State *L)
{
    // wxDataViewCellMode mode
    wxDataViewCellMode mode = (wxDataViewCellMode)wxlua_getenumtype(L, 2);
    // get this
    wxDataViewRendererBase * self = (wxDataViewRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewRendererBase);
    // call SetMode
    self->SetMode(mode);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewRendererBase_SetOwner[] = { &wxluatype_wxDataViewRendererBase, &wxluatype_wxDataViewColumn, NULL };
static int LUACALL wxLua_wxDataViewRendererBase_SetOwner(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewRendererBase_SetOwner[1] = {{ wxLua_wxDataViewRendererBase_SetOwner, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewRendererBase_SetOwner }};
//     void SetOwner(wxDataViewColumn *owner);
static int LUACALL wxLua_wxDataViewRendererBase_SetOwner(lua_State *L)
{
    // wxDataViewColumn owner
    wxDataViewColumn * owner = (wxDataViewColumn *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewColumn);
    // get this
    wxDataViewRendererBase * self = (wxDataViewRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewRendererBase);
    // call SetOwner
    self->SetOwner(owner);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewRendererBase_SetValueAdjuster[] = { &wxluatype_wxDataViewRendererBase, &wxluatype_wxDataViewValueAdjuster, NULL };
static int LUACALL wxLua_wxDataViewRendererBase_SetValueAdjuster(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewRendererBase_SetValueAdjuster[1] = {{ wxLua_wxDataViewRendererBase_SetValueAdjuster, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewRendererBase_SetValueAdjuster }};
//     void SetValueAdjuster(wxDataViewValueAdjuster *transformer)
static int LUACALL wxLua_wxDataViewRendererBase_SetValueAdjuster(lua_State *L)
{
    // wxDataViewValueAdjuster transformer
    wxDataViewValueAdjuster * transformer = (wxDataViewValueAdjuster *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewValueAdjuster);
    // get this
    wxDataViewRendererBase * self = (wxDataViewRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewRendererBase);
    // call SetValueAdjuster
    self->SetValueAdjuster(transformer);

    return 0;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewRendererBase_StartEditing[] = { &wxluatype_wxDataViewRendererBase, &wxluatype_wxDataViewItem, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxDataViewRendererBase_StartEditing(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewRendererBase_StartEditing[1] = {{ wxLua_wxDataViewRendererBase_StartEditing, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewRendererBase_StartEditing }};
//     virtual bool StartEditing( const wxDataViewItem &item, wxRect labelRect );
static int LUACALL wxLua_wxDataViewRendererBase_StartEditing(lua_State *L)
{
    // wxRect labelRect
    wxRect labelRect = *(wxRect*)wxluaT_getuserdatatype(L, 3, wxluatype_wxRect);
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItem);
    // get this
    wxDataViewRendererBase * self = (wxDataViewRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewRendererBase);
    // call StartEditing
    bool returns = (self->StartEditing(*item, labelRect));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)



void wxLua_wxDataViewRendererBase_delete_function(void** p)
{
    wxDataViewRendererBase* o = (wxDataViewRendererBase*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewRendererBase_methods[] = {
    { "CancelEditing", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewRendererBase_CancelEditing, 1, NULL },
    { "FinishEditing", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewRendererBase_FinishEditing, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_ACCESSIBILITY)
    { "GetAccessibleDescription", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewRendererBase_GetAccessibleDescription, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_ACCESSIBILITY)

    { "GetAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewRendererBase_GetAlignment, 1, NULL },
    { "GetEditorCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewRendererBase_GetEditorCtrl, 1, NULL },
    { "GetEffectiveAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewRendererBase_GetEffectiveAlignment, 1, NULL },
    { "GetEffectiveAlignmentIfKnown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewRendererBase_GetEffectiveAlignmentIfKnown, 1, NULL },
    { "GetMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewRendererBase_GetMode, 1, NULL },
    { "GetOwner", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewRendererBase_GetOwner, 1, NULL },
    { "GetVariantType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewRendererBase_GetVariantType, 1, NULL },
    { "HasEditorCtrl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewRendererBase_HasEditorCtrl, 1, NULL },
    { "IsCustomRenderer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewRendererBase_IsCustomRenderer, 1, NULL },
    { "NotifyEditingStarted", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewRendererBase_NotifyEditingStarted, 1, NULL },
    { "SetAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewRendererBase_SetAlignment, 1, NULL },
    { "SetMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewRendererBase_SetMode, 1, NULL },
    { "SetOwner", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewRendererBase_SetOwner, 1, NULL },
    { "SetValueAdjuster", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewRendererBase_SetValueAdjuster, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)
    { "StartEditing", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewRendererBase_StartEditing, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)

    { 0, 0, 0, 0 },
};

int wxDataViewRendererBase_methodCount = sizeof(wxDataViewRendererBase_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewCustomRendererBase
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewCustomRendererBase'
int wxluatype_wxDataViewCustomRendererBase = WXLUA_TUNKNOWN;

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_ActivateCell[] = { &wxluatype_wxDataViewCustomRendererBase, &wxluatype_wxRect, &wxluatype_wxDataViewModel, &wxluatype_wxDataViewItem, &wxluatype_TINTEGER, &wxluatype_wxMouseEvent, NULL };
static int LUACALL wxLua_wxDataViewCustomRendererBase_ActivateCell(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCustomRendererBase_ActivateCell[1] = {{ wxLua_wxDataViewCustomRendererBase_ActivateCell, WXLUAMETHOD_METHOD, 6, 6, s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_ActivateCell }};
//     virtual bool ActivateCell(const wxRect& cell, wxDataViewModel *model, const wxDataViewItem & item, unsigned int col, const wxMouseEvent* mouseEvent);
static int LUACALL wxLua_wxDataViewCustomRendererBase_ActivateCell(lua_State *L)
{
    // const wxMouseEvent mouseEvent
    const wxMouseEvent * mouseEvent = (const wxMouseEvent *)wxluaT_getuserdatatype(L, 6, wxluatype_wxMouseEvent);
    // unsigned int col
    unsigned int col = (unsigned int)wxlua_getuintegertype(L, 5);
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 4, wxluatype_wxDataViewItem);
    // wxDataViewModel model
    wxDataViewModel * model = (wxDataViewModel *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDataViewModel);
    // const wxRect cell
    const wxRect * cell = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxDataViewCustomRendererBase * self = (wxDataViewCustomRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCustomRendererBase);
    // call ActivateCell
    bool returns = (self->ActivateCell(*cell, model, *item, col, mouseEvent));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_GetAttr[] = { &wxluatype_wxDataViewCustomRendererBase, NULL };
static int LUACALL wxLua_wxDataViewCustomRendererBase_GetAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCustomRendererBase_GetAttr[1] = {{ wxLua_wxDataViewCustomRendererBase_GetAttr, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_GetAttr }};
//     const wxDataViewItemAttr& GetAttr() const;
static int LUACALL wxLua_wxDataViewCustomRendererBase_GetAttr(lua_State *L)
{
    // get this
    wxDataViewCustomRendererBase * self = (wxDataViewCustomRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCustomRendererBase);
    // call GetAttr
    const wxDataViewItemAttr* returns = (const wxDataViewItemAttr*)&self->GetAttr();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewItemAttr);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxDC)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_GetDC[] = { &wxluatype_wxDataViewCustomRendererBase, NULL };
static int LUACALL wxLua_wxDataViewCustomRendererBase_GetDC(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCustomRendererBase_GetDC[1] = {{ wxLua_wxDataViewCustomRendererBase_GetDC, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_GetDC }};
//     virtual wxDC *GetDC() = 0;
static int LUACALL wxLua_wxDataViewCustomRendererBase_GetDC(lua_State *L)
{
    // get this
    wxDataViewCustomRendererBase * self = (wxDataViewCustomRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCustomRendererBase);
    // call GetDC
    wxDC* returns = (wxDC*)self->GetDC();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDC);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxDC)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_GetEnabled[] = { &wxluatype_wxDataViewCustomRendererBase, NULL };
static int LUACALL wxLua_wxDataViewCustomRendererBase_GetEnabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCustomRendererBase_GetEnabled[1] = {{ wxLua_wxDataViewCustomRendererBase_GetEnabled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_GetEnabled }};
//     bool GetEnabled() const;
static int LUACALL wxLua_wxDataViewCustomRendererBase_GetEnabled(lua_State *L)
{
    // get this
    wxDataViewCustomRendererBase * self = (wxDataViewCustomRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCustomRendererBase);
    // call GetEnabled
    bool returns = (self->GetEnabled());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_GetSize[] = { &wxluatype_wxDataViewCustomRendererBase, NULL };
static int LUACALL wxLua_wxDataViewCustomRendererBase_GetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCustomRendererBase_GetSize[1] = {{ wxLua_wxDataViewCustomRendererBase_GetSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_GetSize }};
//     virtual wxSize GetSize() const = 0;
static int LUACALL wxLua_wxDataViewCustomRendererBase_GetSize(lua_State *L)
{
    // get this
    wxDataViewCustomRendererBase * self = (wxDataViewCustomRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCustomRendererBase);
    // call GetSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetSize());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSize);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_IsCustomRenderer[] = { &wxluatype_wxDataViewCustomRendererBase, NULL };
static int LUACALL wxLua_wxDataViewCustomRendererBase_IsCustomRenderer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCustomRendererBase_IsCustomRenderer[1] = {{ wxLua_wxDataViewCustomRendererBase_IsCustomRenderer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_IsCustomRenderer }};
//     virtual bool IsCustomRenderer() const;
static int LUACALL wxLua_wxDataViewCustomRendererBase_IsCustomRenderer(lua_State *L)
{
    // get this
    wxDataViewCustomRendererBase * self = (wxDataViewCustomRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCustomRendererBase);
    // call IsCustomRenderer
    bool returns = (self->IsCustomRenderer());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_Render[] = { &wxluatype_wxDataViewCustomRendererBase, &wxluatype_wxRect, &wxluatype_wxDC, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCustomRendererBase_Render(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCustomRendererBase_Render[1] = {{ wxLua_wxDataViewCustomRendererBase_Render, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_Render }};
//     virtual bool Render(wxRect cell, wxDC *dc, int state) = 0;
static int LUACALL wxLua_wxDataViewCustomRendererBase_Render(lua_State *L)
{
    // int state
    int state = (int)wxlua_getnumbertype(L, 4);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxRect cell
    wxRect cell = *(wxRect*)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxDataViewCustomRendererBase * self = (wxDataViewCustomRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCustomRendererBase);
    // call Render
    bool returns = (self->Render(cell, dc, state));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_RenderBackground[] = { &wxluatype_wxDataViewCustomRendererBase, &wxluatype_wxDC, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxDataViewCustomRendererBase_RenderBackground(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCustomRendererBase_RenderBackground[1] = {{ wxLua_wxDataViewCustomRendererBase_RenderBackground, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_RenderBackground }};
//     virtual void RenderBackground(wxDC* dc, const wxRect& rect);
static int LUACALL wxLua_wxDataViewCustomRendererBase_RenderBackground(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRect);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxDataViewCustomRendererBase * self = (wxDataViewCustomRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCustomRendererBase);
    // call RenderBackground
    self->RenderBackground(dc, *rect);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_RenderText[] = { &wxluatype_wxDataViewCustomRendererBase, &wxluatype_TSTRING, &wxluatype_TNUMBER, &wxluatype_wxRect, &wxluatype_wxDC, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCustomRendererBase_RenderText(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCustomRendererBase_RenderText[1] = {{ wxLua_wxDataViewCustomRendererBase_RenderText, WXLUAMETHOD_METHOD, 6, 6, s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_RenderText }};
//     virtual void RenderText(const wxString& text, int xoffset, wxRect cell, wxDC *dc, int state);
static int LUACALL wxLua_wxDataViewCustomRendererBase_RenderText(lua_State *L)
{
    // int state
    int state = (int)wxlua_getnumbertype(L, 6);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 5, wxluatype_wxDC);
    // wxRect cell
    wxRect cell = *(wxRect*)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // int xoffset
    int xoffset = (int)wxlua_getnumbertype(L, 3);
    // const wxString text
    const wxString text = wxlua_getwxStringtype(L, 2);
    // get this
    wxDataViewCustomRendererBase * self = (wxDataViewCustomRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCustomRendererBase);
    // call RenderText
    self->RenderText(text, xoffset, cell, dc, state);

    return 0;
}

#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_SetAttr[] = { &wxluatype_wxDataViewCustomRendererBase, &wxluatype_wxDataViewItemAttr, NULL };
static int LUACALL wxLua_wxDataViewCustomRendererBase_SetAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCustomRendererBase_SetAttr[1] = {{ wxLua_wxDataViewCustomRendererBase_SetAttr, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_SetAttr }};
//     virtual void SetAttr(const wxDataViewItemAttr& attr);
static int LUACALL wxLua_wxDataViewCustomRendererBase_SetAttr(lua_State *L)
{
    // const wxDataViewItemAttr attr
    const wxDataViewItemAttr * attr = (const wxDataViewItemAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDataViewItemAttr);
    // get this
    wxDataViewCustomRendererBase * self = (wxDataViewCustomRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCustomRendererBase);
    // call SetAttr
    self->SetAttr(*attr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_SetEnabled[] = { &wxluatype_wxDataViewCustomRendererBase, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxDataViewCustomRendererBase_SetEnabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCustomRendererBase_SetEnabled[1] = {{ wxLua_wxDataViewCustomRendererBase_SetEnabled, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_SetEnabled }};
//     virtual void SetEnabled(bool enabled);
static int LUACALL wxLua_wxDataViewCustomRendererBase_SetEnabled(lua_State *L)
{
    // bool enabled
    bool enabled = wxlua_getbooleantype(L, 2);
    // get this
    wxDataViewCustomRendererBase * self = (wxDataViewCustomRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCustomRendererBase);
    // call SetEnabled
    self->SetEnabled(enabled);

    return 0;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_StartDrag[] = { &wxluatype_wxDataViewCustomRendererBase, &wxluatype_wxPoint, &wxluatype_wxRect, &wxluatype_wxDataViewModel, &wxluatype_wxDataViewItem, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewCustomRendererBase_StartDrag(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCustomRendererBase_StartDrag[1] = {{ wxLua_wxDataViewCustomRendererBase_StartDrag, WXLUAMETHOD_METHOD, 6, 6, s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_StartDrag }};
//     virtual bool StartDrag(const wxPoint& cursor, const wxRect& cell, wxDataViewModel *model, const wxDataViewItem &item, unsigned int col);
static int LUACALL wxLua_wxDataViewCustomRendererBase_StartDrag(lua_State *L)
{
    // unsigned int col
    unsigned int col = (unsigned int)wxlua_getuintegertype(L, 6);
    // const wxDataViewItem item
    const wxDataViewItem * item = (const wxDataViewItem *)wxluaT_getuserdatatype(L, 5, wxluatype_wxDataViewItem);
    // wxDataViewModel model
    wxDataViewModel * model = (wxDataViewModel *)wxluaT_getuserdatatype(L, 4, wxluatype_wxDataViewModel);
    // const wxRect cell
    const wxRect * cell = (const wxRect *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRect);
    // const wxPoint cursor
    const wxPoint * cursor = (const wxPoint *)wxluaT_getuserdatatype(L, 2, wxluatype_wxPoint);
    // get this
    wxDataViewCustomRendererBase * self = (wxDataViewCustomRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCustomRendererBase);
    // call StartDrag
    bool returns = (self->StartDrag(*cursor, *cell, model, *item, col));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_WXCallRender[] = { &wxluatype_wxDataViewCustomRendererBase, &wxluatype_wxRect, &wxluatype_wxDC, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewCustomRendererBase_WXCallRender(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewCustomRendererBase_WXCallRender[1] = {{ wxLua_wxDataViewCustomRendererBase_WXCallRender, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxDataViewCustomRendererBase_WXCallRender }};
//     void WXCallRender(wxRect rect, wxDC *dc, int state);
static int LUACALL wxLua_wxDataViewCustomRendererBase_WXCallRender(lua_State *L)
{
    // int state
    int state = (int)wxlua_getnumbertype(L, 4);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 3, wxluatype_wxDC);
    // wxRect rect
    wxRect rect = *(wxRect*)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxDataViewCustomRendererBase * self = (wxDataViewCustomRendererBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewCustomRendererBase);
    // call WXCallRender
    self->WXCallRender(rect, dc, state);

    return 0;
}

#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)



void wxLua_wxDataViewCustomRendererBase_delete_function(void** p)
{
    wxDataViewCustomRendererBase* o = (wxDataViewCustomRendererBase*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewCustomRendererBase_methods[] = {
#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)
    { "ActivateCell", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCustomRendererBase_ActivateCell, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)

    { "GetAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCustomRendererBase_GetAttr, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxDC)
    { "GetDC", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCustomRendererBase_GetDC, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxDC)

    { "GetEnabled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCustomRendererBase_GetEnabled, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)
    { "GetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCustomRendererBase_GetSize, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)

    { "IsCustomRenderer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCustomRendererBase_IsCustomRenderer, 1, NULL },

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)
    { "Render", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCustomRendererBase_Render, 1, NULL },
    { "RenderBackground", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCustomRendererBase_RenderBackground, 1, NULL },
    { "RenderText", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCustomRendererBase_RenderText, 1, NULL },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)

    { "SetAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCustomRendererBase_SetAttr, 1, NULL },
    { "SetEnabled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCustomRendererBase_SetEnabled, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)
    { "StartDrag", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCustomRendererBase_StartDrag, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxPointSizeRect)

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)
    { "WXCallRender", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewCustomRendererBase_WXCallRender, 1, NULL },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxPointSizeRect)

    { 0, 0, 0, 0 },
};

int wxDataViewCustomRendererBase_methodCount = sizeof(wxDataViewCustomRendererBase_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_SPINCTRL)
// ---------------------------------------------------------------------------
// Bind class wxDataViewSpinRenderer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewSpinRenderer'
int wxluatype_wxDataViewSpinRenderer = WXLUA_TUNKNOWN;

#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_SPINCTRL)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewSpinRenderer_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewSpinRenderer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewSpinRenderer_constructor[1] = {{ wxLua_wxDataViewSpinRenderer_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 4, s_wxluatypeArray_wxLua_wxDataViewSpinRenderer_constructor }};
//                             int alignment = wxDVR_DEFAULT_ALIGNMENT );
static int LUACALL wxLua_wxDataViewSpinRenderer_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int alignment = wxDVR_DEFAULT_ALIGNMENT
    int alignment = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxDVR_DEFAULT_ALIGNMENT);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_EDITABLE
    wxDataViewCellMode mode = (argCount >= 3 ? (wxDataViewCellMode)wxlua_getenumtype(L, 3) : wxDATAVIEW_CELL_EDITABLE);
    // int max
    int max = (int)wxlua_getnumbertype(L, 2);
    // int min
    int min = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxDataViewSpinRenderer* returns = new wxDataViewSpinRenderer(min, max, mode, alignment);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewSpinRenderer);

    return 1;
}

#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_SPINCTRL)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)



void wxLua_wxDataViewSpinRenderer_delete_function(void** p)
{
    wxDataViewSpinRenderer* o = (wxDataViewSpinRenderer*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewSpinRenderer_methods[] = {
#if ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_SPINCTRL)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)
    { "wxDataViewSpinRenderer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewSpinRenderer_constructor, 1, NULL },
#endif // ((wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_SPINCTRL)) && (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl)

    { 0, 0, 0, 0 },
};

int wxDataViewSpinRenderer_methodCount = sizeof(wxDataViewSpinRenderer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_SPINCTRL)


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewTextRenderer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewTextRenderer'
int wxluatype_wxDataViewTextRenderer = WXLUA_TUNKNOWN;

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_MARKUP)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTextRenderer_EnableMarkup[] = { &wxluatype_wxDataViewTextRenderer, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxDataViewTextRenderer_EnableMarkup(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTextRenderer_EnableMarkup[1] = {{ wxLua_wxDataViewTextRenderer_EnableMarkup, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxDataViewTextRenderer_EnableMarkup }};
//     void EnableMarkup(bool enable = true);
static int LUACALL wxLua_wxDataViewTextRenderer_EnableMarkup(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool enable = true
    bool enable = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxDataViewTextRenderer * self = (wxDataViewTextRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewTextRenderer);
    // call EnableMarkup
    self->EnableMarkup(enable);

    return 0;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_MARKUP)

static int LUACALL wxLua_wxDataViewTextRenderer_GetDefaultType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTextRenderer_GetDefaultType[1] = {{ wxLua_wxDataViewTextRenderer_GetDefaultType, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxString GetDefaultType();
static int LUACALL wxLua_wxDataViewTextRenderer_GetDefaultType(lua_State *L)
{
    // call GetDefaultType
    wxString returns = (wxDataViewTextRenderer::GetDefaultType());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewTextRenderer_constructor[] = { &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewTextRenderer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewTextRenderer_constructor[1] = {{ wxLua_wxDataViewTextRenderer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 3, s_wxluatypeArray_wxLua_wxDataViewTextRenderer_constructor }};
//                             int align = wxDVR_DEFAULT_ALIGNMENT );
static int LUACALL wxLua_wxDataViewTextRenderer_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int align = wxDVR_DEFAULT_ALIGNMENT
    int align = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxDVR_DEFAULT_ALIGNMENT);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 2 ? (wxDataViewCellMode)wxlua_getenumtype(L, 2) : wxDATAVIEW_CELL_INERT);
    // const wxString varianttype = "string"
    const wxString varianttype = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxT("string")));
    // call constructor
    wxDataViewTextRenderer* returns = new wxDataViewTextRenderer(varianttype, mode, align);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewTextRenderer);

    return 1;
}




void wxLua_wxDataViewTextRenderer_delete_function(void** p)
{
    wxDataViewTextRenderer* o = (wxDataViewTextRenderer*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewTextRenderer_methods[] = {
#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_MARKUP)
    { "EnableMarkup", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewTextRenderer_EnableMarkup, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_MARKUP)

    { "GetDefaultType", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDataViewTextRenderer_GetDefaultType, 1, NULL },
    { "wxDataViewTextRenderer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewTextRenderer_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDataViewTextRenderer_methodCount = sizeof(wxDataViewTextRenderer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewBitmapRenderer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewBitmapRenderer'
int wxluatype_wxDataViewBitmapRenderer = WXLUA_TUNKNOWN;

static int LUACALL wxLua_wxDataViewBitmapRenderer_GetDefaultType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewBitmapRenderer_GetDefaultType[1] = {{ wxLua_wxDataViewBitmapRenderer_GetDefaultType, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxString GetDefaultType();
static int LUACALL wxLua_wxDataViewBitmapRenderer_GetDefaultType(lua_State *L)
{
    // call GetDefaultType
    wxString returns = (wxDataViewBitmapRenderer::GetDefaultType());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewBitmapRenderer_constructor[] = { &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewBitmapRenderer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewBitmapRenderer_constructor[1] = {{ wxLua_wxDataViewBitmapRenderer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 3, s_wxluatypeArray_wxLua_wxDataViewBitmapRenderer_constructor }};
//                               int align = wxDVR_DEFAULT_ALIGNMENT );
static int LUACALL wxLua_wxDataViewBitmapRenderer_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int align = wxDVR_DEFAULT_ALIGNMENT
    int align = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxDVR_DEFAULT_ALIGNMENT);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 2 ? (wxDataViewCellMode)wxlua_getenumtype(L, 2) : wxDATAVIEW_CELL_INERT);
    // const wxString varianttype = "wxBitmap"
    const wxString varianttype = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxT("wxBitmap")));
    // call constructor
    wxDataViewBitmapRenderer* returns = new wxDataViewBitmapRenderer(varianttype, mode, align);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewBitmapRenderer);

    return 1;
}




void wxLua_wxDataViewBitmapRenderer_delete_function(void** p)
{
    wxDataViewBitmapRenderer* o = (wxDataViewBitmapRenderer*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewBitmapRenderer_methods[] = {
    { "GetDefaultType", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDataViewBitmapRenderer_GetDefaultType, 1, NULL },
    { "wxDataViewBitmapRenderer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewBitmapRenderer_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDataViewBitmapRenderer_methodCount = sizeof(wxDataViewBitmapRenderer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewToggleRenderer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewToggleRenderer'
int wxluatype_wxDataViewToggleRenderer = WXLUA_TUNKNOWN;

static int LUACALL wxLua_wxDataViewToggleRenderer_GetDefaultType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewToggleRenderer_GetDefaultType[1] = {{ wxLua_wxDataViewToggleRenderer_GetDefaultType, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxString GetDefaultType();
static int LUACALL wxLua_wxDataViewToggleRenderer_GetDefaultType(lua_State *L)
{
    // call GetDefaultType
    wxString returns = (wxDataViewToggleRenderer::GetDefaultType());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewToggleRenderer_ShowAsRadio[] = { &wxluatype_wxDataViewToggleRenderer, NULL };
static int LUACALL wxLua_wxDataViewToggleRenderer_ShowAsRadio(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewToggleRenderer_ShowAsRadio[1] = {{ wxLua_wxDataViewToggleRenderer_ShowAsRadio, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewToggleRenderer_ShowAsRadio }};
//     void ShowAsRadio();
static int LUACALL wxLua_wxDataViewToggleRenderer_ShowAsRadio(lua_State *L)
{
    // get this
    wxDataViewToggleRenderer * self = (wxDataViewToggleRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewToggleRenderer);
    // call ShowAsRadio
    self->ShowAsRadio();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewToggleRenderer_constructor[] = { &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewToggleRenderer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewToggleRenderer_constructor[1] = {{ wxLua_wxDataViewToggleRenderer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 3, s_wxluatypeArray_wxLua_wxDataViewToggleRenderer_constructor }};
//                               int align = wxDVR_DEFAULT_ALIGNMENT );
static int LUACALL wxLua_wxDataViewToggleRenderer_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int align = wxDVR_DEFAULT_ALIGNMENT
    int align = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxDVR_DEFAULT_ALIGNMENT);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 2 ? (wxDataViewCellMode)wxlua_getenumtype(L, 2) : wxDATAVIEW_CELL_INERT);
    // const wxString varianttype = "bool"
    const wxString varianttype = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxT("bool")));
    // call constructor
    wxDataViewToggleRenderer* returns = new wxDataViewToggleRenderer(varianttype, mode, align);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewToggleRenderer);

    return 1;
}




void wxLua_wxDataViewToggleRenderer_delete_function(void** p)
{
    wxDataViewToggleRenderer* o = (wxDataViewToggleRenderer*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewToggleRenderer_methods[] = {
    { "GetDefaultType", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDataViewToggleRenderer_GetDefaultType, 1, NULL },
    { "ShowAsRadio", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewToggleRenderer_ShowAsRadio, 1, NULL },
    { "wxDataViewToggleRenderer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewToggleRenderer_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDataViewToggleRenderer_methodCount = sizeof(wxDataViewToggleRenderer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewProgressRenderer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewProgressRenderer'
int wxluatype_wxDataViewProgressRenderer = WXLUA_TUNKNOWN;

static int LUACALL wxLua_wxDataViewProgressRenderer_GetDefaultType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewProgressRenderer_GetDefaultType[1] = {{ wxLua_wxDataViewProgressRenderer_GetDefaultType, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxString GetDefaultType();
static int LUACALL wxLua_wxDataViewProgressRenderer_GetDefaultType(lua_State *L)
{
    // call GetDefaultType
    wxString returns = (wxDataViewProgressRenderer::GetDefaultType());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewProgressRenderer_constructor[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewProgressRenderer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewProgressRenderer_constructor[1] = {{ wxLua_wxDataViewProgressRenderer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 4, s_wxluatypeArray_wxLua_wxDataViewProgressRenderer_constructor }};
//                                 int align = wxDVR_DEFAULT_ALIGNMENT );
static int LUACALL wxLua_wxDataViewProgressRenderer_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int align = wxDVR_DEFAULT_ALIGNMENT
    int align = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : wxDVR_DEFAULT_ALIGNMENT);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 3 ? (wxDataViewCellMode)wxlua_getenumtype(L, 3) : wxDATAVIEW_CELL_INERT);
    // const wxString varianttype = "long"
    const wxString varianttype = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxT("long")));
    // const wxString label = wxEmptyString
    const wxString label = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    wxDataViewProgressRenderer* returns = new wxDataViewProgressRenderer(label, varianttype, mode, align);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewProgressRenderer);

    return 1;
}




void wxLua_wxDataViewProgressRenderer_delete_function(void** p)
{
    wxDataViewProgressRenderer* o = (wxDataViewProgressRenderer*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewProgressRenderer_methods[] = {
    { "GetDefaultType", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDataViewProgressRenderer_GetDefaultType, 1, NULL },
    { "wxDataViewProgressRenderer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewProgressRenderer_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDataViewProgressRenderer_methodCount = sizeof(wxDataViewProgressRenderer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewIconTextRenderer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewIconTextRenderer'
int wxluatype_wxDataViewIconTextRenderer = WXLUA_TUNKNOWN;

static int LUACALL wxLua_wxDataViewIconTextRenderer_GetDefaultType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewIconTextRenderer_GetDefaultType[1] = {{ wxLua_wxDataViewIconTextRenderer_GetDefaultType, WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, 0, 0, g_wxluaargtypeArray_None }};
//     static wxString GetDefaultType();
static int LUACALL wxLua_wxDataViewIconTextRenderer_GetDefaultType(lua_State *L)
{
    // call GetDefaultType
    wxString returns = (wxDataViewIconTextRenderer::GetDefaultType());
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewIconTextRenderer_constructor[] = { &wxluatype_TSTRING, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewIconTextRenderer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewIconTextRenderer_constructor[1] = {{ wxLua_wxDataViewIconTextRenderer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 3, s_wxluatypeArray_wxLua_wxDataViewIconTextRenderer_constructor }};
//                                 int align = wxDVR_DEFAULT_ALIGNMENT );
static int LUACALL wxLua_wxDataViewIconTextRenderer_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int align = wxDVR_DEFAULT_ALIGNMENT
    int align = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxDVR_DEFAULT_ALIGNMENT);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT
    wxDataViewCellMode mode = (argCount >= 2 ? (wxDataViewCellMode)wxlua_getenumtype(L, 2) : wxDATAVIEW_CELL_INERT);
    // const wxString varianttype = "wxDataViewIconText"
    const wxString varianttype = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxT("wxDataViewIconText")));
    // call constructor
    wxDataViewIconTextRenderer* returns = new wxDataViewIconTextRenderer(varianttype, mode, align);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewIconTextRenderer);

    return 1;
}




void wxLua_wxDataViewIconTextRenderer_delete_function(void** p)
{
    wxDataViewIconTextRenderer* o = (wxDataViewIconTextRenderer*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewIconTextRenderer_methods[] = {
    { "GetDefaultType", WXLUAMETHOD_METHOD|WXLUAMETHOD_STATIC, s_wxluafunc_wxLua_wxDataViewIconTextRenderer_GetDefaultType, 1, NULL },
    { "wxDataViewIconTextRenderer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewIconTextRenderer_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxDataViewIconTextRenderer_methodCount = sizeof(wxDataViewIconTextRenderer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewChoiceRenderer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewChoiceRenderer'
int wxluatype_wxDataViewChoiceRenderer = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewChoiceRenderer_GetChoice[] = { &wxluatype_wxDataViewChoiceRenderer, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxDataViewChoiceRenderer_GetChoice(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewChoiceRenderer_GetChoice[1] = {{ wxLua_wxDataViewChoiceRenderer_GetChoice, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxDataViewChoiceRenderer_GetChoice }};
//     wxString GetChoice(size_t index) const;
static int LUACALL wxLua_wxDataViewChoiceRenderer_GetChoice(lua_State *L)
{
    // size_t index
    size_t index = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxDataViewChoiceRenderer * self = (wxDataViewChoiceRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewChoiceRenderer);
    // call GetChoice
    wxString returns = (self->GetChoice(index));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxArrayString)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewChoiceRenderer_GetChoices[] = { &wxluatype_wxDataViewChoiceRenderer, NULL };
static int LUACALL wxLua_wxDataViewChoiceRenderer_GetChoices(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewChoiceRenderer_GetChoices[1] = {{ wxLua_wxDataViewChoiceRenderer_GetChoices, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxDataViewChoiceRenderer_GetChoices }};
//     const wxArrayString& GetChoices() const;
static int LUACALL wxLua_wxDataViewChoiceRenderer_GetChoices(lua_State *L)
{
    // get this
    wxDataViewChoiceRenderer * self = (wxDataViewChoiceRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxDataViewChoiceRenderer);
    // call GetChoices
    const wxArrayString* returns = (const wxArrayString*)&self->GetChoices();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayString);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewChoiceRenderer_constructor[] = { &wxluatype_wxArrayString, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewChoiceRenderer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewChoiceRenderer_constructor[1] = {{ wxLua_wxDataViewChoiceRenderer_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 3, s_wxluatypeArray_wxLua_wxDataViewChoiceRenderer_constructor }};
//                              int alignment = wxDVR_DEFAULT_ALIGNMENT );
static int LUACALL wxLua_wxDataViewChoiceRenderer_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int alignment = wxDVR_DEFAULT_ALIGNMENT
    int alignment = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxDVR_DEFAULT_ALIGNMENT);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_EDITABLE
    wxDataViewCellMode mode = (argCount >= 2 ? (wxDataViewCellMode)wxlua_getenumtype(L, 2) : wxDATAVIEW_CELL_EDITABLE);
    // const wxArrayString choices
    wxLuaSmartwxArrayString choices = wxlua_getwxArrayString(L, 1);
    // call constructor
    wxDataViewChoiceRenderer* returns = new wxDataViewChoiceRenderer(choices, mode, alignment);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewChoiceRenderer);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxArrayString)



void wxLua_wxDataViewChoiceRenderer_delete_function(void** p)
{
    wxDataViewChoiceRenderer* o = (wxDataViewChoiceRenderer*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewChoiceRenderer_methods[] = {
    { "GetChoice", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewChoiceRenderer_GetChoice, 1, NULL },

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxArrayString)
    { "GetChoices", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxDataViewChoiceRenderer_GetChoices, 1, NULL },
    { "wxDataViewChoiceRenderer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewChoiceRenderer_constructor, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxArrayString)

    { 0, 0, 0, 0 },
};

int wxDataViewChoiceRenderer_methodCount = sizeof(wxDataViewChoiceRenderer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl


#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
// ---------------------------------------------------------------------------
// Bind class wxDataViewChoiceByIndexRenderer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxDataViewChoiceByIndexRenderer'
int wxluatype_wxDataViewChoiceByIndexRenderer = WXLUA_TUNKNOWN;

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxArrayString)
static wxLuaArgType s_wxluatypeArray_wxLua_wxDataViewChoiceByIndexRenderer_constructor[] = { &wxluatype_wxArrayString, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxDataViewChoiceByIndexRenderer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxDataViewChoiceByIndexRenderer_constructor[1] = {{ wxLua_wxDataViewChoiceByIndexRenderer_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 3, s_wxluatypeArray_wxLua_wxDataViewChoiceByIndexRenderer_constructor }};
//                                      int alignment = wxDVR_DEFAULT_ALIGNMENT );
static int LUACALL wxLua_wxDataViewChoiceByIndexRenderer_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int alignment = wxDVR_DEFAULT_ALIGNMENT
    int alignment = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : wxDVR_DEFAULT_ALIGNMENT);
    // wxDataViewCellMode mode = wxDATAVIEW_CELL_EDITABLE
    wxDataViewCellMode mode = (argCount >= 2 ? (wxDataViewCellMode)wxlua_getenumtype(L, 2) : wxDATAVIEW_CELL_EDITABLE);
    // const wxArrayString choices
    wxLuaSmartwxArrayString choices = wxlua_getwxArrayString(L, 1);
    // call constructor
    wxDataViewChoiceByIndexRenderer* returns = new wxDataViewChoiceByIndexRenderer(choices, mode, alignment);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxDataViewChoiceByIndexRenderer);

    return 1;
}

#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxArrayString)



void wxLua_wxDataViewChoiceByIndexRenderer_delete_function(void** p)
{
    wxDataViewChoiceByIndexRenderer* o = (wxDataViewChoiceByIndexRenderer*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxDataViewChoiceByIndexRenderer_methods[] = {
#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxArrayString)
    { "wxDataViewChoiceByIndexRenderer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxDataViewChoiceByIndexRenderer_constructor, 1, NULL },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxLUA_USE_wxArrayString)

    { 0, 0, 0, 0 },
};

int wxDataViewChoiceByIndexRenderer_methodCount = sizeof(wxDataViewChoiceByIndexRenderer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl



// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxadv_grid.cpp was generated by genwxbind.lua
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------



#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridCellWorker
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridCellWorker'
int wxluatype_wxGridCellWorker = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellWorker_DecRef[] = { &wxluatype_wxGridCellWorker, NULL };
static int LUACALL wxLua_wxGridCellWorker_DecRef(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellWorker_DecRef[1] = {{ wxLua_wxGridCellWorker_DecRef, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellWorker_DecRef }};
//     void DecRef();
static int LUACALL wxLua_wxGridCellWorker_DecRef(lua_State *L)
{
    // get this
    wxGridCellWorker * self = (wxGridCellWorker *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellWorker);
    // call DecRef
    self->DecRef();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellWorker_IncRef[] = { &wxluatype_wxGridCellWorker, NULL };
static int LUACALL wxLua_wxGridCellWorker_IncRef(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellWorker_IncRef[1] = {{ wxLua_wxGridCellWorker_IncRef, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellWorker_IncRef }};
//     void IncRef();
static int LUACALL wxLua_wxGridCellWorker_IncRef(lua_State *L)
{
    // get this
    wxGridCellWorker * self = (wxGridCellWorker *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellWorker);
    // call IncRef
    self->IncRef();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellWorker_SetParameters[] = { &wxluatype_wxGridCellWorker, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGridCellWorker_SetParameters(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellWorker_SetParameters[1] = {{ wxLua_wxGridCellWorker_SetParameters, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellWorker_SetParameters }};
//     virtual void SetParameters(const wxString& params);
static int LUACALL wxLua_wxGridCellWorker_SetParameters(lua_State *L)
{
    // const wxString params
    const wxString params = wxlua_getwxStringtype(L, 2);
    // get this
    wxGridCellWorker * self = (wxGridCellWorker *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellWorker);
    // call SetParameters
    self->SetParameters(params);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellWorker_delete[] = { &wxluatype_wxGridCellWorker, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellWorker_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridCellWorker_delete }};




// %override wxLua_wxGridCellWorker_delete_function
// delete is private in wxGridCellWorker, DecRef() it in derived classes
void wxLua_wxGridCellWorker_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxGridCellWorker>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridCellWorker_methods[] = {
    { "DecRef", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellWorker_DecRef, 1, NULL },
    { "IncRef", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellWorker_IncRef, 1, NULL },
    { "SetParameters", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellWorker_SetParameters, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridCellWorker_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridCellWorker_methodCount = sizeof(wxGridCellWorker_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridCellRenderer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridCellRenderer'
int wxluatype_wxGridCellRenderer = WXLUA_TUNKNOWN;

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellRenderer_GetBestSize[] = { &wxluatype_wxGridCellRenderer, &wxluatype_wxGrid, &wxluatype_wxGridCellAttr, &wxluatype_wxDC, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellRenderer_GetBestSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellRenderer_GetBestSize[1] = {{ wxLua_wxGridCellRenderer_GetBestSize, WXLUAMETHOD_METHOD, 6, 6, s_wxluatypeArray_wxLua_wxGridCellRenderer_GetBestSize }};
//     virtual wxSize GetBestSize(wxGrid& grid, wxGridCellAttr& attr, wxDC& dc, int row, int col);
static int LUACALL wxLua_wxGridCellRenderer_GetBestSize(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 6);
    // int row
    int row = (int)wxlua_getnumbertype(L, 5);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 4, wxluatype_wxDC);
    // wxGridCellAttr attr
    wxGridCellAttr * attr = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxGridCellAttr);
    // wxGrid grid
    wxGrid * grid = (wxGrid *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGrid);
    // get this
    wxGridCellRenderer * self = (wxGridCellRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellRenderer);
    // call GetBestSize
    // allocate a new object using the copy constructor
    wxSize* returns = new wxSize(self->GetBestSize(*grid, *attr, *dc, row, col));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxSize);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxSize);

    return 1;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellRenderer_delete[] = { &wxluatype_wxGridCellRenderer, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellRenderer_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridCellRenderer_delete }};




// %override wxLua_wxGridCellRenderer_delete_function
// delete is private in wxGridCellWorker, DecRef() it in derived classes
void wxLua_wxGridCellRenderer_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxGridCellRenderer>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridCellRenderer_methods[] = {
#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect)
    { "GetBestSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellRenderer_GetBestSize, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridCellRenderer_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridCellRenderer_methodCount = sizeof(wxGridCellRenderer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridCellStringRenderer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridCellStringRenderer'
int wxluatype_wxGridCellStringRenderer = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellStringRenderer_delete[] = { &wxluatype_wxGridCellStringRenderer, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellStringRenderer_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridCellStringRenderer_delete }};

static int LUACALL wxLua_wxGridCellStringRenderer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellStringRenderer_constructor[1] = {{ wxLua_wxGridCellStringRenderer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxGridCellStringRenderer();
static int LUACALL wxLua_wxGridCellStringRenderer_constructor(lua_State *L)
{
    // call constructor
    wxGridCellStringRenderer* returns = new wxGridCellStringRenderer();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellStringRenderer);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellStringRenderer);

    return 1;
}




// %override wxLua_wxGridCellStringRenderer_delete_function
// delete is private in wxGridCellWorker, DecRef() it in derived classes
void wxLua_wxGridCellStringRenderer_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxGridCellStringRenderer>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridCellStringRenderer_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridCellStringRenderer_delete, 1, NULL },
    { "wxGridCellStringRenderer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridCellStringRenderer_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridCellStringRenderer_methodCount = sizeof(wxGridCellStringRenderer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridCellNumberRenderer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridCellNumberRenderer'
int wxluatype_wxGridCellNumberRenderer = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellNumberRenderer_delete[] = { &wxluatype_wxGridCellNumberRenderer, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellNumberRenderer_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridCellNumberRenderer_delete }};

static int LUACALL wxLua_wxGridCellNumberRenderer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellNumberRenderer_constructor[1] = {{ wxLua_wxGridCellNumberRenderer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxGridCellNumberRenderer();
static int LUACALL wxLua_wxGridCellNumberRenderer_constructor(lua_State *L)
{
    // call constructor
    wxGridCellNumberRenderer* returns = new wxGridCellNumberRenderer();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellNumberRenderer);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellNumberRenderer);

    return 1;
}




// %override wxLua_wxGridCellNumberRenderer_delete_function
// delete is private in wxGridCellWorker, DecRef() it in derived classes
void wxLua_wxGridCellNumberRenderer_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxGridCellNumberRenderer>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridCellNumberRenderer_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridCellNumberRenderer_delete, 1, NULL },
    { "wxGridCellNumberRenderer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridCellNumberRenderer_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridCellNumberRenderer_methodCount = sizeof(wxGridCellNumberRenderer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridCellFloatRenderer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridCellFloatRenderer'
int wxluatype_wxGridCellFloatRenderer = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellFloatRenderer_GetPrecision[] = { &wxluatype_wxGridCellFloatRenderer, NULL };
static int LUACALL wxLua_wxGridCellFloatRenderer_GetPrecision(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellFloatRenderer_GetPrecision[1] = {{ wxLua_wxGridCellFloatRenderer_GetPrecision, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellFloatRenderer_GetPrecision }};
//     int GetPrecision() const;
static int LUACALL wxLua_wxGridCellFloatRenderer_GetPrecision(lua_State *L)
{
    // get this
    wxGridCellFloatRenderer * self = (wxGridCellFloatRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellFloatRenderer);
    // call GetPrecision
    int returns = (self->GetPrecision());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellFloatRenderer_GetWidth[] = { &wxluatype_wxGridCellFloatRenderer, NULL };
static int LUACALL wxLua_wxGridCellFloatRenderer_GetWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellFloatRenderer_GetWidth[1] = {{ wxLua_wxGridCellFloatRenderer_GetWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellFloatRenderer_GetWidth }};
//     int GetWidth() const;
static int LUACALL wxLua_wxGridCellFloatRenderer_GetWidth(lua_State *L)
{
    // get this
    wxGridCellFloatRenderer * self = (wxGridCellFloatRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellFloatRenderer);
    // call GetWidth
    int returns = (self->GetWidth());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellFloatRenderer_SetPrecision[] = { &wxluatype_wxGridCellFloatRenderer, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellFloatRenderer_SetPrecision(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellFloatRenderer_SetPrecision[1] = {{ wxLua_wxGridCellFloatRenderer_SetPrecision, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellFloatRenderer_SetPrecision }};
//     void SetPrecision(int precision);
static int LUACALL wxLua_wxGridCellFloatRenderer_SetPrecision(lua_State *L)
{
    // int precision
    int precision = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridCellFloatRenderer * self = (wxGridCellFloatRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellFloatRenderer);
    // call SetPrecision
    self->SetPrecision(precision);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellFloatRenderer_SetWidth[] = { &wxluatype_wxGridCellFloatRenderer, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellFloatRenderer_SetWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellFloatRenderer_SetWidth[1] = {{ wxLua_wxGridCellFloatRenderer_SetWidth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellFloatRenderer_SetWidth }};
//     void SetWidth(int width);
static int LUACALL wxLua_wxGridCellFloatRenderer_SetWidth(lua_State *L)
{
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridCellFloatRenderer * self = (wxGridCellFloatRenderer *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellFloatRenderer);
    // call SetWidth
    self->SetWidth(width);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellFloatRenderer_delete[] = { &wxluatype_wxGridCellFloatRenderer, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellFloatRenderer_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridCellFloatRenderer_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellFloatRenderer_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellFloatRenderer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellFloatRenderer_constructor[1] = {{ wxLua_wxGridCellFloatRenderer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxGridCellFloatRenderer_constructor }};
//     wxGridCellFloatRenderer(int width = -1, int precision = -1);
static int LUACALL wxLua_wxGridCellFloatRenderer_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int precision = -1
    int precision = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : -1);
    // int width = -1
    int width = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : -1);
    // call constructor
    wxGridCellFloatRenderer* returns = new wxGridCellFloatRenderer(width, precision);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellFloatRenderer);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellFloatRenderer);

    return 1;
}




// %override wxLua_wxGridCellFloatRenderer_delete_function
// delete is private in wxGridCellWorker, DecRef() it in derived classes
void wxLua_wxGridCellFloatRenderer_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxGridCellFloatRenderer>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridCellFloatRenderer_methods[] = {
    { "GetPrecision", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellFloatRenderer_GetPrecision, 1, NULL },
    { "GetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellFloatRenderer_GetWidth, 1, NULL },
    { "SetPrecision", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellFloatRenderer_SetPrecision, 1, NULL },
    { "SetWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellFloatRenderer_SetWidth, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridCellFloatRenderer_delete, 1, NULL },
    { "wxGridCellFloatRenderer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridCellFloatRenderer_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridCellFloatRenderer_methodCount = sizeof(wxGridCellFloatRenderer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridCellBoolRenderer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridCellBoolRenderer'
int wxluatype_wxGridCellBoolRenderer = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellBoolRenderer_delete[] = { &wxluatype_wxGridCellBoolRenderer, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellBoolRenderer_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridCellBoolRenderer_delete }};

static int LUACALL wxLua_wxGridCellBoolRenderer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellBoolRenderer_constructor[1] = {{ wxLua_wxGridCellBoolRenderer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxGridCellBoolRenderer();
static int LUACALL wxLua_wxGridCellBoolRenderer_constructor(lua_State *L)
{
    // call constructor
    wxGridCellBoolRenderer* returns = new wxGridCellBoolRenderer();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellBoolRenderer);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellBoolRenderer);

    return 1;
}




// %override wxLua_wxGridCellBoolRenderer_delete_function
// delete is private in wxGridCellWorker, DecRef() it in derived classes
void wxLua_wxGridCellBoolRenderer_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxGridCellBoolRenderer>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridCellBoolRenderer_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridCellBoolRenderer_delete, 1, NULL },
    { "wxGridCellBoolRenderer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridCellBoolRenderer_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridCellBoolRenderer_methodCount = sizeof(wxGridCellBoolRenderer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridCellDateTimeRenderer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridCellDateTimeRenderer'
int wxluatype_wxGridCellDateTimeRenderer = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellDateTimeRenderer_delete[] = { &wxluatype_wxGridCellDateTimeRenderer, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellDateTimeRenderer_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridCellDateTimeRenderer_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellDateTimeRenderer_constructor[] = { &wxluatype_TSTRING, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGridCellDateTimeRenderer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellDateTimeRenderer_constructor[1] = {{ wxLua_wxGridCellDateTimeRenderer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxGridCellDateTimeRenderer_constructor }};
//     wxGridCellDateTimeRenderer(const wxString& outformat = wxDefaultDateTimeFormat, const wxString& informat = wxDefaultDateTimeFormat);
static int LUACALL wxLua_wxGridCellDateTimeRenderer_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString informat = wxDefaultDateTimeFormat
    const wxString informat = (argCount >= 2 ? wxlua_getwxStringtype(L, 2) : wxString(wxDefaultDateTimeFormat));
    // const wxString outformat = wxDefaultDateTimeFormat
    const wxString outformat = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxDefaultDateTimeFormat));
    // call constructor
    wxGridCellDateTimeRenderer* returns = new wxGridCellDateTimeRenderer(outformat, informat);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellDateTimeRenderer);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellDateTimeRenderer);

    return 1;
}




// %override wxLua_wxGridCellDateTimeRenderer_delete_function
// delete is private in wxGridCellWorker, DecRef() it in derived classes
void wxLua_wxGridCellDateTimeRenderer_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxGridCellDateTimeRenderer>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridCellDateTimeRenderer_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridCellDateTimeRenderer_delete, 1, NULL },
    { "wxGridCellDateTimeRenderer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridCellDateTimeRenderer_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridCellDateTimeRenderer_methodCount = sizeof(wxGridCellDateTimeRenderer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridCellEnumRenderer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridCellEnumRenderer'
int wxluatype_wxGridCellEnumRenderer = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEnumRenderer_delete[] = { &wxluatype_wxGridCellEnumRenderer, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEnumRenderer_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridCellEnumRenderer_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEnumRenderer_constructor[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGridCellEnumRenderer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEnumRenderer_constructor[1] = {{ wxLua_wxGridCellEnumRenderer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxGridCellEnumRenderer_constructor }};
//     wxGridCellEnumRenderer(const wxString& choices = "");
static int LUACALL wxLua_wxGridCellEnumRenderer_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString choices = ""
    const wxString choices = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    wxGridCellEnumRenderer* returns = new wxGridCellEnumRenderer(choices);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellEnumRenderer);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellEnumRenderer);

    return 1;
}




// %override wxLua_wxGridCellEnumRenderer_delete_function
// delete is private in wxGridCellWorker, DecRef() it in derived classes
void wxLua_wxGridCellEnumRenderer_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxGridCellEnumRenderer>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridCellEnumRenderer_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridCellEnumRenderer_delete, 1, NULL },
    { "wxGridCellEnumRenderer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridCellEnumRenderer_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridCellEnumRenderer_methodCount = sizeof(wxGridCellEnumRenderer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridCellAutoWrapStringRenderer
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridCellAutoWrapStringRenderer'
int wxluatype_wxGridCellAutoWrapStringRenderer = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAutoWrapStringRenderer_delete[] = { &wxluatype_wxGridCellAutoWrapStringRenderer, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAutoWrapStringRenderer_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAutoWrapStringRenderer_delete }};

static int LUACALL wxLua_wxGridCellAutoWrapStringRenderer_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAutoWrapStringRenderer_constructor[1] = {{ wxLua_wxGridCellAutoWrapStringRenderer_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxGridCellAutoWrapStringRenderer();
static int LUACALL wxLua_wxGridCellAutoWrapStringRenderer_constructor(lua_State *L)
{
    // call constructor
    wxGridCellAutoWrapStringRenderer* returns = new wxGridCellAutoWrapStringRenderer();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellAutoWrapStringRenderer);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellAutoWrapStringRenderer);

    return 1;
}




// %override wxLua_wxGridCellAutoWrapStringRenderer_delete_function
// delete is private in wxGridCellWorker, DecRef() it in derived classes
void wxLua_wxGridCellAutoWrapStringRenderer_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxGridCellAutoWrapStringRenderer>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridCellAutoWrapStringRenderer_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridCellAutoWrapStringRenderer_delete, 1, NULL },
    { "wxGridCellAutoWrapStringRenderer", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridCellAutoWrapStringRenderer_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridCellAutoWrapStringRenderer_methodCount = sizeof(wxGridCellAutoWrapStringRenderer_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridCellEditor
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridCellEditor'
int wxluatype_wxGridCellEditor = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEditor_BeginEdit[] = { &wxluatype_wxGridCellEditor, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGridCellEditor_BeginEdit(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEditor_BeginEdit[1] = {{ wxLua_wxGridCellEditor_BeginEdit, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGridCellEditor_BeginEdit }};
//     virtual void BeginEdit(int row, int col, wxGrid* grid);
static int LUACALL wxLua_wxGridCellEditor_BeginEdit(lua_State *L)
{
    // wxGrid grid
    wxGrid * grid = (wxGrid *)wxluaT_getuserdatatype(L, 4, wxluatype_wxGrid);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridCellEditor * self = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellEditor);
    // call BeginEdit
    self->BeginEdit(row, col, grid);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEditor_Destroy[] = { &wxluatype_wxGridCellEditor, NULL };
static int LUACALL wxLua_wxGridCellEditor_Destroy(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEditor_Destroy[1] = {{ wxLua_wxGridCellEditor_Destroy, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellEditor_Destroy }};
//     virtual void Destroy();
static int LUACALL wxLua_wxGridCellEditor_Destroy(lua_State *L)
{
    // get this
    wxGridCellEditor * self = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellEditor);
    // call Destroy
    self->Destroy();

    return 0;
}


#if ((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEditor_EndEdit1[] = { &wxluatype_wxGridCellEditor, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxGrid, &wxluatype_TSTRING, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxGridCellEditor_EndEdit1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEditor_EndEdit1[1] = {{ wxLua_wxGridCellEditor_EndEdit1, WXLUAMETHOD_METHOD, 6, 6, s_wxluatypeArray_wxLua_wxGridCellEditor_EndEdit1 }};
//     %wxchkver_2_9_2 virtual bool EndEdit(int row, int col, const wxGrid *grid, const wxString& oldval, wxString *newval);
static int LUACALL wxLua_wxGridCellEditor_EndEdit1(lua_State *L)
{
    // wxString newval
    wxString * newval = (wxString *)wxlua_touserdata(L, 6);
    // const wxString oldval
    const wxString oldval = wxlua_getwxStringtype(L, 5);
    // const wxGrid grid
    const wxGrid * grid = (const wxGrid *)wxluaT_getuserdatatype(L, 4, wxluatype_wxGrid);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridCellEditor * self = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellEditor);
    // call EndEdit
    bool returns = (self->EndEdit(row, col, grid, oldval, newval));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if ((!wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEditor_EndEdit[] = { &wxluatype_wxGridCellEditor, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGridCellEditor_EndEdit(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEditor_EndEdit[1] = {{ wxLua_wxGridCellEditor_EndEdit, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGridCellEditor_EndEdit }};
//     !%wxchkver_2_9_2 virtual bool EndEdit(int row, int col, wxGrid* grid);
static int LUACALL wxLua_wxGridCellEditor_EndEdit(lua_State *L)
{
    // wxGrid grid
    wxGrid * grid = (wxGrid *)wxluaT_getuserdatatype(L, 4, wxluatype_wxGrid);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridCellEditor * self = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellEditor);
    // call EndEdit
    bool returns = (self->EndEdit(row, col, grid));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // ((!wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEditor_GetCellAttr[] = { &wxluatype_wxGridCellEditor, NULL };
static int LUACALL wxLua_wxGridCellEditor_GetCellAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEditor_GetCellAttr[1] = {{ wxLua_wxGridCellEditor_GetCellAttr, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellEditor_GetCellAttr }};
//     wxGridCellAttr* GetCellAttr();
static int LUACALL wxLua_wxGridCellEditor_GetCellAttr(lua_State *L)
{
    // get this
    wxGridCellEditor * self = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellEditor);
    // call GetCellAttr
    wxGridCellAttr* returns = (wxGridCellAttr*)self->GetCellAttr();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEditor_GetControl[] = { &wxluatype_wxGridCellEditor, NULL };
static int LUACALL wxLua_wxGridCellEditor_GetControl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEditor_GetControl[1] = {{ wxLua_wxGridCellEditor_GetControl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellEditor_GetControl }};
//     wxControl* GetControl();
static int LUACALL wxLua_wxGridCellEditor_GetControl(lua_State *L)
{
    // get this
    wxGridCellEditor * self = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellEditor);
    // call GetControl
    wxControl* returns = (wxControl*)self->GetControl();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxControl);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEditor_HandleReturn[] = { &wxluatype_wxGridCellEditor, &wxluatype_wxKeyEvent, NULL };
static int LUACALL wxLua_wxGridCellEditor_HandleReturn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEditor_HandleReturn[1] = {{ wxLua_wxGridCellEditor_HandleReturn, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellEditor_HandleReturn }};
//     virtual void HandleReturn(wxKeyEvent& event);
static int LUACALL wxLua_wxGridCellEditor_HandleReturn(lua_State *L)
{
    // wxKeyEvent event
    wxKeyEvent * event = (wxKeyEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxKeyEvent);
    // get this
    wxGridCellEditor * self = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellEditor);
    // call HandleReturn
    self->HandleReturn(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEditor_IsAcceptedKey[] = { &wxluatype_wxGridCellEditor, &wxluatype_wxKeyEvent, NULL };
static int LUACALL wxLua_wxGridCellEditor_IsAcceptedKey(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEditor_IsAcceptedKey[1] = {{ wxLua_wxGridCellEditor_IsAcceptedKey, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellEditor_IsAcceptedKey }};
//     virtual bool IsAcceptedKey(wxKeyEvent& event);
static int LUACALL wxLua_wxGridCellEditor_IsAcceptedKey(lua_State *L)
{
    // wxKeyEvent event
    wxKeyEvent * event = (wxKeyEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxKeyEvent);
    // get this
    wxGridCellEditor * self = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellEditor);
    // call IsAcceptedKey
    bool returns = (self->IsAcceptedKey(*event));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEditor_IsCreated[] = { &wxluatype_wxGridCellEditor, NULL };
static int LUACALL wxLua_wxGridCellEditor_IsCreated(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEditor_IsCreated[1] = {{ wxLua_wxGridCellEditor_IsCreated, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellEditor_IsCreated }};
//     bool IsCreated();
static int LUACALL wxLua_wxGridCellEditor_IsCreated(lua_State *L)
{
    // get this
    wxGridCellEditor * self = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellEditor);
    // call IsCreated
    bool returns = (self->IsCreated());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if ((((wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEditor_PaintBackground1[] = { &wxluatype_wxGridCellEditor, &wxluatype_wxDC, &wxluatype_wxRect, &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellEditor_PaintBackground1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEditor_PaintBackground1[1] = {{ wxLua_wxGridCellEditor_PaintBackground1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGridCellEditor_PaintBackground1 }};
//     %wxchkver_2_9_5  virtual void PaintBackground(wxDC& dc, const wxRect& rectCell, const wxGridCellAttr &attr);
static int LUACALL wxLua_wxGridCellEditor_PaintBackground1(lua_State *L)
{
    // const wxGridCellAttr attr
    const wxGridCellAttr * attr = (const wxGridCellAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxGridCellAttr);
    // const wxRect rectCell
    const wxRect * rectCell = (const wxRect *)wxluaT_getuserdatatype(L, 3, wxluatype_wxRect);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxGridCellEditor * self = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellEditor);
    // call PaintBackground
    self->PaintBackground(*dc, *rectCell, *attr);

    return 0;
}

#endif // ((((wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect)

#if (((!wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEditor_PaintBackground[] = { &wxluatype_wxGridCellEditor, &wxluatype_wxRect, &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellEditor_PaintBackground(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEditor_PaintBackground[1] = {{ wxLua_wxGridCellEditor_PaintBackground, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridCellEditor_PaintBackground }};
//     !%wxchkver_2_9_5 virtual void PaintBackground(const wxRect& rectCell, wxGridCellAttr *attr);
static int LUACALL wxLua_wxGridCellEditor_PaintBackground(lua_State *L)
{
    // wxGridCellAttr attr
    wxGridCellAttr * attr = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxGridCellAttr);
    // const wxRect rectCell
    const wxRect * rectCell = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxGridCellEditor * self = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellEditor);
    // call PaintBackground
    self->PaintBackground(*rectCell, attr);

    return 0;
}

#endif // (((!wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEditor_Reset[] = { &wxluatype_wxGridCellEditor, NULL };
static int LUACALL wxLua_wxGridCellEditor_Reset(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEditor_Reset[1] = {{ wxLua_wxGridCellEditor_Reset, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellEditor_Reset }};
//     virtual void Reset();
static int LUACALL wxLua_wxGridCellEditor_Reset(lua_State *L)
{
    // get this
    wxGridCellEditor * self = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellEditor);
    // call Reset
    self->Reset();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEditor_SetCellAttr[] = { &wxluatype_wxGridCellEditor, &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellEditor_SetCellAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEditor_SetCellAttr[1] = {{ wxLua_wxGridCellEditor_SetCellAttr, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellEditor_SetCellAttr }};
//     void SetCellAttr(wxGridCellAttr* attr);
static int LUACALL wxLua_wxGridCellEditor_SetCellAttr(lua_State *L)
{
    // wxGridCellAttr attr
    wxGridCellAttr * attr = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridCellAttr);
    // get this
    wxGridCellEditor * self = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellEditor);
    // call SetCellAttr
    self->SetCellAttr(attr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEditor_SetControl[] = { &wxluatype_wxGridCellEditor, &wxluatype_wxControl, NULL };
static int LUACALL wxLua_wxGridCellEditor_SetControl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEditor_SetControl[1] = {{ wxLua_wxGridCellEditor_SetControl, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellEditor_SetControl }};
//     void SetControl(%ungc wxControl* control);
static int LUACALL wxLua_wxGridCellEditor_SetControl(lua_State *L)
{
    // wxControl control
    wxControl * control = (wxControl *)wxluaT_getuserdatatype(L, 2, wxluatype_wxControl);
    if (wxluaO_isgcobject(L, control)) wxluaO_undeletegcobject(L, control);
    // get this
    wxGridCellEditor * self = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellEditor);
    // call SetControl
    self->SetControl(control);

    return 0;
}


#if (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEditor_SetSize[] = { &wxluatype_wxGridCellEditor, &wxluatype_wxRect, NULL };
static int LUACALL wxLua_wxGridCellEditor_SetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEditor_SetSize[1] = {{ wxLua_wxGridCellEditor_SetSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellEditor_SetSize }};
//     virtual void SetSize(const wxRect& rect);
static int LUACALL wxLua_wxGridCellEditor_SetSize(lua_State *L)
{
    // const wxRect rect
    const wxRect * rect = (const wxRect *)wxluaT_getuserdatatype(L, 2, wxluatype_wxRect);
    // get this
    wxGridCellEditor * self = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellEditor);
    // call SetSize
    self->SetSize(*rect);

    return 0;
}

#endif // (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEditor_Show[] = { &wxluatype_wxGridCellEditor, &wxluatype_TBOOLEAN, &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellEditor_Show(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEditor_Show[1] = {{ wxLua_wxGridCellEditor_Show, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxGridCellEditor_Show }};
//     virtual void Show(bool show, wxGridCellAttr *attr = NULL);
static int LUACALL wxLua_wxGridCellEditor_Show(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxGridCellAttr attr = NULL
    wxGridCellAttr * attr = (argCount >= 3 ? (wxGridCellAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxGridCellAttr) : NULL);
    // bool show
    bool show = wxlua_getbooleantype(L, 2);
    // get this
    wxGridCellEditor * self = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellEditor);
    // call Show
    self->Show(show, attr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEditor_StartingClick[] = { &wxluatype_wxGridCellEditor, NULL };
static int LUACALL wxLua_wxGridCellEditor_StartingClick(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEditor_StartingClick[1] = {{ wxLua_wxGridCellEditor_StartingClick, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellEditor_StartingClick }};
//     virtual void StartingClick();
static int LUACALL wxLua_wxGridCellEditor_StartingClick(lua_State *L)
{
    // get this
    wxGridCellEditor * self = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellEditor);
    // call StartingClick
    self->StartingClick();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEditor_StartingKey[] = { &wxluatype_wxGridCellEditor, &wxluatype_wxKeyEvent, NULL };
static int LUACALL wxLua_wxGridCellEditor_StartingKey(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEditor_StartingKey[1] = {{ wxLua_wxGridCellEditor_StartingKey, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellEditor_StartingKey }};
//     virtual void StartingKey(wxKeyEvent& event);
static int LUACALL wxLua_wxGridCellEditor_StartingKey(lua_State *L)
{
    // wxKeyEvent event
    wxKeyEvent * event = (wxKeyEvent *)wxluaT_getuserdatatype(L, 2, wxluatype_wxKeyEvent);
    // get this
    wxGridCellEditor * self = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellEditor);
    // call StartingKey
    self->StartingKey(*event);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEditor_delete[] = { &wxluatype_wxGridCellEditor, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEditor_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridCellEditor_delete }};




#if (((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID))||(((!wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEditor_EndEdit_overload[] =
{

#if ((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { wxLua_wxGridCellEditor_EndEdit1, WXLUAMETHOD_METHOD, 6, 6, s_wxluatypeArray_wxLua_wxGridCellEditor_EndEdit1 },
#endif // ((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if ((!wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { wxLua_wxGridCellEditor_EndEdit, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGridCellEditor_EndEdit },
#endif // ((!wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
};
static int s_wxluafunc_wxLua_wxGridCellEditor_EndEdit_overload_count = sizeof(s_wxluafunc_wxLua_wxGridCellEditor_EndEdit_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID))||(((!wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID))

#if (((((wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect))||((((!wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEditor_PaintBackground_overload[] =
{

#if ((((wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxGridCellEditor_PaintBackground1, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGridCellEditor_PaintBackground1 },
#endif // ((((wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect)

#if (((!wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect)
    { wxLua_wxGridCellEditor_PaintBackground, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridCellEditor_PaintBackground },
#endif // (((!wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect)
};
static int s_wxluafunc_wxLua_wxGridCellEditor_PaintBackground_overload_count = sizeof(s_wxluafunc_wxLua_wxGridCellEditor_PaintBackground_overload)/sizeof(wxLuaBindCFunc);

#endif // (((((wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect))||((((!wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect))

// %override wxLua_wxGridCellEditor_delete_function
// delete is private in wxGridCellWorker, DecRef() it in derived classes
void wxLua_wxGridCellEditor_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxGridCellEditor>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridCellEditor_methods[] = {
    { "BeginEdit", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellEditor_BeginEdit, 1, NULL },
    { "Destroy", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellEditor_Destroy, 1, NULL },

#if (((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID))||(((!wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID))
    { "EndEdit", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellEditor_EndEdit_overload, s_wxluafunc_wxLua_wxGridCellEditor_EndEdit_overload_count, 0 },
#endif // (((wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID))||(((!wxCHECK_VERSION(2,9,2)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID))

    { "GetCellAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellEditor_GetCellAttr, 1, NULL },
    { "GetControl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellEditor_GetControl, 1, NULL },
    { "HandleReturn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellEditor_HandleReturn, 1, NULL },
    { "IsAcceptedKey", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellEditor_IsAcceptedKey, 1, NULL },
    { "IsCreated", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellEditor_IsCreated, 1, NULL },

#if (((((wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect))||((((!wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect))
    { "PaintBackground", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellEditor_PaintBackground_overload, s_wxluafunc_wxLua_wxGridCellEditor_PaintBackground_overload_count, 0 },
#endif // (((((wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect))||((((!wxCHECK_VERSION(2,9,5)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect))

    { "Reset", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellEditor_Reset, 1, NULL },
    { "SetCellAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellEditor_SetCellAttr, 1, NULL },
    { "SetControl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellEditor_SetControl, 1, NULL },

#if (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)
    { "SetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellEditor_SetSize, 1, NULL },
#endif // (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)

    { "Show", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellEditor_Show, 1, NULL },
    { "StartingClick", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellEditor_StartingClick, 1, NULL },
    { "StartingKey", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellEditor_StartingKey, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridCellEditor_delete, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridCellEditor_methodCount = sizeof(wxGridCellEditor_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridCellTextEditor
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridCellTextEditor'
int wxluatype_wxGridCellTextEditor = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellTextEditor_delete[] = { &wxluatype_wxGridCellTextEditor, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellTextEditor_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridCellTextEditor_delete }};

static int LUACALL wxLua_wxGridCellTextEditor_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellTextEditor_constructor[1] = {{ wxLua_wxGridCellTextEditor_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxGridCellTextEditor();
static int LUACALL wxLua_wxGridCellTextEditor_constructor(lua_State *L)
{
    // call constructor
    wxGridCellTextEditor* returns = new wxGridCellTextEditor();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellTextEditor);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellTextEditor);

    return 1;
}




// %override wxLua_wxGridCellTextEditor_delete_function
// delete is private in wxGridCellWorker, DecRef() it in derived classes
void wxLua_wxGridCellTextEditor_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxGridCellTextEditor>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridCellTextEditor_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridCellTextEditor_delete, 1, NULL },
    { "wxGridCellTextEditor", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridCellTextEditor_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridCellTextEditor_methodCount = sizeof(wxGridCellTextEditor_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridCellNumberEditor
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridCellNumberEditor'
int wxluatype_wxGridCellNumberEditor = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellNumberEditor_delete[] = { &wxluatype_wxGridCellNumberEditor, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellNumberEditor_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridCellNumberEditor_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellNumberEditor_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellNumberEditor_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellNumberEditor_constructor[1] = {{ wxLua_wxGridCellNumberEditor_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxGridCellNumberEditor_constructor }};
//     wxGridCellNumberEditor(int min = -1, int max = -1);
static int LUACALL wxLua_wxGridCellNumberEditor_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int max = -1
    int max = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : -1);
    // int min = -1
    int min = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : -1);
    // call constructor
    wxGridCellNumberEditor* returns = new wxGridCellNumberEditor(min, max);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellNumberEditor);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellNumberEditor);

    return 1;
}




// %override wxLua_wxGridCellNumberEditor_delete_function
// delete is private in wxGridCellWorker, DecRef() it in derived classes
void wxLua_wxGridCellNumberEditor_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxGridCellNumberEditor>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridCellNumberEditor_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridCellNumberEditor_delete, 1, NULL },
    { "wxGridCellNumberEditor", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridCellNumberEditor_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridCellNumberEditor_methodCount = sizeof(wxGridCellNumberEditor_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridCellFloatEditor
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridCellFloatEditor'
int wxluatype_wxGridCellFloatEditor = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellFloatEditor_delete[] = { &wxluatype_wxGridCellFloatEditor, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellFloatEditor_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridCellFloatEditor_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellFloatEditor_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellFloatEditor_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellFloatEditor_constructor[1] = {{ wxLua_wxGridCellFloatEditor_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxGridCellFloatEditor_constructor }};
//     wxGridCellFloatEditor(int width = -1, int precision = -1);
static int LUACALL wxLua_wxGridCellFloatEditor_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int precision = -1
    int precision = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : -1);
    // int width = -1
    int width = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : -1);
    // call constructor
    wxGridCellFloatEditor* returns = new wxGridCellFloatEditor(width, precision);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellFloatEditor);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellFloatEditor);

    return 1;
}




// %override wxLua_wxGridCellFloatEditor_delete_function
// delete is private in wxGridCellWorker, DecRef() it in derived classes
void wxLua_wxGridCellFloatEditor_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxGridCellFloatEditor>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridCellFloatEditor_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridCellFloatEditor_delete, 1, NULL },
    { "wxGridCellFloatEditor", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridCellFloatEditor_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridCellFloatEditor_methodCount = sizeof(wxGridCellFloatEditor_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridCellBoolEditor
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridCellBoolEditor'
int wxluatype_wxGridCellBoolEditor = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellBoolEditor_delete[] = { &wxluatype_wxGridCellBoolEditor, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellBoolEditor_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridCellBoolEditor_delete }};

static int LUACALL wxLua_wxGridCellBoolEditor_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellBoolEditor_constructor[1] = {{ wxLua_wxGridCellBoolEditor_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxGridCellBoolEditor();
static int LUACALL wxLua_wxGridCellBoolEditor_constructor(lua_State *L)
{
    // call constructor
    wxGridCellBoolEditor* returns = new wxGridCellBoolEditor();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellBoolEditor);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellBoolEditor);

    return 1;
}




// %override wxLua_wxGridCellBoolEditor_delete_function
// delete is private in wxGridCellWorker, DecRef() it in derived classes
void wxLua_wxGridCellBoolEditor_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxGridCellBoolEditor>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridCellBoolEditor_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridCellBoolEditor_delete, 1, NULL },
    { "wxGridCellBoolEditor", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridCellBoolEditor_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridCellBoolEditor_methodCount = sizeof(wxGridCellBoolEditor_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridCellChoiceEditor
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridCellChoiceEditor'
int wxluatype_wxGridCellChoiceEditor = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellChoiceEditor_delete[] = { &wxluatype_wxGridCellChoiceEditor, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellChoiceEditor_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridCellChoiceEditor_delete }};


#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellChoiceEditor_constructor[] = { &wxluatype_wxArrayString, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGridCellChoiceEditor_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellChoiceEditor_constructor[1] = {{ wxLua_wxGridCellChoiceEditor_constructor, WXLUAMETHOD_CONSTRUCTOR, 1, 2, s_wxluatypeArray_wxLua_wxGridCellChoiceEditor_constructor }};
//     wxGridCellChoiceEditor(const wxArrayString& choices, bool allowOthers = false);
static int LUACALL wxLua_wxGridCellChoiceEditor_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool allowOthers = false
    bool allowOthers = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : false);
    // const wxArrayString choices
    wxLuaSmartwxArrayString choices = wxlua_getwxArrayString(L, 1);
    // call constructor
    wxGridCellChoiceEditor* returns = new wxGridCellChoiceEditor(choices, allowOthers);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellChoiceEditor);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellChoiceEditor);

    return 1;
}

#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxGrid && wxUSE_GRID)



// %override wxLua_wxGridCellChoiceEditor_delete_function
// delete is private in wxGridCellWorker, DecRef() it in derived classes
void wxLua_wxGridCellChoiceEditor_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxGridCellChoiceEditor>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridCellChoiceEditor_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridCellChoiceEditor_delete, 1, NULL },

#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "wxGridCellChoiceEditor", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridCellChoiceEditor_constructor, 1, NULL },
#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { 0, 0, 0, 0 },
};

int wxGridCellChoiceEditor_methodCount = sizeof(wxGridCellChoiceEditor_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridCellEnumEditor
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridCellEnumEditor'
int wxluatype_wxGridCellEnumEditor = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEnumEditor_delete[] = { &wxluatype_wxGridCellEnumEditor, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEnumEditor_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridCellEnumEditor_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellEnumEditor_constructor[] = { &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGridCellEnumEditor_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellEnumEditor_constructor[1] = {{ wxLua_wxGridCellEnumEditor_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 1, s_wxluatypeArray_wxLua_wxGridCellEnumEditor_constructor }};
//     wxGridCellEnumEditor(const wxString& choices = "");
static int LUACALL wxLua_wxGridCellEnumEditor_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString choices = ""
    const wxString choices = (argCount >= 1 ? wxlua_getwxStringtype(L, 1) : wxString(wxEmptyString));
    // call constructor
    wxGridCellEnumEditor* returns = new wxGridCellEnumEditor(choices);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellEnumEditor);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellEnumEditor);

    return 1;
}




// %override wxLua_wxGridCellEnumEditor_delete_function
// delete is private in wxGridCellWorker, DecRef() it in derived classes
void wxLua_wxGridCellEnumEditor_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxGridCellEnumEditor>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridCellEnumEditor_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridCellEnumEditor_delete, 1, NULL },
    { "wxGridCellEnumEditor", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridCellEnumEditor_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridCellEnumEditor_methodCount = sizeof(wxGridCellEnumEditor_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridCellAutoWrapStringEditor
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridCellAutoWrapStringEditor'
int wxluatype_wxGridCellAutoWrapStringEditor = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAutoWrapStringEditor_delete[] = { &wxluatype_wxGridCellAutoWrapStringEditor, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAutoWrapStringEditor_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAutoWrapStringEditor_delete }};

static int LUACALL wxLua_wxGridCellAutoWrapStringEditor_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAutoWrapStringEditor_constructor[1] = {{ wxLua_wxGridCellAutoWrapStringEditor_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxGridCellAutoWrapStringEditor();
static int LUACALL wxLua_wxGridCellAutoWrapStringEditor_constructor(lua_State *L)
{
    // call constructor
    wxGridCellAutoWrapStringEditor* returns = new wxGridCellAutoWrapStringEditor();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellAutoWrapStringEditor);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellAutoWrapStringEditor);

    return 1;
}




// %override wxLua_wxGridCellAutoWrapStringEditor_delete_function
// delete is private in wxGridCellWorker, DecRef() it in derived classes
void wxLua_wxGridCellAutoWrapStringEditor_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxGridCellAutoWrapStringEditor>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridCellAutoWrapStringEditor_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridCellAutoWrapStringEditor_delete, 1, NULL },
    { "wxGridCellAutoWrapStringEditor", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridCellAutoWrapStringEditor_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridCellAutoWrapStringEditor_methodCount = sizeof(wxGridCellAutoWrapStringEditor_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridCellAttr
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridCellAttr'
int wxluatype_wxGridCellAttr = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_DecRef[] = { &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellAttr_DecRef(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_DecRef[1] = {{ wxLua_wxGridCellAttr_DecRef, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAttr_DecRef }};
//     void DecRef();
static int LUACALL wxLua_wxGridCellAttr_DecRef(lua_State *L)
{
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call DecRef
    self->DecRef();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_GetAlignment[] = { &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellAttr_GetAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_GetAlignment[1] = {{ wxLua_wxGridCellAttr_GetAlignment, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAttr_GetAlignment }};
// %override wxLua_wxGridCellAttr_GetAlignment
// void GetAlignment(int *horz, int *vert) const
static int LUACALL wxLua_wxGridCellAttr_GetAlignment(lua_State *L)
{
    int horz;
    int vert;

    // get this
    wxGridCellAttr *self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call GetAlignment
    self->GetAlignment(&horz, &vert);

    lua_pushinteger(L, horz);
    lua_pushinteger(L, vert);
    // return the number of parameters
    return 2;
}



#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_GetBackgroundColour[] = { &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellAttr_GetBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_GetBackgroundColour[1] = {{ wxLua_wxGridCellAttr_GetBackgroundColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAttr_GetBackgroundColour }};
//     wxColour GetBackgroundColour() const;
static int LUACALL wxLua_wxGridCellAttr_GetBackgroundColour(lua_State *L)
{
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call GetBackgroundColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetBackgroundColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_GetEditor[] = { &wxluatype_wxGridCellAttr, &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellAttr_GetEditor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_GetEditor[1] = {{ wxLua_wxGridCellAttr_GetEditor, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGridCellAttr_GetEditor }};
//     %gc wxGridCellEditor *GetEditor(wxGrid* grid, int row, int col) const;
static int LUACALL wxLua_wxGridCellAttr_GetEditor(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 4);
    // int row
    int row = (int)wxlua_getnumbertype(L, 3);
    // wxGrid grid
    wxGrid * grid = (wxGrid *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGrid);
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call GetEditor
    wxGridCellEditor* returns = (wxGridCellEditor*)self->GetEditor(grid, row, col);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns, wxluatype_wxGridCellEditor);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellEditor);

    return 1;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_GetFont[] = { &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellAttr_GetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_GetFont[1] = {{ wxLua_wxGridCellAttr_GetFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAttr_GetFont }};
//     wxFont GetFont() const;
static int LUACALL wxLua_wxGridCellAttr_GetFont(lua_State *L)
{
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call GetFont
    // allocate a new object using the copy constructor
    wxFont* returns = new wxFont(self->GetFont());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxFont);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_GetKind[] = { &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellAttr_GetKind(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_GetKind[1] = {{ wxLua_wxGridCellAttr_GetKind, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAttr_GetKind }};
//     wxGridCellAttr::wxAttrKind GetKind();
static int LUACALL wxLua_wxGridCellAttr_GetKind(lua_State *L)
{
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call GetKind
    wxGridCellAttr::wxAttrKind returns = (self->GetKind());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_GetOverflow[] = { &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellAttr_GetOverflow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_GetOverflow[1] = {{ wxLua_wxGridCellAttr_GetOverflow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAttr_GetOverflow }};
//     bool GetOverflow() const;
static int LUACALL wxLua_wxGridCellAttr_GetOverflow(lua_State *L)
{
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call GetOverflow
    bool returns = (self->GetOverflow());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_GetRenderer[] = { &wxluatype_wxGridCellAttr, &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellAttr_GetRenderer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_GetRenderer[1] = {{ wxLua_wxGridCellAttr_GetRenderer, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGridCellAttr_GetRenderer }};
//     %gc wxGridCellRenderer *GetRenderer(wxGrid* grid, int row, int col) const;
static int LUACALL wxLua_wxGridCellAttr_GetRenderer(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 4);
    // int row
    int row = (int)wxlua_getnumbertype(L, 3);
    // wxGrid grid
    wxGrid * grid = (wxGrid *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGrid);
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call GetRenderer
    wxGridCellRenderer* returns = (wxGridCellRenderer*)self->GetRenderer(grid, row, col);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns, wxluatype_wxGridCellRenderer);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellRenderer);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_GetSize[] = { &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellAttr_GetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_GetSize[1] = {{ wxLua_wxGridCellAttr_GetSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAttr_GetSize }};
// %override wxLua_wxGridCellAttr_GetSize
// void GetSize(int *num_rows, int *num_cols) const
static int LUACALL wxLua_wxGridCellAttr_GetSize(lua_State *L)
{
    int num_rows;
    int num_cols;

    // get this
    wxGridCellAttr *self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call GetSize
    self->GetSize(&num_rows, &num_cols);

    lua_pushinteger(L, num_rows);
    lua_pushinteger(L, num_cols);
    // return the number of parameters
    return 2;
}



#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_GetTextColour[] = { &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellAttr_GetTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_GetTextColour[1] = {{ wxLua_wxGridCellAttr_GetTextColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAttr_GetTextColour }};
//     wxColour GetTextColour() const;
static int LUACALL wxLua_wxGridCellAttr_GetTextColour(lua_State *L)
{
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call GetTextColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetTextColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_HasAlignment[] = { &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellAttr_HasAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_HasAlignment[1] = {{ wxLua_wxGridCellAttr_HasAlignment, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAttr_HasAlignment }};
//     bool HasAlignment() const;
static int LUACALL wxLua_wxGridCellAttr_HasAlignment(lua_State *L)
{
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call HasAlignment
    bool returns = (self->HasAlignment());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_HasBackgroundColour[] = { &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellAttr_HasBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_HasBackgroundColour[1] = {{ wxLua_wxGridCellAttr_HasBackgroundColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAttr_HasBackgroundColour }};
//     bool HasBackgroundColour() const;
static int LUACALL wxLua_wxGridCellAttr_HasBackgroundColour(lua_State *L)
{
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call HasBackgroundColour
    bool returns = (self->HasBackgroundColour());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_HasEditor[] = { &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellAttr_HasEditor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_HasEditor[1] = {{ wxLua_wxGridCellAttr_HasEditor, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAttr_HasEditor }};
//     bool HasEditor() const;
static int LUACALL wxLua_wxGridCellAttr_HasEditor(lua_State *L)
{
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call HasEditor
    bool returns = (self->HasEditor());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_HasFont[] = { &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellAttr_HasFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_HasFont[1] = {{ wxLua_wxGridCellAttr_HasFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAttr_HasFont }};
//     bool HasFont() const;
static int LUACALL wxLua_wxGridCellAttr_HasFont(lua_State *L)
{
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call HasFont
    bool returns = (self->HasFont());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_HasOverflowMode[] = { &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellAttr_HasOverflowMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_HasOverflowMode[1] = {{ wxLua_wxGridCellAttr_HasOverflowMode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAttr_HasOverflowMode }};
//     bool HasOverflowMode() const;
static int LUACALL wxLua_wxGridCellAttr_HasOverflowMode(lua_State *L)
{
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call HasOverflowMode
    bool returns = (self->HasOverflowMode());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_HasReadWriteMode[] = { &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellAttr_HasReadWriteMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_HasReadWriteMode[1] = {{ wxLua_wxGridCellAttr_HasReadWriteMode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAttr_HasReadWriteMode }};
//     bool HasReadWriteMode() const;
static int LUACALL wxLua_wxGridCellAttr_HasReadWriteMode(lua_State *L)
{
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call HasReadWriteMode
    bool returns = (self->HasReadWriteMode());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_HasRenderer[] = { &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellAttr_HasRenderer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_HasRenderer[1] = {{ wxLua_wxGridCellAttr_HasRenderer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAttr_HasRenderer }};
//     bool HasRenderer() const;
static int LUACALL wxLua_wxGridCellAttr_HasRenderer(lua_State *L)
{
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call HasRenderer
    bool returns = (self->HasRenderer());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_HasSize[] = { &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellAttr_HasSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_HasSize[1] = {{ wxLua_wxGridCellAttr_HasSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAttr_HasSize }};
//     bool HasSize() const;
static int LUACALL wxLua_wxGridCellAttr_HasSize(lua_State *L)
{
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call HasSize
    bool returns = (self->HasSize());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_HasTextColour[] = { &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellAttr_HasTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_HasTextColour[1] = {{ wxLua_wxGridCellAttr_HasTextColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAttr_HasTextColour }};
//     bool HasTextColour() const;
static int LUACALL wxLua_wxGridCellAttr_HasTextColour(lua_State *L)
{
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call HasTextColour
    bool returns = (self->HasTextColour());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_IncRef[] = { &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellAttr_IncRef(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_IncRef[1] = {{ wxLua_wxGridCellAttr_IncRef, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAttr_IncRef }};
//     void IncRef();
static int LUACALL wxLua_wxGridCellAttr_IncRef(lua_State *L)
{
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call IncRef
    self->IncRef();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_IsReadOnly[] = { &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellAttr_IsReadOnly(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_IsReadOnly[1] = {{ wxLua_wxGridCellAttr_IsReadOnly, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAttr_IsReadOnly }};
//     bool IsReadOnly() const;
static int LUACALL wxLua_wxGridCellAttr_IsReadOnly(lua_State *L)
{
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call IsReadOnly
    bool returns = (self->IsReadOnly());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_MergeWith[] = { &wxluatype_wxGridCellAttr, &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellAttr_MergeWith(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_MergeWith[1] = {{ wxLua_wxGridCellAttr_MergeWith, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellAttr_MergeWith }};
//     void MergeWith(wxGridCellAttr *mergefrom);
static int LUACALL wxLua_wxGridCellAttr_MergeWith(lua_State *L)
{
    // wxGridCellAttr mergefrom
    wxGridCellAttr * mergefrom = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridCellAttr);
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call MergeWith
    self->MergeWith(mergefrom);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_SetAlignment[] = { &wxluatype_wxGridCellAttr, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellAttr_SetAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_SetAlignment[1] = {{ wxLua_wxGridCellAttr_SetAlignment, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridCellAttr_SetAlignment }};
//     void SetAlignment(int hAlign, int vAlign);
static int LUACALL wxLua_wxGridCellAttr_SetAlignment(lua_State *L)
{
    // int vAlign
    int vAlign = (int)wxlua_getnumbertype(L, 3);
    // int hAlign
    int hAlign = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call SetAlignment
    self->SetAlignment(hAlign, vAlign);

    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_SetBackgroundColour[] = { &wxluatype_wxGridCellAttr, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxGridCellAttr_SetBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_SetBackgroundColour[1] = {{ wxLua_wxGridCellAttr_SetBackgroundColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellAttr_SetBackgroundColour }};
//     void SetBackgroundColour(const wxColour& colBack);
static int LUACALL wxLua_wxGridCellAttr_SetBackgroundColour(lua_State *L)
{
    // const wxColour colBack
    const wxColour * colBack = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call SetBackgroundColour
    self->SetBackgroundColour(*colBack);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_SetDefAttr[] = { &wxluatype_wxGridCellAttr, &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGridCellAttr_SetDefAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_SetDefAttr[1] = {{ wxLua_wxGridCellAttr_SetDefAttr, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellAttr_SetDefAttr }};
//     void SetDefAttr(wxGridCellAttr* defAttr);
static int LUACALL wxLua_wxGridCellAttr_SetDefAttr(lua_State *L)
{
    // wxGridCellAttr defAttr
    wxGridCellAttr * defAttr = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridCellAttr);
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call SetDefAttr
    self->SetDefAttr(defAttr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_SetEditor[] = { &wxluatype_wxGridCellAttr, &wxluatype_wxGridCellEditor, NULL };
static int LUACALL wxLua_wxGridCellAttr_SetEditor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_SetEditor[1] = {{ wxLua_wxGridCellAttr_SetEditor, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellAttr_SetEditor }};
//     void SetEditor(%IncRef wxGridCellEditor* editor);
static int LUACALL wxLua_wxGridCellAttr_SetEditor(lua_State *L)
{
    // wxGridCellEditor editor
    wxGridCellEditor * editor = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridCellEditor);
    // This param will have DecRef() called on it so we IncRef() it to not have to worry about the Lua gc
    editor->IncRef();
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call SetEditor
    self->SetEditor(editor);

    return 0;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_SetFont[] = { &wxluatype_wxGridCellAttr, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxGridCellAttr_SetFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_SetFont[1] = {{ wxLua_wxGridCellAttr_SetFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellAttr_SetFont }};
//     void SetFont(const wxFont& font);
static int LUACALL wxLua_wxGridCellAttr_SetFont(lua_State *L)
{
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call SetFont
    self->SetFont(*font);

    return 0;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_SetKind[] = { &wxluatype_wxGridCellAttr, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxGridCellAttr_SetKind(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_SetKind[1] = {{ wxLua_wxGridCellAttr_SetKind, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellAttr_SetKind }};
//     void SetKind(wxGridCellAttr::wxAttrKind kind);
static int LUACALL wxLua_wxGridCellAttr_SetKind(lua_State *L)
{
    // wxGridCellAttr::wxAttrKind kind
    wxGridCellAttr::wxAttrKind kind = (wxGridCellAttr::wxAttrKind)wxlua_getenumtype(L, 2);
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call SetKind
    self->SetKind(kind);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_SetOverflow[] = { &wxluatype_wxGridCellAttr, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGridCellAttr_SetOverflow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_SetOverflow[1] = {{ wxLua_wxGridCellAttr_SetOverflow, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxGridCellAttr_SetOverflow }};
//     void SetOverflow(bool allow = true);
static int LUACALL wxLua_wxGridCellAttr_SetOverflow(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool allow = true
    bool allow = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call SetOverflow
    self->SetOverflow(allow);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_SetReadOnly[] = { &wxluatype_wxGridCellAttr, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGridCellAttr_SetReadOnly(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_SetReadOnly[1] = {{ wxLua_wxGridCellAttr_SetReadOnly, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxGridCellAttr_SetReadOnly }};
//     void SetReadOnly(bool isReadOnly = true);
static int LUACALL wxLua_wxGridCellAttr_SetReadOnly(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool isReadOnly = true
    bool isReadOnly = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call SetReadOnly
    self->SetReadOnly(isReadOnly);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_SetRenderer[] = { &wxluatype_wxGridCellAttr, &wxluatype_wxGridCellRenderer, NULL };
static int LUACALL wxLua_wxGridCellAttr_SetRenderer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_SetRenderer[1] = {{ wxLua_wxGridCellAttr_SetRenderer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellAttr_SetRenderer }};
//     void SetRenderer(%IncRef wxGridCellRenderer *renderer);
static int LUACALL wxLua_wxGridCellAttr_SetRenderer(lua_State *L)
{
    // wxGridCellRenderer renderer
    wxGridCellRenderer * renderer = (wxGridCellRenderer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridCellRenderer);
    // This param will have DecRef() called on it so we IncRef() it to not have to worry about the Lua gc
    renderer->IncRef();
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call SetRenderer
    self->SetRenderer(renderer);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_SetSize[] = { &wxluatype_wxGridCellAttr, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellAttr_SetSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_SetSize[1] = {{ wxLua_wxGridCellAttr_SetSize, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridCellAttr_SetSize }};
//     void SetSize(int num_rows, int num_cols);
static int LUACALL wxLua_wxGridCellAttr_SetSize(lua_State *L)
{
    // int num_cols
    int num_cols = (int)wxlua_getnumbertype(L, 3);
    // int num_rows
    int num_rows = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call SetSize
    self->SetSize(num_rows, num_cols);

    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_SetTextColour[] = { &wxluatype_wxGridCellAttr, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxGridCellAttr_SetTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_SetTextColour[1] = {{ wxLua_wxGridCellAttr_SetTextColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellAttr_SetTextColour }};
//     void SetTextColour(const wxColour& colText);
static int LUACALL wxLua_wxGridCellAttr_SetTextColour(lua_State *L)
{
    // const wxColour colText
    const wxColour * colText = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxGridCellAttr * self = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttr);
    // call SetTextColour
    self->SetTextColour(*colText);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_delete[] = { &wxluatype_wxGridCellAttr, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAttr_delete }};


#if ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttr_constructor1[] = { &wxluatype_wxColour, &wxluatype_wxColour, &wxluatype_wxFont, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellAttr_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_constructor1[1] = {{ wxLua_wxGridCellAttr_constructor1, WXLUAMETHOD_CONSTRUCTOR, 5, 5, s_wxluatypeArray_wxLua_wxGridCellAttr_constructor1 }};
//     wxGridCellAttr(const wxColour& colText, const wxColour& colBack, const wxFont& font, int hAlign, int vAlign);
static int LUACALL wxLua_wxGridCellAttr_constructor1(lua_State *L)
{
    // int vAlign
    int vAlign = (int)wxlua_getnumbertype(L, 5);
    // int hAlign
    int hAlign = (int)wxlua_getnumbertype(L, 4);
    // const wxFont font
    const wxFont * font = (const wxFont *)wxluaT_getuserdatatype(L, 3, wxluatype_wxFont);
    // const wxColour colBack
    const wxColour * colBack = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // const wxColour colText
    const wxColour * colText = (const wxColour *)wxluaT_getuserdatatype(L, 1, wxluatype_wxColour);
    // call constructor
    wxGridCellAttr* returns = new wxGridCellAttr(*colText, *colBack, *font, hAlign, vAlign);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellAttr);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellAttr);

    return 1;
}

#endif // ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static int LUACALL wxLua_wxGridCellAttr_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_constructor[1] = {{ wxLua_wxGridCellAttr_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxGridCellAttr();
static int LUACALL wxLua_wxGridCellAttr_constructor(lua_State *L)
{
    // call constructor
    wxGridCellAttr* returns = new wxGridCellAttr();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellAttr);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellAttr);

    return 1;
}




#if (((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxGrid && wxUSE_GRID))||(wxLUA_USE_wxGrid && wxUSE_GRID)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttr_constructor_overload[] =
{

#if ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { wxLua_wxGridCellAttr_constructor1, WXLUAMETHOD_CONSTRUCTOR, 5, 5, s_wxluatypeArray_wxLua_wxGridCellAttr_constructor1 },
#endif // ((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { wxLua_wxGridCellAttr_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxGridCellAttr_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxGridCellAttr_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxGrid && wxUSE_GRID))||(wxLUA_USE_wxGrid && wxUSE_GRID)

// %override wxLua_wxGridCellAttr_delete_function
// delete is private in wxGridCellWorker, DecRef() it in derived classes
void wxLua_wxGridCellAttr_delete_function(void** p)
{
    wxLua_wxRefCounter_DecRef_delete_function<wxGridCellAttr>(p);
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridCellAttr_methods[] = {
    { "DecRef", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_DecRef, 1, NULL },
    { "GetAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_GetAlignment, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "GetBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_GetBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "GetEditor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_GetEditor, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "GetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_GetFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "GetKind", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_GetKind, 1, NULL },
    { "GetOverflow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_GetOverflow, 1, NULL },
    { "GetRenderer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_GetRenderer, 1, NULL },
    { "GetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_GetSize, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "GetTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_GetTextColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "HasAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_HasAlignment, 1, NULL },
    { "HasBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_HasBackgroundColour, 1, NULL },
    { "HasEditor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_HasEditor, 1, NULL },
    { "HasFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_HasFont, 1, NULL },
    { "HasOverflowMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_HasOverflowMode, 1, NULL },
    { "HasReadWriteMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_HasReadWriteMode, 1, NULL },
    { "HasRenderer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_HasRenderer, 1, NULL },
    { "HasSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_HasSize, 1, NULL },
    { "HasTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_HasTextColour, 1, NULL },
    { "IncRef", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_IncRef, 1, NULL },
    { "IsReadOnly", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_IsReadOnly, 1, NULL },
    { "MergeWith", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_MergeWith, 1, NULL },
    { "SetAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_SetAlignment, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "SetBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_SetBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "SetDefAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_SetDefAttr, 1, NULL },
    { "SetEditor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_SetEditor, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "SetFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_SetFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "SetKind", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_SetKind, 1, NULL },
    { "SetOverflow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_SetOverflow, 1, NULL },
    { "SetReadOnly", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_SetReadOnly, 1, NULL },
    { "SetRenderer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_SetRenderer, 1, NULL },
    { "SetSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_SetSize, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "SetTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttr_SetTextColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridCellAttr_delete, 1, NULL },

#if (((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxGrid && wxUSE_GRID))||(wxLUA_USE_wxGrid && wxUSE_GRID)
    { "wxGridCellAttr", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridCellAttr_constructor_overload, s_wxluafunc_wxLua_wxGridCellAttr_constructor_overload_count, 0 },
#endif // (((wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxFont)) && (wxLUA_USE_wxGrid && wxUSE_GRID))||(wxLUA_USE_wxGrid && wxUSE_GRID)

    { 0, 0, 0, 0 },
};

int wxGridCellAttr_methodCount = sizeof(wxGridCellAttr_methods)/sizeof(wxLuaBindMethod) - 1;

wxLuaBindNumber wxGridCellAttr_enums[] = {
#if wxLUA_USE_wxGrid && wxUSE_GRID
        { "Any", wxGridCellAttr::Any },
        { "Cell", wxGridCellAttr::Cell },
        { "Col", wxGridCellAttr::Col },
        { "Default", wxGridCellAttr::Default },
        { "Merged", wxGridCellAttr::Merged },
        { "Row", wxGridCellAttr::Row },
#endif // wxLUA_USE_wxGrid && wxUSE_GRID

    { NULL, 0, },
};
int wxGridCellAttr_enumCount = sizeof(wxGridCellAttr_enums)/sizeof(wxLuaBindNumber) - 1;
#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridCellAttrProvider
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridCellAttrProvider'
int wxluatype_wxGridCellAttrProvider = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttrProvider_GetAttr[] = { &wxluatype_wxGridCellAttrProvider, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxGridCellAttrProvider_GetAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttrProvider_GetAttr[1] = {{ wxLua_wxGridCellAttrProvider_GetAttr, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGridCellAttrProvider_GetAttr }};
//     %gc wxGridCellAttr *GetAttr(int row, int col, wxGridCellAttr::wxAttrKind  kind) const;
static int LUACALL wxLua_wxGridCellAttrProvider_GetAttr(lua_State *L)
{
    // wxGridCellAttr::wxAttrKind kind
    wxGridCellAttr::wxAttrKind kind = (wxGridCellAttr::wxAttrKind)wxlua_getenumtype(L, 4);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridCellAttrProvider * self = (wxGridCellAttrProvider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttrProvider);
    // call GetAttr
    wxGridCellAttr* returns = (wxGridCellAttr*)self->GetAttr(row, col, kind);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns, wxluatype_wxGridCellAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttrProvider_SetAttr[] = { &wxluatype_wxGridCellAttrProvider, &wxluatype_wxGridCellAttr, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellAttrProvider_SetAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttrProvider_SetAttr[1] = {{ wxLua_wxGridCellAttrProvider_SetAttr, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGridCellAttrProvider_SetAttr }};
//     void SetAttr(%IncRef wxGridCellAttr *attr, int row, int col);
static int LUACALL wxLua_wxGridCellAttrProvider_SetAttr(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 4);
    // int row
    int row = (int)wxlua_getnumbertype(L, 3);
    // wxGridCellAttr attr
    wxGridCellAttr * attr = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridCellAttr);
    // This param will have DecRef() called on it so we IncRef() it to not have to worry about the Lua gc
    attr->IncRef();
    // get this
    wxGridCellAttrProvider * self = (wxGridCellAttrProvider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttrProvider);
    // call SetAttr
    self->SetAttr(attr, row, col);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttrProvider_SetColAttr[] = { &wxluatype_wxGridCellAttrProvider, &wxluatype_wxGridCellAttr, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellAttrProvider_SetColAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttrProvider_SetColAttr[1] = {{ wxLua_wxGridCellAttrProvider_SetColAttr, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridCellAttrProvider_SetColAttr }};
//     void SetColAttr(%IncRef wxGridCellAttr *attr, int col);
static int LUACALL wxLua_wxGridCellAttrProvider_SetColAttr(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // wxGridCellAttr attr
    wxGridCellAttr * attr = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridCellAttr);
    // This param will have DecRef() called on it so we IncRef() it to not have to worry about the Lua gc
    attr->IncRef();
    // get this
    wxGridCellAttrProvider * self = (wxGridCellAttrProvider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttrProvider);
    // call SetColAttr
    self->SetColAttr(attr, col);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttrProvider_SetRowAttr[] = { &wxluatype_wxGridCellAttrProvider, &wxluatype_wxGridCellAttr, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellAttrProvider_SetRowAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttrProvider_SetRowAttr[1] = {{ wxLua_wxGridCellAttrProvider_SetRowAttr, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridCellAttrProvider_SetRowAttr }};
//     void SetRowAttr(%IncRef wxGridCellAttr *attr, int row);
static int LUACALL wxLua_wxGridCellAttrProvider_SetRowAttr(lua_State *L)
{
    // int row
    int row = (int)wxlua_getnumbertype(L, 3);
    // wxGridCellAttr attr
    wxGridCellAttr * attr = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridCellAttr);
    // This param will have DecRef() called on it so we IncRef() it to not have to worry about the Lua gc
    attr->IncRef();
    // get this
    wxGridCellAttrProvider * self = (wxGridCellAttrProvider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttrProvider);
    // call SetRowAttr
    self->SetRowAttr(attr, row);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttrProvider_UpdateAttrCols[] = { &wxluatype_wxGridCellAttrProvider, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellAttrProvider_UpdateAttrCols(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttrProvider_UpdateAttrCols[1] = {{ wxLua_wxGridCellAttrProvider_UpdateAttrCols, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridCellAttrProvider_UpdateAttrCols }};
//     void UpdateAttrCols(size_t pos, int numCols);
static int LUACALL wxLua_wxGridCellAttrProvider_UpdateAttrCols(lua_State *L)
{
    // int numCols
    int numCols = (int)wxlua_getnumbertype(L, 3);
    // size_t pos
    size_t pos = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxGridCellAttrProvider * self = (wxGridCellAttrProvider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttrProvider);
    // call UpdateAttrCols
    self->UpdateAttrCols(pos, numCols);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttrProvider_UpdateAttrRows[] = { &wxluatype_wxGridCellAttrProvider, &wxluatype_TINTEGER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellAttrProvider_UpdateAttrRows(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttrProvider_UpdateAttrRows[1] = {{ wxLua_wxGridCellAttrProvider_UpdateAttrRows, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridCellAttrProvider_UpdateAttrRows }};
//     void UpdateAttrRows(size_t pos, int numRows);
static int LUACALL wxLua_wxGridCellAttrProvider_UpdateAttrRows(lua_State *L)
{
    // int numRows
    int numRows = (int)wxlua_getnumbertype(L, 3);
    // size_t pos
    size_t pos = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxGridCellAttrProvider * self = (wxGridCellAttrProvider *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellAttrProvider);
    // call UpdateAttrRows
    self->UpdateAttrRows(pos, numRows);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellAttrProvider_delete[] = { &wxluatype_wxGridCellAttrProvider, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttrProvider_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridCellAttrProvider_delete }};

static int LUACALL wxLua_wxGridCellAttrProvider_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellAttrProvider_constructor[1] = {{ wxLua_wxGridCellAttrProvider_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxGridCellAttrProvider();
static int LUACALL wxLua_wxGridCellAttrProvider_constructor(lua_State *L)
{
    // call constructor
    wxGridCellAttrProvider* returns = new wxGridCellAttrProvider();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellAttrProvider);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellAttrProvider);

    return 1;
}




void wxLua_wxGridCellAttrProvider_delete_function(void** p)
{
    wxGridCellAttrProvider* o = (wxGridCellAttrProvider*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridCellAttrProvider_methods[] = {
    { "GetAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttrProvider_GetAttr, 1, NULL },
    { "SetAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttrProvider_SetAttr, 1, NULL },
    { "SetColAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttrProvider_SetColAttr, 1, NULL },
    { "SetRowAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttrProvider_SetRowAttr, 1, NULL },
    { "UpdateAttrCols", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttrProvider_UpdateAttrCols, 1, NULL },
    { "UpdateAttrRows", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellAttrProvider_UpdateAttrRows, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridCellAttrProvider_delete, 1, NULL },
    { "wxGridCellAttrProvider", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridCellAttrProvider_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridCellAttrProvider_methodCount = sizeof(wxGridCellAttrProvider_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridTableBase
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridTableBase'
int wxluatype_wxGridTableBase = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_AppendCols[] = { &wxluatype_wxGridTableBase, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxGridTableBase_AppendCols(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_AppendCols[1] = {{ wxLua_wxGridTableBase_AppendCols, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxGridTableBase_AppendCols }};
//     virtual bool AppendCols(size_t numCols = 1);
static int LUACALL wxLua_wxGridTableBase_AppendCols(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // size_t numCols = 1
    size_t numCols = (argCount >= 2 ? (size_t)wxlua_getuintegertype(L, 2) : 1);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call AppendCols
    bool returns = (self->AppendCols(numCols));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_AppendRows[] = { &wxluatype_wxGridTableBase, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxGridTableBase_AppendRows(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_AppendRows[1] = {{ wxLua_wxGridTableBase_AppendRows, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxGridTableBase_AppendRows }};
//     virtual bool AppendRows(size_t numRows = 1);
static int LUACALL wxLua_wxGridTableBase_AppendRows(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // size_t numRows = 1
    size_t numRows = (argCount >= 2 ? (size_t)wxlua_getuintegertype(L, 2) : 1);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call AppendRows
    bool returns = (self->AppendRows(numRows));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_CanGetValueAs[] = { &wxluatype_wxGridTableBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGridTableBase_CanGetValueAs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_CanGetValueAs[1] = {{ wxLua_wxGridTableBase_CanGetValueAs, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGridTableBase_CanGetValueAs }};
//     virtual bool CanGetValueAs(int row, int col, const wxString& typeName);
static int LUACALL wxLua_wxGridTableBase_CanGetValueAs(lua_State *L)
{
    // const wxString typeName
    const wxString typeName = wxlua_getwxStringtype(L, 4);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call CanGetValueAs
    bool returns = (self->CanGetValueAs(row, col, typeName));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_CanHaveAttributes[] = { &wxluatype_wxGridTableBase, NULL };
static int LUACALL wxLua_wxGridTableBase_CanHaveAttributes(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_CanHaveAttributes[1] = {{ wxLua_wxGridTableBase_CanHaveAttributes, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridTableBase_CanHaveAttributes }};
//     virtual bool CanHaveAttributes();
static int LUACALL wxLua_wxGridTableBase_CanHaveAttributes(lua_State *L)
{
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call CanHaveAttributes
    bool returns = (self->CanHaveAttributes());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_CanSetValueAs[] = { &wxluatype_wxGridTableBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGridTableBase_CanSetValueAs(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_CanSetValueAs[1] = {{ wxLua_wxGridTableBase_CanSetValueAs, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGridTableBase_CanSetValueAs }};
//     virtual bool CanSetValueAs(int row, int col, const wxString& typeName);
static int LUACALL wxLua_wxGridTableBase_CanSetValueAs(lua_State *L)
{
    // const wxString typeName
    const wxString typeName = wxlua_getwxStringtype(L, 4);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call CanSetValueAs
    bool returns = (self->CanSetValueAs(row, col, typeName));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_Clear[] = { &wxluatype_wxGridTableBase, NULL };
static int LUACALL wxLua_wxGridTableBase_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_Clear[1] = {{ wxLua_wxGridTableBase_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridTableBase_Clear }};
//     virtual void Clear();
static int LUACALL wxLua_wxGridTableBase_Clear(lua_State *L)
{
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_DeleteCols[] = { &wxluatype_wxGridTableBase, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxGridTableBase_DeleteCols(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_DeleteCols[1] = {{ wxLua_wxGridTableBase_DeleteCols, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxGridTableBase_DeleteCols }};
//     virtual bool DeleteCols(size_t pos = 0, size_t numCols = 1);
static int LUACALL wxLua_wxGridTableBase_DeleteCols(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // size_t numCols = 1
    size_t numCols = (argCount >= 3 ? (size_t)wxlua_getuintegertype(L, 3) : 1);
    // size_t pos = 0
    size_t pos = (argCount >= 2 ? (size_t)wxlua_getuintegertype(L, 2) : 0);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call DeleteCols
    bool returns = (self->DeleteCols(pos, numCols));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_DeleteRows[] = { &wxluatype_wxGridTableBase, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxGridTableBase_DeleteRows(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_DeleteRows[1] = {{ wxLua_wxGridTableBase_DeleteRows, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxGridTableBase_DeleteRows }};
//     virtual bool DeleteRows(size_t pos = 0, size_t numRows = 1);
static int LUACALL wxLua_wxGridTableBase_DeleteRows(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // size_t numRows = 1
    size_t numRows = (argCount >= 3 ? (size_t)wxlua_getuintegertype(L, 3) : 1);
    // size_t pos = 0
    size_t pos = (argCount >= 2 ? (size_t)wxlua_getuintegertype(L, 2) : 0);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call DeleteRows
    bool returns = (self->DeleteRows(pos, numRows));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_GetAttr[] = { &wxluatype_wxGridTableBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxGridTableBase_GetAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_GetAttr[1] = {{ wxLua_wxGridTableBase_GetAttr, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGridTableBase_GetAttr }};
//     virtual %gc wxGridCellAttr* GetAttr(int row, int col, wxGridCellAttr::wxAttrKind  kind);
static int LUACALL wxLua_wxGridTableBase_GetAttr(lua_State *L)
{
    // wxGridCellAttr::wxAttrKind kind
    wxGridCellAttr::wxAttrKind kind = (wxGridCellAttr::wxAttrKind)wxlua_getenumtype(L, 4);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call GetAttr
    wxGridCellAttr* returns = (wxGridCellAttr*)self->GetAttr(row, col, kind);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns, wxluatype_wxGridCellAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_GetAttrProvider[] = { &wxluatype_wxGridTableBase, NULL };
static int LUACALL wxLua_wxGridTableBase_GetAttrProvider(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_GetAttrProvider[1] = {{ wxLua_wxGridTableBase_GetAttrProvider, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridTableBase_GetAttrProvider }};
//     wxGridCellAttrProvider *GetAttrProvider() const;
static int LUACALL wxLua_wxGridTableBase_GetAttrProvider(lua_State *L)
{
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call GetAttrProvider
    wxGridCellAttrProvider* returns = (wxGridCellAttrProvider*)self->GetAttrProvider();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellAttrProvider);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_GetColLabelValue[] = { &wxluatype_wxGridTableBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridTableBase_GetColLabelValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_GetColLabelValue[1] = {{ wxLua_wxGridTableBase_GetColLabelValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridTableBase_GetColLabelValue }};
//     virtual wxString GetColLabelValue(int col);
static int LUACALL wxLua_wxGridTableBase_GetColLabelValue(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call GetColLabelValue
    wxString returns = (self->GetColLabelValue(col));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_GetNumberCols[] = { &wxluatype_wxGridTableBase, NULL };
static int LUACALL wxLua_wxGridTableBase_GetNumberCols(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_GetNumberCols[1] = {{ wxLua_wxGridTableBase_GetNumberCols, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridTableBase_GetNumberCols }};
//     virtual int GetNumberCols();
static int LUACALL wxLua_wxGridTableBase_GetNumberCols(lua_State *L)
{
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call GetNumberCols
    int returns = (self->GetNumberCols());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_GetNumberRows[] = { &wxluatype_wxGridTableBase, NULL };
static int LUACALL wxLua_wxGridTableBase_GetNumberRows(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_GetNumberRows[1] = {{ wxLua_wxGridTableBase_GetNumberRows, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridTableBase_GetNumberRows }};
//     virtual int GetNumberRows();
static int LUACALL wxLua_wxGridTableBase_GetNumberRows(lua_State *L)
{
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call GetNumberRows
    int returns = (self->GetNumberRows());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_GetRowLabelValue[] = { &wxluatype_wxGridTableBase, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridTableBase_GetRowLabelValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_GetRowLabelValue[1] = {{ wxLua_wxGridTableBase_GetRowLabelValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridTableBase_GetRowLabelValue }};
//     virtual wxString GetRowLabelValue(int row);
static int LUACALL wxLua_wxGridTableBase_GetRowLabelValue(lua_State *L)
{
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call GetRowLabelValue
    wxString returns = (self->GetRowLabelValue(row));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_GetTypeName[] = { &wxluatype_wxGridTableBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridTableBase_GetTypeName(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_GetTypeName[1] = {{ wxLua_wxGridTableBase_GetTypeName, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridTableBase_GetTypeName }};
//     virtual wxString GetTypeName(int row, int col);
static int LUACALL wxLua_wxGridTableBase_GetTypeName(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call GetTypeName
    wxString returns = (self->GetTypeName(row, col));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_GetValue[] = { &wxluatype_wxGridTableBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridTableBase_GetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_GetValue[1] = {{ wxLua_wxGridTableBase_GetValue, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridTableBase_GetValue }};
//     virtual wxString GetValue(int row, int col);
static int LUACALL wxLua_wxGridTableBase_GetValue(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call GetValue
    wxString returns = (self->GetValue(row, col));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_GetValueAsBool[] = { &wxluatype_wxGridTableBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridTableBase_GetValueAsBool(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_GetValueAsBool[1] = {{ wxLua_wxGridTableBase_GetValueAsBool, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridTableBase_GetValueAsBool }};
//     virtual bool GetValueAsBool(int row, int col);
static int LUACALL wxLua_wxGridTableBase_GetValueAsBool(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call GetValueAsBool
    bool returns = (self->GetValueAsBool(row, col));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_GetValueAsDouble[] = { &wxluatype_wxGridTableBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridTableBase_GetValueAsDouble(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_GetValueAsDouble[1] = {{ wxLua_wxGridTableBase_GetValueAsDouble, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridTableBase_GetValueAsDouble }};
//     virtual double GetValueAsDouble(int row, int col);
static int LUACALL wxLua_wxGridTableBase_GetValueAsDouble(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call GetValueAsDouble
    double returns = (self->GetValueAsDouble(row, col));
    // push the result floating point number
    lua_pushnumber(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_GetValueAsLong[] = { &wxluatype_wxGridTableBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridTableBase_GetValueAsLong(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_GetValueAsLong[1] = {{ wxLua_wxGridTableBase_GetValueAsLong, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridTableBase_GetValueAsLong }};
//     virtual long GetValueAsLong(int row, int col);
static int LUACALL wxLua_wxGridTableBase_GetValueAsLong(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call GetValueAsLong
    long returns = (self->GetValueAsLong(row, col));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_GetView[] = { &wxluatype_wxGridTableBase, NULL };
static int LUACALL wxLua_wxGridTableBase_GetView(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_GetView[1] = {{ wxLua_wxGridTableBase_GetView, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridTableBase_GetView }};
//     virtual wxGrid * GetView() const;
static int LUACALL wxLua_wxGridTableBase_GetView(lua_State *L)
{
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call GetView
    wxGrid* returns = (wxGrid*)self->GetView();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGrid);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_InsertCols[] = { &wxluatype_wxGridTableBase, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxGridTableBase_InsertCols(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_InsertCols[1] = {{ wxLua_wxGridTableBase_InsertCols, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxGridTableBase_InsertCols }};
//     virtual bool InsertCols(size_t pos = 0, size_t numCols = 1);
static int LUACALL wxLua_wxGridTableBase_InsertCols(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // size_t numCols = 1
    size_t numCols = (argCount >= 3 ? (size_t)wxlua_getuintegertype(L, 3) : 1);
    // size_t pos = 0
    size_t pos = (argCount >= 2 ? (size_t)wxlua_getuintegertype(L, 2) : 0);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call InsertCols
    bool returns = (self->InsertCols(pos, numCols));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_InsertRows[] = { &wxluatype_wxGridTableBase, &wxluatype_TINTEGER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxGridTableBase_InsertRows(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_InsertRows[1] = {{ wxLua_wxGridTableBase_InsertRows, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxGridTableBase_InsertRows }};
//     virtual bool InsertRows(size_t pos = 0, size_t numRows = 1);
static int LUACALL wxLua_wxGridTableBase_InsertRows(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // size_t numRows = 1
    size_t numRows = (argCount >= 3 ? (size_t)wxlua_getuintegertype(L, 3) : 1);
    // size_t pos = 0
    size_t pos = (argCount >= 2 ? (size_t)wxlua_getuintegertype(L, 2) : 0);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call InsertRows
    bool returns = (self->InsertRows(pos, numRows));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_IsEmptyCell[] = { &wxluatype_wxGridTableBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridTableBase_IsEmptyCell(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_IsEmptyCell[1] = {{ wxLua_wxGridTableBase_IsEmptyCell, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridTableBase_IsEmptyCell }};
//     virtual bool IsEmptyCell(int row, int col);
static int LUACALL wxLua_wxGridTableBase_IsEmptyCell(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call IsEmptyCell
    bool returns = (self->IsEmptyCell(row, col));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_SetAttr[] = { &wxluatype_wxGridTableBase, &wxluatype_wxGridCellAttr, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridTableBase_SetAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_SetAttr[1] = {{ wxLua_wxGridTableBase_SetAttr, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGridTableBase_SetAttr }};
//     void SetAttr(%IncRef wxGridCellAttr* attr, int row, int col);
static int LUACALL wxLua_wxGridTableBase_SetAttr(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 4);
    // int row
    int row = (int)wxlua_getnumbertype(L, 3);
    // wxGridCellAttr attr
    wxGridCellAttr * attr = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridCellAttr);
    // This param will have DecRef() called on it so we IncRef() it to not have to worry about the Lua gc
    attr->IncRef();
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call SetAttr
    self->SetAttr(attr, row, col);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_SetAttrProvider[] = { &wxluatype_wxGridTableBase, &wxluatype_wxGridCellAttrProvider, NULL };
static int LUACALL wxLua_wxGridTableBase_SetAttrProvider(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_SetAttrProvider[1] = {{ wxLua_wxGridTableBase_SetAttrProvider, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridTableBase_SetAttrProvider }};
//     void SetAttrProvider(wxGridCellAttrProvider *attrProvider);
static int LUACALL wxLua_wxGridTableBase_SetAttrProvider(lua_State *L)
{
    // wxGridCellAttrProvider attrProvider
    wxGridCellAttrProvider * attrProvider = (wxGridCellAttrProvider *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridCellAttrProvider);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call SetAttrProvider
    self->SetAttrProvider(attrProvider);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_SetColAttr[] = { &wxluatype_wxGridTableBase, &wxluatype_wxGridCellAttr, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridTableBase_SetColAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_SetColAttr[1] = {{ wxLua_wxGridTableBase_SetColAttr, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridTableBase_SetColAttr }};
//     void SetColAttr(%IncRef wxGridCellAttr *attr, int col);
static int LUACALL wxLua_wxGridTableBase_SetColAttr(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // wxGridCellAttr attr
    wxGridCellAttr * attr = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridCellAttr);
    // This param will have DecRef() called on it so we IncRef() it to not have to worry about the Lua gc
    attr->IncRef();
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call SetColAttr
    self->SetColAttr(attr, col);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_SetColLabelValue[] = { &wxluatype_wxGridTableBase, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGridTableBase_SetColLabelValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_SetColLabelValue[1] = {{ wxLua_wxGridTableBase_SetColLabelValue, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridTableBase_SetColLabelValue }};
//     virtual void SetColLabelValue(int col, const wxString& value);
static int LUACALL wxLua_wxGridTableBase_SetColLabelValue(lua_State *L)
{
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 3);
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call SetColLabelValue
    self->SetColLabelValue(col, value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_SetRowAttr[] = { &wxluatype_wxGridTableBase, &wxluatype_wxGridCellAttr, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridTableBase_SetRowAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_SetRowAttr[1] = {{ wxLua_wxGridTableBase_SetRowAttr, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridTableBase_SetRowAttr }};
//     void SetRowAttr(%IncRef wxGridCellAttr *attr, int row);
static int LUACALL wxLua_wxGridTableBase_SetRowAttr(lua_State *L)
{
    // int row
    int row = (int)wxlua_getnumbertype(L, 3);
    // wxGridCellAttr attr
    wxGridCellAttr * attr = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridCellAttr);
    // This param will have DecRef() called on it so we IncRef() it to not have to worry about the Lua gc
    attr->IncRef();
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call SetRowAttr
    self->SetRowAttr(attr, row);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_SetRowLabelValue[] = { &wxluatype_wxGridTableBase, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGridTableBase_SetRowLabelValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_SetRowLabelValue[1] = {{ wxLua_wxGridTableBase_SetRowLabelValue, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridTableBase_SetRowLabelValue }};
//     virtual void SetRowLabelValue(int row, const wxString& value);
static int LUACALL wxLua_wxGridTableBase_SetRowLabelValue(lua_State *L)
{
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call SetRowLabelValue
    self->SetRowLabelValue(row, value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_SetValue[] = { &wxluatype_wxGridTableBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGridTableBase_SetValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_SetValue[1] = {{ wxLua_wxGridTableBase_SetValue, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGridTableBase_SetValue }};
//     virtual void SetValue(int row, int col, const wxString& value);
static int LUACALL wxLua_wxGridTableBase_SetValue(lua_State *L)
{
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 4);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call SetValue
    self->SetValue(row, col, value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_SetValueAsBool[] = { &wxluatype_wxGridTableBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGridTableBase_SetValueAsBool(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_SetValueAsBool[1] = {{ wxLua_wxGridTableBase_SetValueAsBool, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGridTableBase_SetValueAsBool }};
//     virtual void SetValueAsBool(int row, int col, bool value);
static int LUACALL wxLua_wxGridTableBase_SetValueAsBool(lua_State *L)
{
    // bool value
    bool value = wxlua_getbooleantype(L, 4);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call SetValueAsBool
    self->SetValueAsBool(row, col, value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_SetValueAsDouble[] = { &wxluatype_wxGridTableBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridTableBase_SetValueAsDouble(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_SetValueAsDouble[1] = {{ wxLua_wxGridTableBase_SetValueAsDouble, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGridTableBase_SetValueAsDouble }};
//     virtual void SetValueAsDouble(int row, int col, double value);
static int LUACALL wxLua_wxGridTableBase_SetValueAsDouble(lua_State *L)
{
    // double value
    double value = (double)wxlua_getnumbertype(L, 4);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call SetValueAsDouble
    self->SetValueAsDouble(row, col, value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_SetValueAsLong[] = { &wxluatype_wxGridTableBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridTableBase_SetValueAsLong(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_SetValueAsLong[1] = {{ wxLua_wxGridTableBase_SetValueAsLong, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGridTableBase_SetValueAsLong }};
//     virtual void SetValueAsLong(int row, int col, long value);
static int LUACALL wxLua_wxGridTableBase_SetValueAsLong(lua_State *L)
{
    // long value
    long value = (long)wxlua_getnumbertype(L, 4);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call SetValueAsLong
    self->SetValueAsLong(row, col, value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableBase_SetView[] = { &wxluatype_wxGridTableBase, &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGridTableBase_SetView(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableBase_SetView[1] = {{ wxLua_wxGridTableBase_SetView, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridTableBase_SetView }};
//     virtual void SetView(wxGrid *grid);
static int LUACALL wxLua_wxGridTableBase_SetView(lua_State *L)
{
    // wxGrid grid
    wxGrid * grid = (wxGrid *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGrid);
    // get this
    wxGridTableBase * self = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call SetView
    self->SetView(grid);

    return 0;
}




void wxLua_wxGridTableBase_delete_function(void** p)
{
    wxGridTableBase* o = (wxGridTableBase*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridTableBase_methods[] = {
    { "AppendCols", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_AppendCols, 1, NULL },
    { "AppendRows", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_AppendRows, 1, NULL },
    { "CanGetValueAs", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_CanGetValueAs, 1, NULL },
    { "CanHaveAttributes", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_CanHaveAttributes, 1, NULL },
    { "CanSetValueAs", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_CanSetValueAs, 1, NULL },
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_Clear, 1, NULL },
    { "DeleteCols", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_DeleteCols, 1, NULL },
    { "DeleteRows", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_DeleteRows, 1, NULL },
    { "GetAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_GetAttr, 1, NULL },
    { "GetAttrProvider", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_GetAttrProvider, 1, NULL },
    { "GetColLabelValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_GetColLabelValue, 1, NULL },
    { "GetNumberCols", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_GetNumberCols, 1, NULL },
    { "GetNumberRows", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_GetNumberRows, 1, NULL },
    { "GetRowLabelValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_GetRowLabelValue, 1, NULL },
    { "GetTypeName", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_GetTypeName, 1, NULL },
    { "GetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_GetValue, 1, NULL },
    { "GetValueAsBool", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_GetValueAsBool, 1, NULL },
    { "GetValueAsDouble", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_GetValueAsDouble, 1, NULL },
    { "GetValueAsLong", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_GetValueAsLong, 1, NULL },
    { "GetView", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_GetView, 1, NULL },
    { "InsertCols", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_InsertCols, 1, NULL },
    { "InsertRows", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_InsertRows, 1, NULL },
    { "IsEmptyCell", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_IsEmptyCell, 1, NULL },
    { "SetAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_SetAttr, 1, NULL },
    { "SetAttrProvider", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_SetAttrProvider, 1, NULL },
    { "SetColAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_SetColAttr, 1, NULL },
    { "SetColLabelValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_SetColLabelValue, 1, NULL },
    { "SetRowAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_SetRowAttr, 1, NULL },
    { "SetRowLabelValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_SetRowLabelValue, 1, NULL },
    { "SetValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_SetValue, 1, NULL },
    { "SetValueAsBool", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_SetValueAsBool, 1, NULL },
    { "SetValueAsDouble", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_SetValueAsDouble, 1, NULL },
    { "SetValueAsLong", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_SetValueAsLong, 1, NULL },
    { "SetView", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableBase_SetView, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridTableBase_methodCount = sizeof(wxGridTableBase_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxLuaGridTableBase
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxLuaGridTableBase'
int wxluatype_wxLuaGridTableBase = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxLuaGridTableBase_delete[] = { &wxluatype_wxLuaGridTableBase, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLuaGridTableBase_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxLuaGridTableBase_delete }};

static int LUACALL wxLua_wxLuaGridTableBase_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxLuaGridTableBase_constructor[1] = {{ wxLua_wxLuaGridTableBase_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
// %override wxLua_wxLuaGridTableBase_constructor
//     wxLuaGridTableBase()
static int LUACALL wxLua_wxLuaGridTableBase_constructor(lua_State *L)
{
    wxLuaState wxlState(L);

    // call constructor
    wxLuaGridTableBase *returns = new wxLuaGridTableBase(wxlState);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxLuaGridTableBase);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxLuaGridTableBase);

    return 1;
}





void wxLua_wxLuaGridTableBase_delete_function(void** p)
{
    wxLuaGridTableBase* o = (wxLuaGridTableBase*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxLuaGridTableBase_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxLuaGridTableBase_delete, 1, NULL },
    { "wxLuaGridTableBase", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxLuaGridTableBase_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxLuaGridTableBase_methodCount = sizeof(wxLuaGridTableBase_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridStringTable
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridStringTable'
int wxluatype_wxGridStringTable = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridStringTable_delete[] = { &wxluatype_wxGridStringTable, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridStringTable_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridStringTable_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridStringTable_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridStringTable_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridStringTable_constructor[1] = {{ wxLua_wxGridStringTable_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxGridStringTable_constructor }};
//     wxGridStringTable(int numRows=0, int numCols=0);
static int LUACALL wxLua_wxGridStringTable_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int numCols = 0
    int numCols = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // int numRows = 0
    int numRows = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : 0);
    // call constructor
    wxGridStringTable* returns = new wxGridStringTable(numRows, numCols);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridStringTable);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridStringTable);

    return 1;
}




void wxLua_wxGridStringTable_delete_function(void** p)
{
    wxGridStringTable* o = (wxGridStringTable*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridStringTable_methods[] = {
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridStringTable_delete, 1, NULL },
    { "wxGridStringTable", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridStringTable_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridStringTable_methodCount = sizeof(wxGridStringTable_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridTableMessage
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridTableMessage'
int wxluatype_wxGridTableMessage = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableMessage_GetCommandInt[] = { &wxluatype_wxGridTableMessage, NULL };
static int LUACALL wxLua_wxGridTableMessage_GetCommandInt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableMessage_GetCommandInt[1] = {{ wxLua_wxGridTableMessage_GetCommandInt, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridTableMessage_GetCommandInt }};
//     int  GetCommandInt();
static int LUACALL wxLua_wxGridTableMessage_GetCommandInt(lua_State *L)
{
    // get this
    wxGridTableMessage * self = (wxGridTableMessage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableMessage);
    // call GetCommandInt
    int returns = (self->GetCommandInt());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableMessage_GetCommandInt2[] = { &wxluatype_wxGridTableMessage, NULL };
static int LUACALL wxLua_wxGridTableMessage_GetCommandInt2(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableMessage_GetCommandInt2[1] = {{ wxLua_wxGridTableMessage_GetCommandInt2, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridTableMessage_GetCommandInt2 }};
//     int  GetCommandInt2();
static int LUACALL wxLua_wxGridTableMessage_GetCommandInt2(lua_State *L)
{
    // get this
    wxGridTableMessage * self = (wxGridTableMessage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableMessage);
    // call GetCommandInt2
    int returns = (self->GetCommandInt2());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableMessage_GetId[] = { &wxluatype_wxGridTableMessage, NULL };
static int LUACALL wxLua_wxGridTableMessage_GetId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableMessage_GetId[1] = {{ wxLua_wxGridTableMessage_GetId, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridTableMessage_GetId }};
//     int  GetId();
static int LUACALL wxLua_wxGridTableMessage_GetId(lua_State *L)
{
    // get this
    wxGridTableMessage * self = (wxGridTableMessage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableMessage);
    // call GetId
    int returns = (self->GetId());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableMessage_GetTableObject[] = { &wxluatype_wxGridTableMessage, NULL };
static int LUACALL wxLua_wxGridTableMessage_GetTableObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableMessage_GetTableObject[1] = {{ wxLua_wxGridTableMessage_GetTableObject, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridTableMessage_GetTableObject }};
//     wxGridTableBase * GetTableObject() const;
static int LUACALL wxLua_wxGridTableMessage_GetTableObject(lua_State *L)
{
    // get this
    wxGridTableMessage * self = (wxGridTableMessage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableMessage);
    // call GetTableObject
    wxGridTableBase* returns = (wxGridTableBase*)self->GetTableObject();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridTableBase);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableMessage_SetCommandInt[] = { &wxluatype_wxGridTableMessage, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridTableMessage_SetCommandInt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableMessage_SetCommandInt[1] = {{ wxLua_wxGridTableMessage_SetCommandInt, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridTableMessage_SetCommandInt }};
//     void SetCommandInt(int comInt1);
static int LUACALL wxLua_wxGridTableMessage_SetCommandInt(lua_State *L)
{
    // int comInt1
    int comInt1 = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridTableMessage * self = (wxGridTableMessage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableMessage);
    // call SetCommandInt
    self->SetCommandInt(comInt1);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableMessage_SetCommandInt2[] = { &wxluatype_wxGridTableMessage, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridTableMessage_SetCommandInt2(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableMessage_SetCommandInt2[1] = {{ wxLua_wxGridTableMessage_SetCommandInt2, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridTableMessage_SetCommandInt2 }};
//     void SetCommandInt2(int comInt2);
static int LUACALL wxLua_wxGridTableMessage_SetCommandInt2(lua_State *L)
{
    // int comInt2
    int comInt2 = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridTableMessage * self = (wxGridTableMessage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableMessage);
    // call SetCommandInt2
    self->SetCommandInt2(comInt2);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableMessage_SetId[] = { &wxluatype_wxGridTableMessage, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridTableMessage_SetId(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableMessage_SetId[1] = {{ wxLua_wxGridTableMessage_SetId, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridTableMessage_SetId }};
//     void SetId(int id);
static int LUACALL wxLua_wxGridTableMessage_SetId(lua_State *L)
{
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridTableMessage * self = (wxGridTableMessage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableMessage);
    // call SetId
    self->SetId(id);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableMessage_SetTableObject[] = { &wxluatype_wxGridTableMessage, &wxluatype_wxGridTableBase, NULL };
static int LUACALL wxLua_wxGridTableMessage_SetTableObject(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableMessage_SetTableObject[1] = {{ wxLua_wxGridTableMessage_SetTableObject, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridTableMessage_SetTableObject }};
//     void SetTableObject(wxGridTableBase *table);
static int LUACALL wxLua_wxGridTableMessage_SetTableObject(lua_State *L)
{
    // wxGridTableBase table
    wxGridTableBase * table = (wxGridTableBase *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridTableBase);
    // get this
    wxGridTableMessage * self = (wxGridTableMessage *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableMessage);
    // call SetTableObject
    self->SetTableObject(table);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableMessage_delete[] = { &wxluatype_wxGridTableMessage, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableMessage_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridTableMessage_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridTableMessage_constructor[] = { &wxluatype_wxGridTableBase, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridTableMessage_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridTableMessage_constructor[1] = {{ wxLua_wxGridTableMessage_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 4, s_wxluatypeArray_wxLua_wxGridTableMessage_constructor }};
//     wxGridTableMessage(wxGridTableBase *table, int id, int comInt1 = -1, int comInt2 = -1);
static int LUACALL wxLua_wxGridTableMessage_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int comInt2 = -1
    int comInt2 = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // int comInt1 = -1
    int comInt1 = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : -1);
    // int id
    int id = (int)wxlua_getnumbertype(L, 2);
    // wxGridTableBase table
    wxGridTableBase * table = (wxGridTableBase *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridTableBase);
    // call constructor
    wxGridTableMessage* returns = new wxGridTableMessage(table, id, comInt1, comInt2);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridTableMessage);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridTableMessage);

    return 1;
}




void wxLua_wxGridTableMessage_delete_function(void** p)
{
    wxGridTableMessage* o = (wxGridTableMessage*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridTableMessage_methods[] = {
    { "GetCommandInt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableMessage_GetCommandInt, 1, NULL },
    { "GetCommandInt2", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableMessage_GetCommandInt2, 1, NULL },
    { "GetId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableMessage_GetId, 1, NULL },
    { "GetTableObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableMessage_GetTableObject, 1, NULL },
    { "SetCommandInt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableMessage_SetCommandInt, 1, NULL },
    { "SetCommandInt2", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableMessage_SetCommandInt2, 1, NULL },
    { "SetId", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableMessage_SetId, 1, NULL },
    { "SetTableObject", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridTableMessage_SetTableObject, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridTableMessage_delete, 1, NULL },
    { "wxGridTableMessage", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridTableMessage_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridTableMessage_methodCount = sizeof(wxGridTableMessage_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridCellCoords
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridCellCoords'
int wxluatype_wxGridCellCoords = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoords_GetCol[] = { &wxluatype_wxGridCellCoords, NULL };
static int LUACALL wxLua_wxGridCellCoords_GetCol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoords_GetCol[1] = {{ wxLua_wxGridCellCoords_GetCol, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellCoords_GetCol }};
//     int GetCol() const;
static int LUACALL wxLua_wxGridCellCoords_GetCol(lua_State *L)
{
    // get this
    wxGridCellCoords * self = (wxGridCellCoords *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellCoords);
    // call GetCol
    int returns = (self->GetCol());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoords_GetRow[] = { &wxluatype_wxGridCellCoords, NULL };
static int LUACALL wxLua_wxGridCellCoords_GetRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoords_GetRow[1] = {{ wxLua_wxGridCellCoords_GetRow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellCoords_GetRow }};
//     int GetRow() const;
static int LUACALL wxLua_wxGridCellCoords_GetRow(lua_State *L)
{
    // get this
    wxGridCellCoords * self = (wxGridCellCoords *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellCoords);
    // call GetRow
    int returns = (self->GetRow());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoords_Set[] = { &wxluatype_wxGridCellCoords, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellCoords_Set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoords_Set[1] = {{ wxLua_wxGridCellCoords_Set, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGridCellCoords_Set }};
//     void Set(int row, int col);
static int LUACALL wxLua_wxGridCellCoords_Set(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridCellCoords * self = (wxGridCellCoords *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellCoords);
    // call Set
    self->Set(row, col);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoords_SetCol[] = { &wxluatype_wxGridCellCoords, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellCoords_SetCol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoords_SetCol[1] = {{ wxLua_wxGridCellCoords_SetCol, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellCoords_SetCol }};
//     void SetCol(int n);
static int LUACALL wxLua_wxGridCellCoords_SetCol(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridCellCoords * self = (wxGridCellCoords *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellCoords);
    // call SetCol
    self->SetCol(n);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoords_SetRow[] = { &wxluatype_wxGridCellCoords, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellCoords_SetRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoords_SetRow[1] = {{ wxLua_wxGridCellCoords_SetRow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellCoords_SetRow }};
//     void SetRow(int n);
static int LUACALL wxLua_wxGridCellCoords_SetRow(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridCellCoords * self = (wxGridCellCoords *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellCoords);
    // call SetRow
    self->SetRow(n);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoords_delete[] = { &wxluatype_wxGridCellCoords, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoords_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridCellCoords_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoords_op_eq[] = { &wxluatype_wxGridCellCoords, &wxluatype_wxGridCellCoords, NULL };
static int LUACALL wxLua_wxGridCellCoords_op_eq(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoords_op_eq[1] = {{ wxLua_wxGridCellCoords_op_eq, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellCoords_op_eq }};
//     bool operator==(const wxGridCellCoords& other) const;
static int LUACALL wxLua_wxGridCellCoords_op_eq(lua_State *L)
{
    // const wxGridCellCoords other
    const wxGridCellCoords * other = (const wxGridCellCoords *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridCellCoords);
    // get this
    wxGridCellCoords * self = (wxGridCellCoords *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellCoords);
    // call op_eq
    bool returns = ((*self)==(*other));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoords_op_not[] = { &wxluatype_wxGridCellCoords, NULL };
static int LUACALL wxLua_wxGridCellCoords_op_not(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoords_op_not[1] = {{ wxLua_wxGridCellCoords_op_not, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellCoords_op_not }};
//     bool operator!() const;
static int LUACALL wxLua_wxGridCellCoords_op_not(lua_State *L)
{
    // get this
    wxGridCellCoords * self = (wxGridCellCoords *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellCoords);
    // call op_not
    bool returns = (!(*self));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoords_op_set[] = { &wxluatype_wxGridCellCoords, &wxluatype_wxGridCellCoords, NULL };
static int LUACALL wxLua_wxGridCellCoords_op_set(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoords_op_set[1] = {{ wxLua_wxGridCellCoords_op_set, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellCoords_op_set }};
//     wxGridCellCoords& operator=(const wxGridCellCoords& other);
static int LUACALL wxLua_wxGridCellCoords_op_set(lua_State *L)
{
    // const wxGridCellCoords other
    const wxGridCellCoords * other = (const wxGridCellCoords *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridCellCoords);
    // get this
    wxGridCellCoords * self = (wxGridCellCoords *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellCoords);
    // call op_set
    (*self)=(*other);
    wxGridCellCoords* returns = self;
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellCoords);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoords_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellCoords_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoords_constructor[1] = {{ wxLua_wxGridCellCoords_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 2, s_wxluatypeArray_wxLua_wxGridCellCoords_constructor }};
//     wxGridCellCoords(int r = -1, int c = -1);
static int LUACALL wxLua_wxGridCellCoords_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int c = -1
    int c = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : -1);
    // int r = -1
    int r = (argCount >= 1 ? (int)wxlua_getnumbertype(L, 1) : -1);
    // call constructor
    wxGridCellCoords* returns = new wxGridCellCoords(r, c);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellCoords);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellCoords);

    return 1;
}




void wxLua_wxGridCellCoords_delete_function(void** p)
{
    wxGridCellCoords* o = (wxGridCellCoords*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridCellCoords_methods[] = {
    { "GetCol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellCoords_GetCol, 1, NULL },
    { "GetRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellCoords_GetRow, 1, NULL },
    { "Set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellCoords_Set, 1, NULL },
    { "SetCol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellCoords_SetCol, 1, NULL },
    { "SetRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellCoords_SetRow, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridCellCoords_delete, 1, NULL },
    { "op_eq", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellCoords_op_eq, 1, NULL },
    { "op_not", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellCoords_op_not, 1, NULL },
    { "op_set", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellCoords_op_set, 1, NULL },
    { "wxGridCellCoords", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridCellCoords_constructor, 1, NULL },

    { 0, 0, 0, 0 },
};

int wxGridCellCoords_methodCount = sizeof(wxGridCellCoords_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridCellCoordsArray
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridCellCoordsArray'
int wxluatype_wxGridCellCoordsArray = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoordsArray_Add[] = { &wxluatype_wxGridCellCoordsArray, &wxluatype_wxGridCellCoords, NULL };
static int LUACALL wxLua_wxGridCellCoordsArray_Add(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoordsArray_Add[1] = {{ wxLua_wxGridCellCoordsArray_Add, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellCoordsArray_Add }};
//     void Add(const wxGridCellCoords& c);
static int LUACALL wxLua_wxGridCellCoordsArray_Add(lua_State *L)
{
    // const wxGridCellCoords c
    const wxGridCellCoords * c = (const wxGridCellCoords *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridCellCoords);
    // get this
    wxGridCellCoordsArray * self = (wxGridCellCoordsArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellCoordsArray);
    // call Add
    self->Add(*c);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoordsArray_Alloc[] = { &wxluatype_wxGridCellCoordsArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxGridCellCoordsArray_Alloc(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoordsArray_Alloc[1] = {{ wxLua_wxGridCellCoordsArray_Alloc, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellCoordsArray_Alloc }};
//     void Alloc(size_t count);
static int LUACALL wxLua_wxGridCellCoordsArray_Alloc(lua_State *L)
{
    // size_t count
    size_t count = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxGridCellCoordsArray * self = (wxGridCellCoordsArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellCoordsArray);
    // call Alloc
    self->Alloc(count);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoordsArray_Clear[] = { &wxluatype_wxGridCellCoordsArray, NULL };
static int LUACALL wxLua_wxGridCellCoordsArray_Clear(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoordsArray_Clear[1] = {{ wxLua_wxGridCellCoordsArray_Clear, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellCoordsArray_Clear }};
//     void Clear();
static int LUACALL wxLua_wxGridCellCoordsArray_Clear(lua_State *L)
{
    // get this
    wxGridCellCoordsArray * self = (wxGridCellCoordsArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellCoordsArray);
    // call Clear
    self->Clear();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoordsArray_GetCount[] = { &wxluatype_wxGridCellCoordsArray, NULL };
static int LUACALL wxLua_wxGridCellCoordsArray_GetCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoordsArray_GetCount[1] = {{ wxLua_wxGridCellCoordsArray_GetCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellCoordsArray_GetCount }};
//     int  GetCount() const;
static int LUACALL wxLua_wxGridCellCoordsArray_GetCount(lua_State *L)
{
    // get this
    wxGridCellCoordsArray * self = (wxGridCellCoordsArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellCoordsArray);
    // call GetCount
    int returns = (self->GetCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoordsArray_Insert[] = { &wxluatype_wxGridCellCoordsArray, &wxluatype_wxGridCellCoords, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellCoordsArray_Insert(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoordsArray_Insert[1] = {{ wxLua_wxGridCellCoordsArray_Insert, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxGridCellCoordsArray_Insert }};
//     void Insert(const wxGridCellCoords& c, int n, int copies = 1);
static int LUACALL wxLua_wxGridCellCoordsArray_Insert(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int copies = 1
    int copies = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : 1);
    // int n
    int n = (int)wxlua_getnumbertype(L, 3);
    // const wxGridCellCoords c
    const wxGridCellCoords * c = (const wxGridCellCoords *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridCellCoords);
    // get this
    wxGridCellCoordsArray * self = (wxGridCellCoordsArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellCoordsArray);
    // call Insert
    self->Insert(*c, n, copies);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoordsArray_IsEmpty[] = { &wxluatype_wxGridCellCoordsArray, NULL };
static int LUACALL wxLua_wxGridCellCoordsArray_IsEmpty(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoordsArray_IsEmpty[1] = {{ wxLua_wxGridCellCoordsArray_IsEmpty, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellCoordsArray_IsEmpty }};
//     bool IsEmpty() const;
static int LUACALL wxLua_wxGridCellCoordsArray_IsEmpty(lua_State *L)
{
    // get this
    wxGridCellCoordsArray * self = (wxGridCellCoordsArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellCoordsArray);
    // call IsEmpty
    bool returns = (self->IsEmpty());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoordsArray_Item[] = { &wxluatype_wxGridCellCoordsArray, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridCellCoordsArray_Item(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoordsArray_Item[1] = {{ wxLua_wxGridCellCoordsArray_Item, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellCoordsArray_Item }};
//     wxGridCellCoords Item(int n);
static int LUACALL wxLua_wxGridCellCoordsArray_Item(lua_State *L)
{
    // int n
    int n = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridCellCoordsArray * self = (wxGridCellCoordsArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellCoordsArray);
    // call Item
    // allocate a new object using the copy constructor
    wxGridCellCoords* returns = new wxGridCellCoords(self->Item(n));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellCoords);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellCoords);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoordsArray_RemoveAt[] = { &wxluatype_wxGridCellCoordsArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxGridCellCoordsArray_RemoveAt(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoordsArray_RemoveAt[1] = {{ wxLua_wxGridCellCoordsArray_RemoveAt, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellCoordsArray_RemoveAt }};
//     void RemoveAt(size_t index);
static int LUACALL wxLua_wxGridCellCoordsArray_RemoveAt(lua_State *L)
{
    // size_t index
    size_t index = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxGridCellCoordsArray * self = (wxGridCellCoordsArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellCoordsArray);
    // call RemoveAt
    self->RemoveAt(index);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoordsArray_Shrink[] = { &wxluatype_wxGridCellCoordsArray, NULL };
static int LUACALL wxLua_wxGridCellCoordsArray_Shrink(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoordsArray_Shrink[1] = {{ wxLua_wxGridCellCoordsArray_Shrink, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridCellCoordsArray_Shrink }};
//     void Shrink();
static int LUACALL wxLua_wxGridCellCoordsArray_Shrink(lua_State *L)
{
    // get this
    wxGridCellCoordsArray * self = (wxGridCellCoordsArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellCoordsArray);
    // call Shrink
    self->Shrink();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoordsArray_delete[] = { &wxluatype_wxGridCellCoordsArray, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoordsArray_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridCellCoordsArray_delete }};

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoordsArray_op_index[] = { &wxluatype_wxGridCellCoordsArray, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxGridCellCoordsArray_op_index(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoordsArray_op_index[1] = {{ wxLua_wxGridCellCoordsArray_op_index, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridCellCoordsArray_op_index }};
//     wxGridCellCoords operator[](size_t nIndex);
static int LUACALL wxLua_wxGridCellCoordsArray_op_index(lua_State *L)
{
    // size_t nIndex
    size_t nIndex = (size_t)wxlua_getuintegertype(L, 2);
    // get this
    wxGridCellCoordsArray * self = (wxGridCellCoordsArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellCoordsArray);
    // call op_index
    // allocate a new object using the copy constructor
    wxGridCellCoords* returns = new wxGridCellCoords((*self)[(nIndex)]);
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellCoords);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellCoords);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridCellCoordsArray_constructor1[] = { &wxluatype_wxGridCellCoordsArray, NULL };
static int LUACALL wxLua_wxGridCellCoordsArray_constructor1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoordsArray_constructor1[1] = {{ wxLua_wxGridCellCoordsArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxGridCellCoordsArray_constructor1 }};
//     wxGridCellCoordsArray(const wxGridCellCoordsArray& array);
static int LUACALL wxLua_wxGridCellCoordsArray_constructor1(lua_State *L)
{
    // const wxGridCellCoordsArray array
    const wxGridCellCoordsArray * array = (const wxGridCellCoordsArray *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridCellCoordsArray);
    // call constructor
    wxGridCellCoordsArray* returns = new wxGridCellCoordsArray(*array);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellCoordsArray);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellCoordsArray);

    return 1;
}

static int LUACALL wxLua_wxGridCellCoordsArray_constructor(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoordsArray_constructor[1] = {{ wxLua_wxGridCellCoordsArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None }};
//     wxGridCellCoordsArray();
static int LUACALL wxLua_wxGridCellCoordsArray_constructor(lua_State *L)
{
    // call constructor
    wxGridCellCoordsArray* returns = new wxGridCellCoordsArray();
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellCoordsArray);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellCoordsArray);

    return 1;
}




#if (wxLUA_USE_wxGrid && wxUSE_GRID)
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridCellCoordsArray_constructor_overload[] =
{
    { wxLua_wxGridCellCoordsArray_constructor1, WXLUAMETHOD_CONSTRUCTOR, 1, 1, s_wxluatypeArray_wxLua_wxGridCellCoordsArray_constructor1 },
    { wxLua_wxGridCellCoordsArray_constructor, WXLUAMETHOD_CONSTRUCTOR, 0, 0, g_wxluaargtypeArray_None },
};
static int s_wxluafunc_wxLua_wxGridCellCoordsArray_constructor_overload_count = sizeof(s_wxluafunc_wxLua_wxGridCellCoordsArray_constructor_overload)/sizeof(wxLuaBindCFunc);

#endif // (wxLUA_USE_wxGrid && wxUSE_GRID)

void wxLua_wxGridCellCoordsArray_delete_function(void** p)
{
    wxGridCellCoordsArray* o = (wxGridCellCoordsArray*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridCellCoordsArray_methods[] = {
    { "Add", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellCoordsArray_Add, 1, NULL },
    { "Alloc", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellCoordsArray_Alloc, 1, NULL },
    { "Clear", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellCoordsArray_Clear, 1, NULL },
    { "GetCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellCoordsArray_GetCount, 1, NULL },
    { "Insert", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellCoordsArray_Insert, 1, NULL },
    { "IsEmpty", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellCoordsArray_IsEmpty, 1, NULL },
    { "Item", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellCoordsArray_Item, 1, NULL },
    { "RemoveAt", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellCoordsArray_RemoveAt, 1, NULL },
    { "Shrink", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellCoordsArray_Shrink, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridCellCoordsArray_delete, 1, NULL },
    { "op_index", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridCellCoordsArray_op_index, 1, NULL },

#if (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "wxGridCellCoordsArray", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridCellCoordsArray_constructor_overload, s_wxluafunc_wxLua_wxGridCellCoordsArray_constructor_overload_count, 0 },
#endif // (wxLUA_USE_wxGrid && wxUSE_GRID)

    { 0, 0, 0, 0 },
};

int wxGridCellCoordsArray_methodCount = sizeof(wxGridCellCoordsArray_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGrid
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGrid'
int wxluatype_wxGrid = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_AppendCols[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_AppendCols(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_AppendCols[1] = {{ wxLua_wxGrid_AppendCols, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxGrid_AppendCols }};
//     bool    AppendCols(int numCols = 1, bool updateLabels=true);
static int LUACALL wxLua_wxGrid_AppendCols(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool updateLabels = true
    bool updateLabels = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // int numCols = 1
    int numCols = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 1);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call AppendCols
    bool returns = (self->AppendCols(numCols, updateLabels));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_AppendRows[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_AppendRows(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_AppendRows[1] = {{ wxLua_wxGrid_AppendRows, WXLUAMETHOD_METHOD, 1, 3, s_wxluatypeArray_wxLua_wxGrid_AppendRows }};
//     bool    AppendRows(int numRows = 1, bool updateLabels=true);
static int LUACALL wxLua_wxGrid_AppendRows(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool updateLabels = true
    bool updateLabels = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // int numRows = 1
    int numRows = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 1);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call AppendRows
    bool returns = (self->AppendRows(numRows, updateLabels));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_AutoSize[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_AutoSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_AutoSize[1] = {{ wxLua_wxGrid_AutoSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_AutoSize }};
//     void    AutoSize();
static int LUACALL wxLua_wxGrid_AutoSize(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call AutoSize
    self->AutoSize();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_AutoSizeColLabelSize[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_AutoSizeColLabelSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_AutoSizeColLabelSize[1] = {{ wxLua_wxGrid_AutoSizeColLabelSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_AutoSizeColLabelSize }};
//     void    AutoSizeColLabelSize(int col);
static int LUACALL wxLua_wxGrid_AutoSizeColLabelSize(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call AutoSizeColLabelSize
    self->AutoSizeColLabelSize(col);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_AutoSizeColumn[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_AutoSizeColumn(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_AutoSizeColumn[1] = {{ wxLua_wxGrid_AutoSizeColumn, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxGrid_AutoSizeColumn }};
//     void    AutoSizeColumn(int col, bool setAsMin = true);
static int LUACALL wxLua_wxGrid_AutoSizeColumn(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool setAsMin = true
    bool setAsMin = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call AutoSizeColumn
    self->AutoSizeColumn(col, setAsMin);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_AutoSizeColumns[] = { &wxluatype_wxGrid, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_AutoSizeColumns(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_AutoSizeColumns[1] = {{ wxLua_wxGrid_AutoSizeColumns, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxGrid_AutoSizeColumns }};
//     void    AutoSizeColumns(bool setAsMin = true);
static int LUACALL wxLua_wxGrid_AutoSizeColumns(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool setAsMin = true
    bool setAsMin = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call AutoSizeColumns
    self->AutoSizeColumns(setAsMin);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_AutoSizeRow[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_AutoSizeRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_AutoSizeRow[1] = {{ wxLua_wxGrid_AutoSizeRow, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxGrid_AutoSizeRow }};
//     void    AutoSizeRow(int row, bool setAsMin = true);
static int LUACALL wxLua_wxGrid_AutoSizeRow(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool setAsMin = true
    bool setAsMin = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : true);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call AutoSizeRow
    self->AutoSizeRow(row, setAsMin);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_AutoSizeRowLabelSize[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_AutoSizeRowLabelSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_AutoSizeRowLabelSize[1] = {{ wxLua_wxGrid_AutoSizeRowLabelSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_AutoSizeRowLabelSize }};
//     void    AutoSizeRowLabelSize(int row);
static int LUACALL wxLua_wxGrid_AutoSizeRowLabelSize(lua_State *L)
{
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call AutoSizeRowLabelSize
    self->AutoSizeRowLabelSize(row);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_AutoSizeRows[] = { &wxluatype_wxGrid, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_AutoSizeRows(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_AutoSizeRows[1] = {{ wxLua_wxGrid_AutoSizeRows, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxGrid_AutoSizeRows }};
//     void    AutoSizeRows(bool setAsMin = true);
static int LUACALL wxLua_wxGrid_AutoSizeRows(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool setAsMin = true
    bool setAsMin = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call AutoSizeRows
    self->AutoSizeRows(setAsMin);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_BeginBatch[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_BeginBatch(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_BeginBatch[1] = {{ wxLua_wxGrid_BeginBatch, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_BeginBatch }};
//     void    BeginBatch();
static int LUACALL wxLua_wxGrid_BeginBatch(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call BeginBatch
    self->BeginBatch();

    return 0;
}


#if (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_BlockToDeviceRect[] = { &wxluatype_wxGrid, &wxluatype_wxGridCellCoords, &wxluatype_wxGridCellCoords, NULL };
static int LUACALL wxLua_wxGrid_BlockToDeviceRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_BlockToDeviceRect[1] = {{ wxLua_wxGrid_BlockToDeviceRect, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_BlockToDeviceRect }};
//     wxRect  BlockToDeviceRect(const wxGridCellCoords& topLeft, const wxGridCellCoords& bottomRight);
static int LUACALL wxLua_wxGrid_BlockToDeviceRect(lua_State *L)
{
    // const wxGridCellCoords bottomRight
    const wxGridCellCoords * bottomRight = (const wxGridCellCoords *)wxluaT_getuserdatatype(L, 3, wxluatype_wxGridCellCoords);
    // const wxGridCellCoords topLeft
    const wxGridCellCoords * topLeft = (const wxGridCellCoords *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridCellCoords);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call BlockToDeviceRect
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->BlockToDeviceRect(*topLeft, *bottomRight));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRect);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

#endif // (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_CanDragCell[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_CanDragCell(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_CanDragCell[1] = {{ wxLua_wxGrid_CanDragCell, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_CanDragCell }};
//     bool    CanDragCell();
static int LUACALL wxLua_wxGrid_CanDragCell(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call CanDragCell
    bool returns = (self->CanDragCell());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(3,0,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_CanDragColSize1[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_CanDragColSize1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_CanDragColSize1[1] = {{ wxLua_wxGrid_CanDragColSize1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_CanDragColSize1 }};
//         bool CanDragColSize(int col);
static int LUACALL wxLua_wxGrid_CanDragColSize1(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call CanDragColSize
    bool returns = (self->CanDragColSize(col));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(3,0,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (!wxCHECK_VERSION(3,0,0) || (defined(WXWIN_COMPATIBILITY_2_8) && WXWIN_COMPATIBILITY_2_8)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_CanDragColSize[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_CanDragColSize(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_CanDragColSize[1] = {{ wxLua_wxGrid_CanDragColSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_CanDragColSize }};
//         bool CanDragColSize();
static int LUACALL wxLua_wxGrid_CanDragColSize(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call CanDragColSize
    bool returns = (self->CanDragColSize());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (!wxCHECK_VERSION(3,0,0) || (defined(WXWIN_COMPATIBILITY_2_8) && WXWIN_COMPATIBILITY_2_8)) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_CanDragGridSize[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_CanDragGridSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_CanDragGridSize[1] = {{ wxLua_wxGrid_CanDragGridSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_CanDragGridSize }};
//     bool    CanDragGridSize();
static int LUACALL wxLua_wxGrid_CanDragGridSize(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call CanDragGridSize
    bool returns = (self->CanDragGridSize());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxCHECK_VERSION(3,0,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_CanDragRowSize1[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_CanDragRowSize1(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_CanDragRowSize1[1] = {{ wxLua_wxGrid_CanDragRowSize1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_CanDragRowSize1 }};
//         bool CanDragRowSize(int row);
static int LUACALL wxLua_wxGrid_CanDragRowSize1(lua_State *L)
{
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call CanDragRowSize
    bool returns = (self->CanDragRowSize(row));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (wxCHECK_VERSION(3,0,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (!wxCHECK_VERSION(3,0,0) || (defined(WXWIN_COMPATIBILITY_2_8) && WXWIN_COMPATIBILITY_2_8)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_CanDragRowSize[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_CanDragRowSize(lua_State *L);
// static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_CanDragRowSize[1] = {{ wxLua_wxGrid_CanDragRowSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_CanDragRowSize }};
//         bool CanDragRowSize();
static int LUACALL wxLua_wxGrid_CanDragRowSize(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call CanDragRowSize
    bool returns = (self->CanDragRowSize());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

#endif // (!wxCHECK_VERSION(3,0,0) || (defined(WXWIN_COMPATIBILITY_2_8) && WXWIN_COMPATIBILITY_2_8)) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_CanEnableCellControl[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_CanEnableCellControl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_CanEnableCellControl[1] = {{ wxLua_wxGrid_CanEnableCellControl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_CanEnableCellControl }};
//     bool    CanEnableCellControl() const;
static int LUACALL wxLua_wxGrid_CanEnableCellControl(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call CanEnableCellControl
    bool returns = (self->CanEnableCellControl());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_CellToRect[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_CellToRect(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_CellToRect[1] = {{ wxLua_wxGrid_CellToRect, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_CellToRect }};
//     wxRect  CellToRect(int row, int col);
static int LUACALL wxLua_wxGrid_CellToRect(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call CellToRect
    // allocate a new object using the copy constructor
    wxRect* returns = new wxRect(self->CellToRect(row, col));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxRect);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxRect);

    return 1;
}

#endif // (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_ClearGrid[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_ClearGrid(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_ClearGrid[1] = {{ wxLua_wxGrid_ClearGrid, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_ClearGrid }};
//     void    ClearGrid();
static int LUACALL wxLua_wxGrid_ClearGrid(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call ClearGrid
    self->ClearGrid();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_ClearSelection[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_ClearSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_ClearSelection[1] = {{ wxLua_wxGrid_ClearSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_ClearSelection }};
//     void    ClearSelection();
static int LUACALL wxLua_wxGrid_ClearSelection(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call ClearSelection
    self->ClearSelection();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_CreateGrid[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxGrid_CreateGrid(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_CreateGrid[1] = {{ wxLua_wxGrid_CreateGrid, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxGrid_CreateGrid }};
//     bool    CreateGrid(int numRows, int numCols, wxGrid::wxGridSelectionModes selmode = wxGrid::wxGridSelectCells);
static int LUACALL wxLua_wxGrid_CreateGrid(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxGrid::wxGridSelectionModes selmode = wxGrid::wxGridSelectCells
    wxGrid::wxGridSelectionModes selmode = (argCount >= 4 ? (wxGrid::wxGridSelectionModes)wxlua_getenumtype(L, 4) : wxGrid::wxGridSelectCells);
    // int numCols
    int numCols = (int)wxlua_getnumbertype(L, 3);
    // int numRows
    int numRows = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call CreateGrid
    bool returns = (self->CreateGrid(numRows, numCols, selmode));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_DeleteCols[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_DeleteCols(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_DeleteCols[1] = {{ wxLua_wxGrid_DeleteCols, WXLUAMETHOD_METHOD, 1, 4, s_wxluatypeArray_wxLua_wxGrid_DeleteCols }};
//     bool    DeleteCols(int pos = 0, int numCols = 1, bool updateLabels=true);
static int LUACALL wxLua_wxGrid_DeleteCols(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool updateLabels = true
    bool updateLabels = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // int numCols = 1
    int numCols = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 1);
    // int pos = 0
    int pos = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call DeleteCols
    bool returns = (self->DeleteCols(pos, numCols, updateLabels));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_DeleteRows[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_DeleteRows(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_DeleteRows[1] = {{ wxLua_wxGrid_DeleteRows, WXLUAMETHOD_METHOD, 1, 4, s_wxluatypeArray_wxLua_wxGrid_DeleteRows }};
//     bool    DeleteRows(int pos = 0, int numRows = 1, bool updateLabels=true);
static int LUACALL wxLua_wxGrid_DeleteRows(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool updateLabels = true
    bool updateLabels = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // int numRows = 1
    int numRows = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 1);
    // int pos = 0
    int pos = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call DeleteRows
    bool returns = (self->DeleteRows(pos, numRows, updateLabels));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_DeselectCell[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_DeselectCell(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_DeselectCell[1] = {{ wxLua_wxGrid_DeselectCell, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_DeselectCell }};
//     void DeselectCell(int row, int col);
static int LUACALL wxLua_wxGrid_DeselectCell(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call DeselectCell
    self->DeselectCell(row, col);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_DeselectCol[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_DeselectCol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_DeselectCol[1] = {{ wxLua_wxGrid_DeselectCol, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_DeselectCol }};
//     void DeselectCol(int col);
static int LUACALL wxLua_wxGrid_DeselectCol(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call DeselectCol
    self->DeselectCol(col);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_DeselectRow[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_DeselectRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_DeselectRow[1] = {{ wxLua_wxGrid_DeselectRow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_DeselectRow }};
//     void DeselectRow(int row);
static int LUACALL wxLua_wxGrid_DeselectRow(lua_State *L)
{
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call DeselectRow
    self->DeselectRow(row);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_DisableCellEditControl[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_DisableCellEditControl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_DisableCellEditControl[1] = {{ wxLua_wxGrid_DisableCellEditControl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_DisableCellEditControl }};
//     void    DisableCellEditControl();
static int LUACALL wxLua_wxGrid_DisableCellEditControl(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call DisableCellEditControl
    self->DisableCellEditControl();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_DisableDragCell[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_DisableDragCell(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_DisableDragCell[1] = {{ wxLua_wxGrid_DisableDragCell, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_DisableDragCell }};
//     void    DisableDragCell();
static int LUACALL wxLua_wxGrid_DisableDragCell(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call DisableDragCell
    self->DisableDragCell();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_DisableDragColSize[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_DisableDragColSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_DisableDragColSize[1] = {{ wxLua_wxGrid_DisableDragColSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_DisableDragColSize }};
//     void    DisableDragColSize();
static int LUACALL wxLua_wxGrid_DisableDragColSize(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call DisableDragColSize
    self->DisableDragColSize();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_DisableDragGridSize[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_DisableDragGridSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_DisableDragGridSize[1] = {{ wxLua_wxGrid_DisableDragGridSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_DisableDragGridSize }};
//     void    DisableDragGridSize();
static int LUACALL wxLua_wxGrid_DisableDragGridSize(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call DisableDragGridSize
    self->DisableDragGridSize();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_DisableDragRowSize[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_DisableDragRowSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_DisableDragRowSize[1] = {{ wxLua_wxGrid_DisableDragRowSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_DisableDragRowSize }};
//     void    DisableDragRowSize();
static int LUACALL wxLua_wxGrid_DisableDragRowSize(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call DisableDragRowSize
    self->DisableDragRowSize();

    return 0;
}


#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_DrawTextRectangle[] = { &wxluatype_wxGrid, &wxluatype_wxDC, &wxluatype_TSTRING, &wxluatype_wxRect, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_DrawTextRectangle(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_DrawTextRectangle[1] = {{ wxLua_wxGrid_DrawTextRectangle, WXLUAMETHOD_METHOD, 4, 7, s_wxluatypeArray_wxLua_wxGrid_DrawTextRectangle }};
//     void DrawTextRectangle(wxDC& dc, const wxString&, const wxRect&, int horizontalAlignment = wxALIGN_LEFT, int verticalAlignment = wxALIGN_TOP, int textOrientation = wxHORIZONTAL);
static int LUACALL wxLua_wxGrid_DrawTextRectangle(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int textOrientation = wxHORIZONTAL
    int textOrientation = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : wxHORIZONTAL);
    // int verticalAlignment = wxALIGN_TOP
    int verticalAlignment = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : wxALIGN_TOP);
    // int horizontalAlignment = wxALIGN_LEFT
    int horizontalAlignment = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : wxALIGN_LEFT);
    // const wxRect arg3
    const wxRect * arg3 = (const wxRect *)wxluaT_getuserdatatype(L, 4, wxluatype_wxRect);
    // const wxString arg2
    const wxString arg2 = wxlua_getwxStringtype(L, 3);
    // wxDC dc
    wxDC * dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call DrawTextRectangle
    self->DrawTextRectangle(*dc, arg2, *arg3, horizontalAlignment, verticalAlignment, textOrientation);

    return 0;
}

#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_EnableCellEditControl[] = { &wxluatype_wxGrid, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_EnableCellEditControl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_EnableCellEditControl[1] = {{ wxLua_wxGrid_EnableCellEditControl, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxGrid_EnableCellEditControl }};
//     void    EnableCellEditControl(bool enable = true);
static int LUACALL wxLua_wxGrid_EnableCellEditControl(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool enable = true
    bool enable = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call EnableCellEditControl
    self->EnableCellEditControl(enable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_EnableDragCell[] = { &wxluatype_wxGrid, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_EnableDragCell(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_EnableDragCell[1] = {{ wxLua_wxGrid_EnableDragCell, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxGrid_EnableDragCell }};
//     void    EnableDragCell(bool enable = true);
static int LUACALL wxLua_wxGrid_EnableDragCell(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool enable = true
    bool enable = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call EnableDragCell
    self->EnableDragCell(enable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_EnableDragColSize[] = { &wxluatype_wxGrid, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_EnableDragColSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_EnableDragColSize[1] = {{ wxLua_wxGrid_EnableDragColSize, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxGrid_EnableDragColSize }};
//     void    EnableDragColSize(bool enable = true);
static int LUACALL wxLua_wxGrid_EnableDragColSize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool enable = true
    bool enable = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call EnableDragColSize
    self->EnableDragColSize(enable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_EnableDragGridSize[] = { &wxluatype_wxGrid, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_EnableDragGridSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_EnableDragGridSize[1] = {{ wxLua_wxGrid_EnableDragGridSize, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxGrid_EnableDragGridSize }};
//     void    EnableDragGridSize(bool enable = true);
static int LUACALL wxLua_wxGrid_EnableDragGridSize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool enable = true
    bool enable = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call EnableDragGridSize
    self->EnableDragGridSize(enable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_EnableDragRowSize[] = { &wxluatype_wxGrid, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_EnableDragRowSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_EnableDragRowSize[1] = {{ wxLua_wxGrid_EnableDragRowSize, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxGrid_EnableDragRowSize }};
//     void    EnableDragRowSize(bool enable = true);
static int LUACALL wxLua_wxGrid_EnableDragRowSize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool enable = true
    bool enable = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call EnableDragRowSize
    self->EnableDragRowSize(enable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_EnableEditing[] = { &wxluatype_wxGrid, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_EnableEditing(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_EnableEditing[1] = {{ wxLua_wxGrid_EnableEditing, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_EnableEditing }};
//     void    EnableEditing(bool edit);
static int LUACALL wxLua_wxGrid_EnableEditing(lua_State *L)
{
    // bool edit
    bool edit = wxlua_getbooleantype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call EnableEditing
    self->EnableEditing(edit);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_EnableGridLines[] = { &wxluatype_wxGrid, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_EnableGridLines(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_EnableGridLines[1] = {{ wxLua_wxGrid_EnableGridLines, WXLUAMETHOD_METHOD, 1, 2, s_wxluatypeArray_wxLua_wxGrid_EnableGridLines }};
//     void    EnableGridLines(bool enable = true);
static int LUACALL wxLua_wxGrid_EnableGridLines(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool enable = true
    bool enable = (argCount >= 2 ? wxlua_getbooleantype(L, 2) : true);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call EnableGridLines
    self->EnableGridLines(enable);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_EndBatch[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_EndBatch(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_EndBatch[1] = {{ wxLua_wxGrid_EndBatch, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_EndBatch }};
//     void    EndBatch();
static int LUACALL wxLua_wxGrid_EndBatch(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call EndBatch
    self->EndBatch();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_ForceRefresh[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_ForceRefresh(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_ForceRefresh[1] = {{ wxLua_wxGrid_ForceRefresh, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_ForceRefresh }};
//     void    ForceRefresh();
static int LUACALL wxLua_wxGrid_ForceRefresh(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call ForceRefresh
    self->ForceRefresh();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetBatchCount[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetBatchCount(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetBatchCount[1] = {{ wxLua_wxGrid_GetBatchCount, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetBatchCount }};
//     int     GetBatchCount();
static int LUACALL wxLua_wxGrid_GetBatchCount(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetBatchCount
    int returns = (self->GetBatchCount());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetCellAlignment[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_GetCellAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetCellAlignment[1] = {{ wxLua_wxGrid_GetCellAlignment, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_GetCellAlignment }};
// %override wxLua_wxGrid_GetCellAlignment
// void    GetCellAlignment( int row, int col, int *horiz, int *vert )
static int LUACALL wxLua_wxGrid_GetCellAlignment(lua_State *L)
{
    int vert;
    int horiz;
    // int col
    int col = (int)lua_tonumber(L, 3);
    // int row
    int row = (int)lua_tonumber(L, 2);
    // get this
    wxGrid *self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetCellAlignment
    self->GetCellAlignment(row, col, &horiz, &vert);
    // push results
    lua_pushinteger(L, horiz);
    lua_pushinteger(L, vert);
    // return the number of parameters
    return 2;
}



#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetCellBackgroundColour[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_GetCellBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetCellBackgroundColour[1] = {{ wxLua_wxGrid_GetCellBackgroundColour, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_GetCellBackgroundColour }};
//     wxColour GetCellBackgroundColour(int row, int col);
static int LUACALL wxLua_wxGrid_GetCellBackgroundColour(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetCellBackgroundColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetCellBackgroundColour(row, col));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetCellEditor[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_GetCellEditor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetCellEditor[1] = {{ wxLua_wxGrid_GetCellEditor, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_GetCellEditor }};
//     %gc wxGridCellEditor* GetCellEditor(int row, int col);
static int LUACALL wxLua_wxGrid_GetCellEditor(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetCellEditor
    wxGridCellEditor* returns = (wxGridCellEditor*)self->GetCellEditor(row, col);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns, wxluatype_wxGridCellEditor);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellEditor);

    return 1;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetCellFont[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_GetCellFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetCellFont[1] = {{ wxLua_wxGrid_GetCellFont, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_GetCellFont }};
//     wxFont   GetCellFont(int row, int col);
static int LUACALL wxLua_wxGrid_GetCellFont(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetCellFont
    // allocate a new object using the copy constructor
    wxFont* returns = new wxFont(self->GetCellFont(row, col));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxFont);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetCellHighlightColour[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetCellHighlightColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetCellHighlightColour[1] = {{ wxLua_wxGrid_GetCellHighlightColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetCellHighlightColour }};
//     wxColour GetCellHighlightColour();
static int LUACALL wxLua_wxGrid_GetCellHighlightColour(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetCellHighlightColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetCellHighlightColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetCellHighlightPenWidth[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetCellHighlightPenWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetCellHighlightPenWidth[1] = {{ wxLua_wxGrid_GetCellHighlightPenWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetCellHighlightPenWidth }};
//     int     GetCellHighlightPenWidth();
static int LUACALL wxLua_wxGrid_GetCellHighlightPenWidth(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetCellHighlightPenWidth
    int returns = (self->GetCellHighlightPenWidth());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetCellHighlightROPenWidth[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetCellHighlightROPenWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetCellHighlightROPenWidth[1] = {{ wxLua_wxGrid_GetCellHighlightROPenWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetCellHighlightROPenWidth }};
//     int     GetCellHighlightROPenWidth();
static int LUACALL wxLua_wxGrid_GetCellHighlightROPenWidth(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetCellHighlightROPenWidth
    int returns = (self->GetCellHighlightROPenWidth());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetCellOverflow[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_GetCellOverflow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetCellOverflow[1] = {{ wxLua_wxGrid_GetCellOverflow, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_GetCellOverflow }};
//     bool     GetCellOverflow(int row, int col);
static int LUACALL wxLua_wxGrid_GetCellOverflow(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetCellOverflow
    bool returns = (self->GetCellOverflow(row, col));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetCellRenderer[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_GetCellRenderer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetCellRenderer[1] = {{ wxLua_wxGrid_GetCellRenderer, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_GetCellRenderer }};
//     %gc wxGridCellRenderer* GetCellRenderer(int row, int col);
static int LUACALL wxLua_wxGrid_GetCellRenderer(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetCellRenderer
    wxGridCellRenderer* returns = (wxGridCellRenderer*)self->GetCellRenderer(row, col);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns, wxluatype_wxGridCellRenderer);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellRenderer);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetCellSize[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_GetCellSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetCellSize[1] = {{ wxLua_wxGrid_GetCellSize, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_GetCellSize }};
// %override wxLua_wxGrid_GetCellSize
// void     GetCellSize( int row, int col, int *num_rows, int *num_cols )
static int LUACALL wxLua_wxGrid_GetCellSize(lua_State *L)
{
    int num_rows;
    int num_cols;
    // int col
    int col = (int)lua_tonumber(L, 3);
    // int row
    int row = (int)lua_tonumber(L, 2);
    // get this
    wxGrid *self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetCellSize
    self->GetCellSize(row, col, &num_rows, &num_cols);
    // push results
    lua_pushinteger(L, num_rows);
    lua_pushinteger(L, num_cols);
    // return the number of parameters
    return 2;
}



#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetCellTextColour[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_GetCellTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetCellTextColour[1] = {{ wxLua_wxGrid_GetCellTextColour, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_GetCellTextColour }};
//     wxColour GetCellTextColour(int row, int col);
static int LUACALL wxLua_wxGrid_GetCellTextColour(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetCellTextColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetCellTextColour(row, col));
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetCellValue[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_GetCellValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetCellValue[1] = {{ wxLua_wxGrid_GetCellValue, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_GetCellValue }};
//     wxString GetCellValue(int row, int col);
static int LUACALL wxLua_wxGrid_GetCellValue(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetCellValue
    wxString returns = (self->GetCellValue(row, col));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetColLabelAlignment[] = { &wxluatype_wxGrid, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxGrid_GetColLabelAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetColLabelAlignment[1] = {{ wxLua_wxGrid_GetColLabelAlignment, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_GetColLabelAlignment }};
// %override wxLua_wxGrid_GetColLabelAlignment
// void    GetColLabelAlignment( int *horz, int *vert )
static int LUACALL wxLua_wxGrid_GetColLabelAlignment(lua_State *L)
{
    int vert;
    int horz;
    // get this
    wxGrid *self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetColLabelAlignment
    self->GetColLabelAlignment(&horz, &vert);
    // push results
    lua_pushinteger(L, horz);
    lua_pushinteger(L, vert);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetColLabelSize[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetColLabelSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetColLabelSize[1] = {{ wxLua_wxGrid_GetColLabelSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetColLabelSize }};
//     int     GetColLabelSize();
static int LUACALL wxLua_wxGrid_GetColLabelSize(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetColLabelSize
    int returns = (self->GetColLabelSize());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetColLabelTextOrientation[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetColLabelTextOrientation(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetColLabelTextOrientation[1] = {{ wxLua_wxGrid_GetColLabelTextOrientation, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetColLabelTextOrientation }};
//     int     GetColLabelTextOrientation();
static int LUACALL wxLua_wxGrid_GetColLabelTextOrientation(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetColLabelTextOrientation
    int returns = (self->GetColLabelTextOrientation());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetColLabelValue[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_GetColLabelValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetColLabelValue[1] = {{ wxLua_wxGrid_GetColLabelValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_GetColLabelValue }};
//     wxString GetColLabelValue(int col);
static int LUACALL wxLua_wxGrid_GetColLabelValue(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetColLabelValue
    wxString returns = (self->GetColLabelValue(col));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetColMinimalAcceptableWidth[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetColMinimalAcceptableWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetColMinimalAcceptableWidth[1] = {{ wxLua_wxGrid_GetColMinimalAcceptableWidth, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetColMinimalAcceptableWidth }};
//     int     GetColMinimalAcceptableWidth() const;
static int LUACALL wxLua_wxGrid_GetColMinimalAcceptableWidth(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetColMinimalAcceptableWidth
    int returns = (self->GetColMinimalAcceptableWidth());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetColSize[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_GetColSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetColSize[1] = {{ wxLua_wxGrid_GetColSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_GetColSize }};
//     int      GetColSize(int col);
static int LUACALL wxLua_wxGrid_GetColSize(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetColSize
    int returns = (self->GetColSize(col));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetDefaultCellAlignment[] = { &wxluatype_wxGrid, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxGrid_GetDefaultCellAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetDefaultCellAlignment[1] = {{ wxLua_wxGrid_GetDefaultCellAlignment, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_GetDefaultCellAlignment }};
// %override wxLua_wxGrid_GetDefaultCellAlignment
// void    GetDefaultCellAlignment( int *horiz, int *vert )
static int LUACALL wxLua_wxGrid_GetDefaultCellAlignment(lua_State *L)
{
    int vert;
    int horiz;
    // get this
    wxGrid *self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetDefaultCellAlignment
    self->GetDefaultCellAlignment(&horiz, &vert);
    // push results
    lua_pushinteger(L, horiz);
    lua_pushinteger(L, vert);
    // return the number of parameters
    return 2;
}



#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetDefaultCellBackgroundColour[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetDefaultCellBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetDefaultCellBackgroundColour[1] = {{ wxLua_wxGrid_GetDefaultCellBackgroundColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetDefaultCellBackgroundColour }};
//     wxColour GetDefaultCellBackgroundColour();
static int LUACALL wxLua_wxGrid_GetDefaultCellBackgroundColour(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetDefaultCellBackgroundColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetDefaultCellBackgroundColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetDefaultCellFont[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetDefaultCellFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetDefaultCellFont[1] = {{ wxLua_wxGrid_GetDefaultCellFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetDefaultCellFont }};
//     wxFont   GetDefaultCellFont();
static int LUACALL wxLua_wxGrid_GetDefaultCellFont(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetDefaultCellFont
    // allocate a new object using the copy constructor
    wxFont* returns = new wxFont(self->GetDefaultCellFont());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxFont);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetDefaultCellOverflow[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetDefaultCellOverflow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetDefaultCellOverflow[1] = {{ wxLua_wxGrid_GetDefaultCellOverflow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetDefaultCellOverflow }};
//     bool     GetDefaultCellOverflow();
static int LUACALL wxLua_wxGrid_GetDefaultCellOverflow(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetDefaultCellOverflow
    bool returns = (self->GetDefaultCellOverflow());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetDefaultCellTextColour[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetDefaultCellTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetDefaultCellTextColour[1] = {{ wxLua_wxGrid_GetDefaultCellTextColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetDefaultCellTextColour }};
//     wxColour GetDefaultCellTextColour();
static int LUACALL wxLua_wxGrid_GetDefaultCellTextColour(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetDefaultCellTextColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetDefaultCellTextColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetDefaultColLabelSize[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetDefaultColLabelSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetDefaultColLabelSize[1] = {{ wxLua_wxGrid_GetDefaultColLabelSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetDefaultColLabelSize }};
//     int     GetDefaultColLabelSize();
static int LUACALL wxLua_wxGrid_GetDefaultColLabelSize(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetDefaultColLabelSize
    int returns = (self->GetDefaultColLabelSize());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetDefaultColSize[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetDefaultColSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetDefaultColSize[1] = {{ wxLua_wxGrid_GetDefaultColSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetDefaultColSize }};
//     int      GetDefaultColSize();
static int LUACALL wxLua_wxGrid_GetDefaultColSize(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetDefaultColSize
    int returns = (self->GetDefaultColSize());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetDefaultEditor[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetDefaultEditor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetDefaultEditor[1] = {{ wxLua_wxGrid_GetDefaultEditor, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetDefaultEditor }};
//     %gc wxGridCellEditor* GetDefaultEditor() const;
static int LUACALL wxLua_wxGrid_GetDefaultEditor(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetDefaultEditor
    wxGridCellEditor* returns = (wxGridCellEditor*)self->GetDefaultEditor();
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns, wxluatype_wxGridCellEditor);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellEditor);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetDefaultEditorForCell[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_GetDefaultEditorForCell(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetDefaultEditorForCell[1] = {{ wxLua_wxGrid_GetDefaultEditorForCell, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_GetDefaultEditorForCell }};
//     %gc wxGridCellEditor* GetDefaultEditorForCell(int row, int col) const;
static int LUACALL wxLua_wxGrid_GetDefaultEditorForCell(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetDefaultEditorForCell
    wxGridCellEditor* returns = (wxGridCellEditor*)self->GetDefaultEditorForCell(row, col);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns, wxluatype_wxGridCellEditor);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellEditor);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetDefaultEditorForType[] = { &wxluatype_wxGrid, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGrid_GetDefaultEditorForType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetDefaultEditorForType[1] = {{ wxLua_wxGrid_GetDefaultEditorForType, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_GetDefaultEditorForType }};
//     %gc wxGridCellEditor* GetDefaultEditorForType(const wxString& typeName) const;
static int LUACALL wxLua_wxGrid_GetDefaultEditorForType(lua_State *L)
{
    // const wxString typeName
    const wxString typeName = wxlua_getwxStringtype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetDefaultEditorForType
    wxGridCellEditor* returns = (wxGridCellEditor*)self->GetDefaultEditorForType(typeName);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns, wxluatype_wxGridCellEditor);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellEditor);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetDefaultRenderer[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetDefaultRenderer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetDefaultRenderer[1] = {{ wxLua_wxGrid_GetDefaultRenderer, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetDefaultRenderer }};
//     %gc wxGridCellRenderer* GetDefaultRenderer() const;
static int LUACALL wxLua_wxGrid_GetDefaultRenderer(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetDefaultRenderer
    wxGridCellRenderer* returns = (wxGridCellRenderer*)self->GetDefaultRenderer();
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns, wxluatype_wxGridCellRenderer);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellRenderer);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetDefaultRendererForCell[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_GetDefaultRendererForCell(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetDefaultRendererForCell[1] = {{ wxLua_wxGrid_GetDefaultRendererForCell, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_GetDefaultRendererForCell }};
//     %gc wxGridCellRenderer* GetDefaultRendererForCell(int row, int col) const;
static int LUACALL wxLua_wxGrid_GetDefaultRendererForCell(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetDefaultRendererForCell
    wxGridCellRenderer* returns = (wxGridCellRenderer*)self->GetDefaultRendererForCell(row, col);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns, wxluatype_wxGridCellRenderer);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellRenderer);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetDefaultRendererForType[] = { &wxluatype_wxGrid, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGrid_GetDefaultRendererForType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetDefaultRendererForType[1] = {{ wxLua_wxGrid_GetDefaultRendererForType, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_GetDefaultRendererForType }};
//     %gc wxGridCellRenderer* GetDefaultRendererForType(const wxString& typeName) const;
static int LUACALL wxLua_wxGrid_GetDefaultRendererForType(lua_State *L)
{
    // const wxString typeName
    const wxString typeName = wxlua_getwxStringtype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetDefaultRendererForType
    wxGridCellRenderer* returns = (wxGridCellRenderer*)self->GetDefaultRendererForType(typeName);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns, wxluatype_wxGridCellRenderer);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellRenderer);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetDefaultRowLabelSize[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetDefaultRowLabelSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetDefaultRowLabelSize[1] = {{ wxLua_wxGrid_GetDefaultRowLabelSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetDefaultRowLabelSize }};
//     int     GetDefaultRowLabelSize();
static int LUACALL wxLua_wxGrid_GetDefaultRowLabelSize(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetDefaultRowLabelSize
    int returns = (self->GetDefaultRowLabelSize());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetDefaultRowSize[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetDefaultRowSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetDefaultRowSize[1] = {{ wxLua_wxGrid_GetDefaultRowSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetDefaultRowSize }};
//     int      GetDefaultRowSize();
static int LUACALL wxLua_wxGrid_GetDefaultRowSize(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetDefaultRowSize
    int returns = (self->GetDefaultRowSize());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetGridColLabelWindow[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetGridColLabelWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetGridColLabelWindow[1] = {{ wxLua_wxGrid_GetGridColLabelWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetGridColLabelWindow }};
//     wxWindow* GetGridColLabelWindow();
static int LUACALL wxLua_wxGrid_GetGridColLabelWindow(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetGridColLabelWindow
    wxWindow* returns = (wxWindow*)self->GetGridColLabelWindow();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetGridCornerLabelWindow[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetGridCornerLabelWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetGridCornerLabelWindow[1] = {{ wxLua_wxGrid_GetGridCornerLabelWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetGridCornerLabelWindow }};
//     wxWindow* GetGridCornerLabelWindow();
static int LUACALL wxLua_wxGrid_GetGridCornerLabelWindow(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetGridCornerLabelWindow
    wxWindow* returns = (wxWindow*)self->GetGridCornerLabelWindow();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetGridCursorCol[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetGridCursorCol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetGridCursorCol[1] = {{ wxLua_wxGrid_GetGridCursorCol, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetGridCursorCol }};
//     int     GetGridCursorCol();
static int LUACALL wxLua_wxGrid_GetGridCursorCol(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetGridCursorCol
    int returns = (self->GetGridCursorCol());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetGridCursorRow[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetGridCursorRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetGridCursorRow[1] = {{ wxLua_wxGrid_GetGridCursorRow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetGridCursorRow }};
//     int     GetGridCursorRow();
static int LUACALL wxLua_wxGrid_GetGridCursorRow(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetGridCursorRow
    int returns = (self->GetGridCursorRow());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetGridLineColour[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetGridLineColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetGridLineColour[1] = {{ wxLua_wxGrid_GetGridLineColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetGridLineColour }};
//     wxColour GetGridLineColour();
static int LUACALL wxLua_wxGrid_GetGridLineColour(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetGridLineColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetGridLineColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetGridRowLabelWindow[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetGridRowLabelWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetGridRowLabelWindow[1] = {{ wxLua_wxGrid_GetGridRowLabelWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetGridRowLabelWindow }};
//     wxWindow* GetGridRowLabelWindow();
static int LUACALL wxLua_wxGrid_GetGridRowLabelWindow(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetGridRowLabelWindow
    wxWindow* returns = (wxWindow*)self->GetGridRowLabelWindow();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetGridWindow[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetGridWindow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetGridWindow[1] = {{ wxLua_wxGrid_GetGridWindow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetGridWindow }};
//     wxWindow* GetGridWindow();
static int LUACALL wxLua_wxGrid_GetGridWindow(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetGridWindow
    wxWindow* returns = (wxWindow*)self->GetGridWindow();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxWindow);

    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetLabelBackgroundColour[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetLabelBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetLabelBackgroundColour[1] = {{ wxLua_wxGrid_GetLabelBackgroundColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetLabelBackgroundColour }};
//     wxColour GetLabelBackgroundColour();
static int LUACALL wxLua_wxGrid_GetLabelBackgroundColour(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetLabelBackgroundColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetLabelBackgroundColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetLabelFont[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetLabelFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetLabelFont[1] = {{ wxLua_wxGrid_GetLabelFont, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetLabelFont }};
//     wxFont  GetLabelFont();
static int LUACALL wxLua_wxGrid_GetLabelFont(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetLabelFont
    // allocate a new object using the copy constructor
    wxFont* returns = new wxFont(self->GetLabelFont());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxFont);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxFont);

    return 1;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetLabelTextColour[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetLabelTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetLabelTextColour[1] = {{ wxLua_wxGrid_GetLabelTextColour, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetLabelTextColour }};
//     wxColour GetLabelTextColour();
static int LUACALL wxLua_wxGrid_GetLabelTextColour(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetLabelTextColour
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetLabelTextColour());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetNumberCols[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetNumberCols(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetNumberCols[1] = {{ wxLua_wxGrid_GetNumberCols, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetNumberCols }};
//     int     GetNumberCols();
static int LUACALL wxLua_wxGrid_GetNumberCols(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetNumberCols
    int returns = (self->GetNumberCols());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetNumberRows[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetNumberRows(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetNumberRows[1] = {{ wxLua_wxGrid_GetNumberRows, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetNumberRows }};
//     int     GetNumberRows();
static int LUACALL wxLua_wxGrid_GetNumberRows(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetNumberRows
    int returns = (self->GetNumberRows());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetOrCreateCellAttr[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_GetOrCreateCellAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetOrCreateCellAttr[1] = {{ wxLua_wxGrid_GetOrCreateCellAttr, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_GetOrCreateCellAttr }};
//     %gc wxGridCellAttr *GetOrCreateCellAttr(int row, int col) const;
static int LUACALL wxLua_wxGrid_GetOrCreateCellAttr(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetOrCreateCellAttr
    wxGridCellAttr* returns = (wxGridCellAttr*)self->GetOrCreateCellAttr(row, col);
    if (!wxluaO_isgcobject(L, returns)) wxluaO_addgcobject(L, returns, wxluatype_wxGridCellAttr);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellAttr);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetRowLabelAlignment[] = { &wxluatype_wxGrid, &wxluatype_TLIGHTUSERDATA, &wxluatype_TLIGHTUSERDATA, NULL };
static int LUACALL wxLua_wxGrid_GetRowLabelAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetRowLabelAlignment[1] = {{ wxLua_wxGrid_GetRowLabelAlignment, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_GetRowLabelAlignment }};
// %override wxLua_wxGrid_GetRowLabelAlignment
// void    GetRowLabelAlignment( int *horz, int *vert )
static int LUACALL wxLua_wxGrid_GetRowLabelAlignment(lua_State *L)
{
    int vert;
    int horz;
    // get this
    wxGrid *self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetRowLabelAlignment
    self->GetRowLabelAlignment(&horz, &vert);
    // push results
    lua_pushinteger(L, horz);
    lua_pushinteger(L, vert);
    // return the number of parameters
    return 2;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetRowLabelSize[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetRowLabelSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetRowLabelSize[1] = {{ wxLua_wxGrid_GetRowLabelSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetRowLabelSize }};
//     int     GetRowLabelSize();
static int LUACALL wxLua_wxGrid_GetRowLabelSize(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetRowLabelSize
    int returns = (self->GetRowLabelSize());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetRowLabelValue[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_GetRowLabelValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetRowLabelValue[1] = {{ wxLua_wxGrid_GetRowLabelValue, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_GetRowLabelValue }};
//     wxString GetRowLabelValue(int row);
static int LUACALL wxLua_wxGrid_GetRowLabelValue(lua_State *L)
{
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetRowLabelValue
    wxString returns = (self->GetRowLabelValue(row));
    // push the result string
    wxlua_pushwxString(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetRowMinimalAcceptableHeight[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetRowMinimalAcceptableHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetRowMinimalAcceptableHeight[1] = {{ wxLua_wxGrid_GetRowMinimalAcceptableHeight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetRowMinimalAcceptableHeight }};
//     int     GetRowMinimalAcceptableHeight() const;
static int LUACALL wxLua_wxGrid_GetRowMinimalAcceptableHeight(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetRowMinimalAcceptableHeight
    int returns = (self->GetRowMinimalAcceptableHeight());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetRowSize[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_GetRowSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetRowSize[1] = {{ wxLua_wxGrid_GetRowSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_GetRowSize }};
//     int      GetRowSize(int row);
static int LUACALL wxLua_wxGrid_GetRowSize(lua_State *L)
{
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetRowSize
    int returns = (self->GetRowSize(row));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetSelectedCells[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetSelectedCells(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetSelectedCells[1] = {{ wxLua_wxGrid_GetSelectedCells, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetSelectedCells }};
//     wxGridCellCoordsArray GetSelectedCells() const;
static int LUACALL wxLua_wxGrid_GetSelectedCells(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetSelectedCells
    // allocate a new object using the copy constructor
    wxGridCellCoordsArray* returns = new wxGridCellCoordsArray(self->GetSelectedCells());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellCoordsArray);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellCoordsArray);

    return 1;
}


#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetSelectedCols[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetSelectedCols(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetSelectedCols[1] = {{ wxLua_wxGrid_GetSelectedCols, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetSelectedCols }};
//     wxArrayInt GetSelectedCols() const;
static int LUACALL wxLua_wxGrid_GetSelectedCols(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetSelectedCols
    // allocate a new object using the copy constructor
    wxArrayInt* returns = new wxArrayInt(self->GetSelectedCols());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxArrayInt);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayInt);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetSelectedRows[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetSelectedRows(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetSelectedRows[1] = {{ wxLua_wxGrid_GetSelectedRows, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetSelectedRows }};
//     wxArrayInt GetSelectedRows() const;
static int LUACALL wxLua_wxGrid_GetSelectedRows(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetSelectedRows
    // allocate a new object using the copy constructor
    wxArrayInt* returns = new wxArrayInt(self->GetSelectedRows());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxArrayInt);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxArrayInt);

    return 1;
}

#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetSelectionBackground[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetSelectionBackground(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetSelectionBackground[1] = {{ wxLua_wxGrid_GetSelectionBackground, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetSelectionBackground }};
//     wxColour GetSelectionBackground() const;
static int LUACALL wxLua_wxGrid_GetSelectionBackground(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetSelectionBackground
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetSelectionBackground());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetSelectionBlockBottomRight[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetSelectionBlockBottomRight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetSelectionBlockBottomRight[1] = {{ wxLua_wxGrid_GetSelectionBlockBottomRight, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetSelectionBlockBottomRight }};
//     wxGridCellCoordsArray GetSelectionBlockBottomRight() const;
static int LUACALL wxLua_wxGrid_GetSelectionBlockBottomRight(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetSelectionBlockBottomRight
    // allocate a new object using the copy constructor
    wxGridCellCoordsArray* returns = new wxGridCellCoordsArray(self->GetSelectionBlockBottomRight());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellCoordsArray);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellCoordsArray);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetSelectionBlockTopLeft[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetSelectionBlockTopLeft(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetSelectionBlockTopLeft[1] = {{ wxLua_wxGrid_GetSelectionBlockTopLeft, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetSelectionBlockTopLeft }};
//     wxGridCellCoordsArray GetSelectionBlockTopLeft() const;
static int LUACALL wxLua_wxGrid_GetSelectionBlockTopLeft(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetSelectionBlockTopLeft
    // allocate a new object using the copy constructor
    wxGridCellCoordsArray* returns = new wxGridCellCoordsArray(self->GetSelectionBlockTopLeft());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellCoordsArray);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellCoordsArray);

    return 1;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetSelectionForeground[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetSelectionForeground(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetSelectionForeground[1] = {{ wxLua_wxGrid_GetSelectionForeground, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetSelectionForeground }};
//     wxColour GetSelectionForeground() const;
static int LUACALL wxLua_wxGrid_GetSelectionForeground(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetSelectionForeground
    // allocate a new object using the copy constructor
    wxColour* returns = new wxColour(self->GetSelectionForeground());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxColour);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxColour);

    return 1;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetSelectionMode[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetSelectionMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetSelectionMode[1] = {{ wxLua_wxGrid_GetSelectionMode, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetSelectionMode }};
//     wxGrid::wxGridSelectionModes GetSelectionMode() const;
static int LUACALL wxLua_wxGrid_GetSelectionMode(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetSelectionMode
    wxGrid::wxGridSelectionModes returns = (self->GetSelectionMode());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetTable[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GetTable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetTable[1] = {{ wxLua_wxGrid_GetTable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GetTable }};
//     wxGridTableBase * GetTable() const;
static int LUACALL wxLua_wxGrid_GetTable(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetTable
    wxGridTableBase* returns = (wxGridTableBase*)self->GetTable();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridTableBase);

    return 1;
}


#if ((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GetTextBoxSize[] = { &wxluatype_wxGrid, &wxluatype_wxDC, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxGrid_GetTextBoxSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GetTextBoxSize[1] = {{ wxLua_wxGrid_GetTextBoxSize, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_GetTextBoxSize }};
// %override wxLua_wxGrid_GetTextBoxSize
// void    GetTextBoxSize(wxDC& dc, wxArrayString& lines, long * width, long * height)
static int LUACALL wxLua_wxGrid_GetTextBoxSize(lua_State *L)
{
    long height;
    long width;
    // wxArrayString& lines
    wxArrayString *lines = (wxArrayString *)wxluaT_getuserdatatype(L, 3, wxluatype_wxArrayString);
    // wxDC& dc
    wxDC *dc = (wxDC *)wxluaT_getuserdatatype(L, 2, wxluatype_wxDC);
    // get this
    wxGrid *self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GetTextBoxSize
    self->GetTextBoxSize(*dc, *lines, &width, &height);
    lua_pushinteger(L, width);
    lua_pushinteger(L, height);
    // return the number of parameters
    return 2;
}


#endif // ((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_GridLinesEnabled[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_GridLinesEnabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_GridLinesEnabled[1] = {{ wxLua_wxGrid_GridLinesEnabled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_GridLinesEnabled }};
//     bool    GridLinesEnabled();
static int LUACALL wxLua_wxGrid_GridLinesEnabled(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call GridLinesEnabled
    bool returns = (self->GridLinesEnabled());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_HideCellEditControl[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_HideCellEditControl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_HideCellEditControl[1] = {{ wxLua_wxGrid_HideCellEditControl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_HideCellEditControl }};
//     void    HideCellEditControl();
static int LUACALL wxLua_wxGrid_HideCellEditControl(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call HideCellEditControl
    self->HideCellEditControl();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_InsertCols[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_InsertCols(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_InsertCols[1] = {{ wxLua_wxGrid_InsertCols, WXLUAMETHOD_METHOD, 1, 4, s_wxluatypeArray_wxLua_wxGrid_InsertCols }};
//     bool    InsertCols(int pos = 0, int numCols = 1, bool updateLabels=true);
static int LUACALL wxLua_wxGrid_InsertCols(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool updateLabels = true
    bool updateLabels = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // int numCols = 1
    int numCols = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 1);
    // int pos = 0
    int pos = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call InsertCols
    bool returns = (self->InsertCols(pos, numCols, updateLabels));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_InsertRows[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_InsertRows(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_InsertRows[1] = {{ wxLua_wxGrid_InsertRows, WXLUAMETHOD_METHOD, 1, 4, s_wxluatypeArray_wxLua_wxGrid_InsertRows }};
//     bool    InsertRows(int pos = 0, int numRows = 1, bool updateLabels=true);
static int LUACALL wxLua_wxGrid_InsertRows(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool updateLabels = true
    bool updateLabels = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // int numRows = 1
    int numRows = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : 1);
    // int pos = 0
    int pos = (argCount >= 2 ? (int)wxlua_getnumbertype(L, 2) : 0);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call InsertRows
    bool returns = (self->InsertRows(pos, numRows, updateLabels));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_IsCellEditControlEnabled[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_IsCellEditControlEnabled(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_IsCellEditControlEnabled[1] = {{ wxLua_wxGrid_IsCellEditControlEnabled, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_IsCellEditControlEnabled }};
//     bool    IsCellEditControlEnabled() const;
static int LUACALL wxLua_wxGrid_IsCellEditControlEnabled(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call IsCellEditControlEnabled
    bool returns = (self->IsCellEditControlEnabled());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_IsCellEditControlShown[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_IsCellEditControlShown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_IsCellEditControlShown[1] = {{ wxLua_wxGrid_IsCellEditControlShown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_IsCellEditControlShown }};
//     bool    IsCellEditControlShown() const;
static int LUACALL wxLua_wxGrid_IsCellEditControlShown(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call IsCellEditControlShown
    bool returns = (self->IsCellEditControlShown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_IsCurrentCellReadOnly[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_IsCurrentCellReadOnly(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_IsCurrentCellReadOnly[1] = {{ wxLua_wxGrid_IsCurrentCellReadOnly, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_IsCurrentCellReadOnly }};
//     bool    IsCurrentCellReadOnly() const;
static int LUACALL wxLua_wxGrid_IsCurrentCellReadOnly(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call IsCurrentCellReadOnly
    bool returns = (self->IsCurrentCellReadOnly());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_IsEditable[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_IsEditable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_IsEditable[1] = {{ wxLua_wxGrid_IsEditable, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_IsEditable }};
//     bool    IsEditable();
static int LUACALL wxLua_wxGrid_IsEditable(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call IsEditable
    bool returns = (self->IsEditable());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_IsInSelection[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_IsInSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_IsInSelection[1] = {{ wxLua_wxGrid_IsInSelection, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_IsInSelection }};
//     bool    IsInSelection(int row, int col);
static int LUACALL wxLua_wxGrid_IsInSelection(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call IsInSelection
    bool returns = (self->IsInSelection(row, col));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_IsReadOnly[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_IsReadOnly(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_IsReadOnly[1] = {{ wxLua_wxGrid_IsReadOnly, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_IsReadOnly }};
//     bool    IsReadOnly(int row, int col) const;
static int LUACALL wxLua_wxGrid_IsReadOnly(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call IsReadOnly
    bool returns = (self->IsReadOnly(row, col));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_IsSelection[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_IsSelection(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_IsSelection[1] = {{ wxLua_wxGrid_IsSelection, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_IsSelection }};
//     bool    IsSelection();
static int LUACALL wxLua_wxGrid_IsSelection(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call IsSelection
    bool returns = (self->IsSelection());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_IsVisible[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_IsVisible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_IsVisible[1] = {{ wxLua_wxGrid_IsVisible, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxGrid_IsVisible }};
//     bool    IsVisible(int row, int col, bool wholeCellVisible = true);
static int LUACALL wxLua_wxGrid_IsVisible(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool wholeCellVisible = true
    bool wholeCellVisible = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call IsVisible
    bool returns = (self->IsVisible(row, col, wholeCellVisible));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_MakeCellVisible[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_MakeCellVisible(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_MakeCellVisible[1] = {{ wxLua_wxGrid_MakeCellVisible, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_MakeCellVisible }};
//     void    MakeCellVisible(int row, int col);
static int LUACALL wxLua_wxGrid_MakeCellVisible(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call MakeCellVisible
    self->MakeCellVisible(row, col);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_MoveCursorDown[] = { &wxluatype_wxGrid, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_MoveCursorDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_MoveCursorDown[1] = {{ wxLua_wxGrid_MoveCursorDown, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_MoveCursorDown }};
//     bool    MoveCursorDown(bool expandSelection);
static int LUACALL wxLua_wxGrid_MoveCursorDown(lua_State *L)
{
    // bool expandSelection
    bool expandSelection = wxlua_getbooleantype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call MoveCursorDown
    bool returns = (self->MoveCursorDown(expandSelection));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_MoveCursorDownBlock[] = { &wxluatype_wxGrid, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_MoveCursorDownBlock(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_MoveCursorDownBlock[1] = {{ wxLua_wxGrid_MoveCursorDownBlock, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_MoveCursorDownBlock }};
//     bool    MoveCursorDownBlock(bool expandSelection);
static int LUACALL wxLua_wxGrid_MoveCursorDownBlock(lua_State *L)
{
    // bool expandSelection
    bool expandSelection = wxlua_getbooleantype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call MoveCursorDownBlock
    bool returns = (self->MoveCursorDownBlock(expandSelection));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_MoveCursorLeft[] = { &wxluatype_wxGrid, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_MoveCursorLeft(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_MoveCursorLeft[1] = {{ wxLua_wxGrid_MoveCursorLeft, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_MoveCursorLeft }};
//     bool    MoveCursorLeft(bool expandSelection);
static int LUACALL wxLua_wxGrid_MoveCursorLeft(lua_State *L)
{
    // bool expandSelection
    bool expandSelection = wxlua_getbooleantype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call MoveCursorLeft
    bool returns = (self->MoveCursorLeft(expandSelection));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_MoveCursorLeftBlock[] = { &wxluatype_wxGrid, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_MoveCursorLeftBlock(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_MoveCursorLeftBlock[1] = {{ wxLua_wxGrid_MoveCursorLeftBlock, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_MoveCursorLeftBlock }};
//     bool    MoveCursorLeftBlock(bool expandSelection);
static int LUACALL wxLua_wxGrid_MoveCursorLeftBlock(lua_State *L)
{
    // bool expandSelection
    bool expandSelection = wxlua_getbooleantype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call MoveCursorLeftBlock
    bool returns = (self->MoveCursorLeftBlock(expandSelection));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_MoveCursorRight[] = { &wxluatype_wxGrid, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_MoveCursorRight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_MoveCursorRight[1] = {{ wxLua_wxGrid_MoveCursorRight, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_MoveCursorRight }};
//     bool    MoveCursorRight(bool expandSelection);
static int LUACALL wxLua_wxGrid_MoveCursorRight(lua_State *L)
{
    // bool expandSelection
    bool expandSelection = wxlua_getbooleantype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call MoveCursorRight
    bool returns = (self->MoveCursorRight(expandSelection));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_MoveCursorRightBlock[] = { &wxluatype_wxGrid, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_MoveCursorRightBlock(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_MoveCursorRightBlock[1] = {{ wxLua_wxGrid_MoveCursorRightBlock, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_MoveCursorRightBlock }};
//     bool    MoveCursorRightBlock(bool expandSelection);
static int LUACALL wxLua_wxGrid_MoveCursorRightBlock(lua_State *L)
{
    // bool expandSelection
    bool expandSelection = wxlua_getbooleantype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call MoveCursorRightBlock
    bool returns = (self->MoveCursorRightBlock(expandSelection));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_MoveCursorUp[] = { &wxluatype_wxGrid, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_MoveCursorUp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_MoveCursorUp[1] = {{ wxLua_wxGrid_MoveCursorUp, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_MoveCursorUp }};
//     bool    MoveCursorUp(bool expandSelection);
static int LUACALL wxLua_wxGrid_MoveCursorUp(lua_State *L)
{
    // bool expandSelection
    bool expandSelection = wxlua_getbooleantype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call MoveCursorUp
    bool returns = (self->MoveCursorUp(expandSelection));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_MoveCursorUpBlock[] = { &wxluatype_wxGrid, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_MoveCursorUpBlock(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_MoveCursorUpBlock[1] = {{ wxLua_wxGrid_MoveCursorUpBlock, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_MoveCursorUpBlock }};
//     bool    MoveCursorUpBlock(bool expandSelection);
static int LUACALL wxLua_wxGrid_MoveCursorUpBlock(lua_State *L)
{
    // bool expandSelection
    bool expandSelection = wxlua_getbooleantype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call MoveCursorUpBlock
    bool returns = (self->MoveCursorUpBlock(expandSelection));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_MovePageDown[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_MovePageDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_MovePageDown[1] = {{ wxLua_wxGrid_MovePageDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_MovePageDown }};
//     bool    MovePageDown();
static int LUACALL wxLua_wxGrid_MovePageDown(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call MovePageDown
    bool returns = (self->MovePageDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_MovePageUp[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_MovePageUp(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_MovePageUp[1] = {{ wxLua_wxGrid_MovePageUp, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_MovePageUp }};
//     bool    MovePageUp();
static int LUACALL wxLua_wxGrid_MovePageUp(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call MovePageUp
    bool returns = (self->MovePageUp());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_ProcessTableMessage[] = { &wxluatype_wxGrid, &wxluatype_wxGridTableMessage, NULL };
static int LUACALL wxLua_wxGrid_ProcessTableMessage(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_ProcessTableMessage[1] = {{ wxLua_wxGrid_ProcessTableMessage, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_ProcessTableMessage }};
//     bool ProcessTableMessage(wxGridTableMessage& msg);
static int LUACALL wxLua_wxGrid_ProcessTableMessage(lua_State *L)
{
    // wxGridTableMessage msg
    wxGridTableMessage * msg = (wxGridTableMessage *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridTableMessage);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call ProcessTableMessage
    bool returns = (self->ProcessTableMessage(*msg));
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_RegisterDataType[] = { &wxluatype_wxGrid, &wxluatype_TSTRING, &wxluatype_wxGridCellRenderer, &wxluatype_wxGridCellEditor, NULL };
static int LUACALL wxLua_wxGrid_RegisterDataType(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_RegisterDataType[1] = {{ wxLua_wxGrid_RegisterDataType, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGrid_RegisterDataType }};
//     void    RegisterDataType(const wxString& typeName, %IncRef wxGridCellRenderer* renderer, %IncRef wxGridCellEditor* editor);
static int LUACALL wxLua_wxGrid_RegisterDataType(lua_State *L)
{
    // wxGridCellEditor editor
    wxGridCellEditor * editor = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 4, wxluatype_wxGridCellEditor);
    // wxGridCellRenderer renderer
    wxGridCellRenderer * renderer = (wxGridCellRenderer *)wxluaT_getuserdatatype(L, 3, wxluatype_wxGridCellRenderer);
    // const wxString typeName
    const wxString typeName = wxlua_getwxStringtype(L, 2);
    // This param will have DecRef() called on it so we IncRef() it to not have to worry about the Lua gc
    renderer->IncRef();
    // This param will have DecRef() called on it so we IncRef() it to not have to worry about the Lua gc
    editor->IncRef();
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call RegisterDataType
    self->RegisterDataType(typeName, renderer, editor);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SaveEditControlValue[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_SaveEditControlValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SaveEditControlValue[1] = {{ wxLua_wxGrid_SaveEditControlValue, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_SaveEditControlValue }};
//     void    SaveEditControlValue();
static int LUACALL wxLua_wxGrid_SaveEditControlValue(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SaveEditControlValue
    self->SaveEditControlValue();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SelectAll[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_SelectAll(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SelectAll[1] = {{ wxLua_wxGrid_SelectAll, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_SelectAll }};
//     void    SelectAll();
static int LUACALL wxLua_wxGrid_SelectAll(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SelectAll
    self->SelectAll();

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SelectBlock[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_SelectBlock(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SelectBlock[1] = {{ wxLua_wxGrid_SelectBlock, WXLUAMETHOD_METHOD, 5, 6, s_wxluatypeArray_wxLua_wxGrid_SelectBlock }};
//     void    SelectBlock(int topRow, int leftCol, int bottomRow, int rightCol, bool addToSelected = false);
static int LUACALL wxLua_wxGrid_SelectBlock(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool addToSelected = false
    bool addToSelected = (argCount >= 6 ? wxlua_getbooleantype(L, 6) : false);
    // int rightCol
    int rightCol = (int)wxlua_getnumbertype(L, 5);
    // int bottomRow
    int bottomRow = (int)wxlua_getnumbertype(L, 4);
    // int leftCol
    int leftCol = (int)wxlua_getnumbertype(L, 3);
    // int topRow
    int topRow = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SelectBlock
    self->SelectBlock(topRow, leftCol, bottomRow, rightCol, addToSelected);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SelectCol[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_SelectCol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SelectCol[1] = {{ wxLua_wxGrid_SelectCol, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxGrid_SelectCol }};
//     void    SelectCol(int col, bool addToSelected = false);
static int LUACALL wxLua_wxGrid_SelectCol(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool addToSelected = false
    bool addToSelected = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SelectCol
    self->SelectCol(col, addToSelected);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SelectRow[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_SelectRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SelectRow[1] = {{ wxLua_wxGrid_SelectRow, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxGrid_SelectRow }};
//     void    SelectRow(int row, bool addToSelected = false);
static int LUACALL wxLua_wxGrid_SelectRow(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool addToSelected = false
    bool addToSelected = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SelectRow
    self->SelectRow(row, addToSelected);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetAttr[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGrid_SetAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetAttr[1] = {{ wxLua_wxGrid_SetAttr, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGrid_SetAttr }};
//     void    SetAttr(int row, int col, %IncRef wxGridCellAttr *attr);
static int LUACALL wxLua_wxGrid_SetAttr(lua_State *L)
{
    // wxGridCellAttr attr
    wxGridCellAttr * attr = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 4, wxluatype_wxGridCellAttr);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // This param will have DecRef() called on it so we IncRef() it to not have to worry about the Lua gc
    attr->IncRef();
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetAttr
    self->SetAttr(row, col, attr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetCellAlignment[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_SetCellAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetCellAlignment[1] = {{ wxLua_wxGrid_SetCellAlignment, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxGrid_SetCellAlignment }};
//     void    SetCellAlignment(int row, int col, int horiz, int vert);
static int LUACALL wxLua_wxGrid_SetCellAlignment(lua_State *L)
{
    // int vert
    int vert = (int)wxlua_getnumbertype(L, 5);
    // int horiz
    int horiz = (int)wxlua_getnumbertype(L, 4);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetCellAlignment
    self->SetCellAlignment(row, col, horiz, vert);

    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetCellBackgroundColour[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxGrid_SetCellBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetCellBackgroundColour[1] = {{ wxLua_wxGrid_SetCellBackgroundColour, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGrid_SetCellBackgroundColour }};
//     void    SetCellBackgroundColour(int row, int col, const wxColour& backColour);
static int LUACALL wxLua_wxGrid_SetCellBackgroundColour(lua_State *L)
{
    // const wxColour backColour
    const wxColour * backColour = (const wxColour *)wxluaT_getuserdatatype(L, 4, wxluatype_wxColour);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetCellBackgroundColour
    self->SetCellBackgroundColour(row, col, *backColour);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetCellEditor[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxGridCellEditor, NULL };
static int LUACALL wxLua_wxGrid_SetCellEditor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetCellEditor[1] = {{ wxLua_wxGrid_SetCellEditor, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGrid_SetCellEditor }};
//     void    SetCellEditor(int row, int col, %IncRef wxGridCellEditor *editor);
static int LUACALL wxLua_wxGrid_SetCellEditor(lua_State *L)
{
    // wxGridCellEditor editor
    wxGridCellEditor * editor = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 4, wxluatype_wxGridCellEditor);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // This param will have DecRef() called on it so we IncRef() it to not have to worry about the Lua gc
    editor->IncRef();
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetCellEditor
    self->SetCellEditor(row, col, editor);

    return 0;
}


#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetCellFont[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxGrid_SetCellFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetCellFont[1] = {{ wxLua_wxGrid_SetCellFont, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGrid_SetCellFont }};
//     void    SetCellFont(int row, int col, const wxFont& cellFont);
static int LUACALL wxLua_wxGrid_SetCellFont(lua_State *L)
{
    // const wxFont cellFont
    const wxFont * cellFont = (const wxFont *)wxluaT_getuserdatatype(L, 4, wxluatype_wxFont);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetCellFont
    self->SetCellFont(row, col, *cellFont);

    return 0;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetCellHighlightColour[] = { &wxluatype_wxGrid, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxGrid_SetCellHighlightColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetCellHighlightColour[1] = {{ wxLua_wxGrid_SetCellHighlightColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetCellHighlightColour }};
//     void    SetCellHighlightColour(const wxColour& highlightColour);
static int LUACALL wxLua_wxGrid_SetCellHighlightColour(lua_State *L)
{
    // const wxColour highlightColour
    const wxColour * highlightColour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetCellHighlightColour
    self->SetCellHighlightColour(*highlightColour);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetCellHighlightPenWidth[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_SetCellHighlightPenWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetCellHighlightPenWidth[1] = {{ wxLua_wxGrid_SetCellHighlightPenWidth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetCellHighlightPenWidth }};
//     void    SetCellHighlightPenWidth(int width);
static int LUACALL wxLua_wxGrid_SetCellHighlightPenWidth(lua_State *L)
{
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetCellHighlightPenWidth
    self->SetCellHighlightPenWidth(width);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetCellHighlightROPenWidth[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_SetCellHighlightROPenWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetCellHighlightROPenWidth[1] = {{ wxLua_wxGrid_SetCellHighlightROPenWidth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetCellHighlightROPenWidth }};
//     void    SetCellHighlightROPenWidth(int width);
static int LUACALL wxLua_wxGrid_SetCellHighlightROPenWidth(lua_State *L)
{
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetCellHighlightROPenWidth
    self->SetCellHighlightROPenWidth(width);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetCellOverflow[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_SetCellOverflow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetCellOverflow[1] = {{ wxLua_wxGrid_SetCellOverflow, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGrid_SetCellOverflow }};
//     void    SetCellOverflow(int row, int col, bool allow);
static int LUACALL wxLua_wxGrid_SetCellOverflow(lua_State *L)
{
    // bool allow
    bool allow = wxlua_getbooleantype(L, 4);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetCellOverflow
    self->SetCellOverflow(row, col, allow);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetCellRenderer[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxGridCellRenderer, NULL };
static int LUACALL wxLua_wxGrid_SetCellRenderer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetCellRenderer[1] = {{ wxLua_wxGrid_SetCellRenderer, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGrid_SetCellRenderer }};
//     void    SetCellRenderer(int row, int col, %IncRef wxGridCellRenderer *renderer);
static int LUACALL wxLua_wxGrid_SetCellRenderer(lua_State *L)
{
    // wxGridCellRenderer renderer
    wxGridCellRenderer * renderer = (wxGridCellRenderer *)wxluaT_getuserdatatype(L, 4, wxluatype_wxGridCellRenderer);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // This param will have DecRef() called on it so we IncRef() it to not have to worry about the Lua gc
    renderer->IncRef();
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetCellRenderer
    self->SetCellRenderer(row, col, renderer);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetCellSize[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_SetCellSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetCellSize[1] = {{ wxLua_wxGrid_SetCellSize, WXLUAMETHOD_METHOD, 5, 5, s_wxluatypeArray_wxLua_wxGrid_SetCellSize }};
//     void    SetCellSize(int row, int col, int num_rows, int num_cols);
static int LUACALL wxLua_wxGrid_SetCellSize(lua_State *L)
{
    // int num_cols
    int num_cols = (int)wxlua_getnumbertype(L, 5);
    // int num_rows
    int num_rows = (int)wxlua_getnumbertype(L, 4);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetCellSize
    self->SetCellSize(row, col, num_rows, num_cols);

    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetCellTextColour[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxGrid_SetCellTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetCellTextColour[1] = {{ wxLua_wxGrid_SetCellTextColour, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGrid_SetCellTextColour }};
//     void    SetCellTextColour(int row, int col, const wxColour& textColour);
static int LUACALL wxLua_wxGrid_SetCellTextColour(lua_State *L)
{
    // const wxColour textColour
    const wxColour * textColour = (const wxColour *)wxluaT_getuserdatatype(L, 4, wxluatype_wxColour);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetCellTextColour
    self->SetCellTextColour(row, col, *textColour);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetCellValue[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGrid_SetCellValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetCellValue[1] = {{ wxLua_wxGrid_SetCellValue, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGrid_SetCellValue }};
//     void SetCellValue(int row, int col, const wxString& s);
static int LUACALL wxLua_wxGrid_SetCellValue(lua_State *L)
{
    // const wxString s
    const wxString s = wxlua_getwxStringtype(L, 4);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetCellValue
    self->SetCellValue(row, col, s);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetColAttr[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGrid_SetColAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetColAttr[1] = {{ wxLua_wxGrid_SetColAttr, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_SetColAttr }};
//     void    SetColAttr(int col, %IncRef wxGridCellAttr *attr);
static int LUACALL wxLua_wxGrid_SetColAttr(lua_State *L)
{
    // wxGridCellAttr attr
    wxGridCellAttr * attr = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxGridCellAttr);
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // This param will have DecRef() called on it so we IncRef() it to not have to worry about the Lua gc
    attr->IncRef();
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetColAttr
    self->SetColAttr(col, attr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetColFormatBool[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_SetColFormatBool(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetColFormatBool[1] = {{ wxLua_wxGrid_SetColFormatBool, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetColFormatBool }};
//     void    SetColFormatBool(int col);
static int LUACALL wxLua_wxGrid_SetColFormatBool(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetColFormatBool
    self->SetColFormatBool(col);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetColFormatCustom[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGrid_SetColFormatCustom(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetColFormatCustom[1] = {{ wxLua_wxGrid_SetColFormatCustom, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_SetColFormatCustom }};
//     void    SetColFormatCustom(int col, const wxString& typeName);
static int LUACALL wxLua_wxGrid_SetColFormatCustom(lua_State *L)
{
    // const wxString typeName
    const wxString typeName = wxlua_getwxStringtype(L, 3);
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetColFormatCustom
    self->SetColFormatCustom(col, typeName);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetColFormatFloat[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_SetColFormatFloat(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetColFormatFloat[1] = {{ wxLua_wxGrid_SetColFormatFloat, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxGrid_SetColFormatFloat }};
//     void    SetColFormatFloat(int col, int width = -1, int precision = -1);
static int LUACALL wxLua_wxGrid_SetColFormatFloat(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // int precision = -1
    int precision = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // int width = -1
    int width = (argCount >= 3 ? (int)wxlua_getnumbertype(L, 3) : -1);
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetColFormatFloat
    self->SetColFormatFloat(col, width, precision);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetColFormatNumber[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_SetColFormatNumber(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetColFormatNumber[1] = {{ wxLua_wxGrid_SetColFormatNumber, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetColFormatNumber }};
//     void    SetColFormatNumber(int col);
static int LUACALL wxLua_wxGrid_SetColFormatNumber(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetColFormatNumber
    self->SetColFormatNumber(col);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetColLabelAlignment[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_SetColLabelAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetColLabelAlignment[1] = {{ wxLua_wxGrid_SetColLabelAlignment, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_SetColLabelAlignment }};
//     void    SetColLabelAlignment(int horiz, int vert);
static int LUACALL wxLua_wxGrid_SetColLabelAlignment(lua_State *L)
{
    // int vert
    int vert = (int)wxlua_getnumbertype(L, 3);
    // int horiz
    int horiz = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetColLabelAlignment
    self->SetColLabelAlignment(horiz, vert);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetColLabelSize[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_SetColLabelSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetColLabelSize[1] = {{ wxLua_wxGrid_SetColLabelSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetColLabelSize }};
//     void    SetColLabelSize(int height);
static int LUACALL wxLua_wxGrid_SetColLabelSize(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetColLabelSize
    self->SetColLabelSize(height);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetColLabelValue[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGrid_SetColLabelValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetColLabelValue[1] = {{ wxLua_wxGrid_SetColLabelValue, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_SetColLabelValue }};
//     void    SetColLabelValue(int col, const wxString& value);
static int LUACALL wxLua_wxGrid_SetColLabelValue(lua_State *L)
{
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 3);
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetColLabelValue
    self->SetColLabelValue(col, value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetColMinimalAcceptableWidth[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_SetColMinimalAcceptableWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetColMinimalAcceptableWidth[1] = {{ wxLua_wxGrid_SetColMinimalAcceptableWidth, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetColMinimalAcceptableWidth }};
//     void    SetColMinimalAcceptableWidth(int width);
static int LUACALL wxLua_wxGrid_SetColMinimalAcceptableWidth(lua_State *L)
{
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetColMinimalAcceptableWidth
    self->SetColMinimalAcceptableWidth(width);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetColMinimalWidth[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_SetColMinimalWidth(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetColMinimalWidth[1] = {{ wxLua_wxGrid_SetColMinimalWidth, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_SetColMinimalWidth }};
//     void    SetColMinimalWidth(int col, int width);
static int LUACALL wxLua_wxGrid_SetColMinimalWidth(lua_State *L)
{
    // int width
    int width = (int)wxlua_getnumbertype(L, 3);
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetColMinimalWidth
    self->SetColMinimalWidth(col, width);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetColSize[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_SetColSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetColSize[1] = {{ wxLua_wxGrid_SetColSize, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_SetColSize }};
//     void    SetColSize(int col, int width);
static int LUACALL wxLua_wxGrid_SetColSize(lua_State *L)
{
    // int width
    int width = (int)wxlua_getnumbertype(L, 3);
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetColSize
    self->SetColSize(col, width);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetDefaultCellAlignment[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_SetDefaultCellAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetDefaultCellAlignment[1] = {{ wxLua_wxGrid_SetDefaultCellAlignment, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_SetDefaultCellAlignment }};
//     void    SetDefaultCellAlignment(int horiz, int vert);
static int LUACALL wxLua_wxGrid_SetDefaultCellAlignment(lua_State *L)
{
    // int vert
    int vert = (int)wxlua_getnumbertype(L, 3);
    // int horiz
    int horiz = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetDefaultCellAlignment
    self->SetDefaultCellAlignment(horiz, vert);

    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetDefaultCellBackgroundColour[] = { &wxluatype_wxGrid, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxGrid_SetDefaultCellBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetDefaultCellBackgroundColour[1] = {{ wxLua_wxGrid_SetDefaultCellBackgroundColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetDefaultCellBackgroundColour }};
//     void    SetDefaultCellBackgroundColour(const wxColour& backColour);
static int LUACALL wxLua_wxGrid_SetDefaultCellBackgroundColour(lua_State *L)
{
    // const wxColour backColour
    const wxColour * backColour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetDefaultCellBackgroundColour
    self->SetDefaultCellBackgroundColour(*backColour);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetDefaultCellFont[] = { &wxluatype_wxGrid, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxGrid_SetDefaultCellFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetDefaultCellFont[1] = {{ wxLua_wxGrid_SetDefaultCellFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetDefaultCellFont }};
//     void    SetDefaultCellFont(const wxFont& cellFont);
static int LUACALL wxLua_wxGrid_SetDefaultCellFont(lua_State *L)
{
    // const wxFont cellFont
    const wxFont * cellFont = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetDefaultCellFont
    self->SetDefaultCellFont(*cellFont);

    return 0;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetDefaultCellOverflow[] = { &wxluatype_wxGrid, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_SetDefaultCellOverflow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetDefaultCellOverflow[1] = {{ wxLua_wxGrid_SetDefaultCellOverflow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetDefaultCellOverflow }};
//     void    SetDefaultCellOverflow(bool allow);
static int LUACALL wxLua_wxGrid_SetDefaultCellOverflow(lua_State *L)
{
    // bool allow
    bool allow = wxlua_getbooleantype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetDefaultCellOverflow
    self->SetDefaultCellOverflow(allow);

    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetDefaultCellTextColour[] = { &wxluatype_wxGrid, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxGrid_SetDefaultCellTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetDefaultCellTextColour[1] = {{ wxLua_wxGrid_SetDefaultCellTextColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetDefaultCellTextColour }};
//     void    SetDefaultCellTextColour(const wxColour& textColour);
static int LUACALL wxLua_wxGrid_SetDefaultCellTextColour(lua_State *L)
{
    // const wxColour textColour
    const wxColour * textColour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetDefaultCellTextColour
    self->SetDefaultCellTextColour(*textColour);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetDefaultColSize[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_SetDefaultColSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetDefaultColSize[1] = {{ wxLua_wxGrid_SetDefaultColSize, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxGrid_SetDefaultColSize }};
//     void    SetDefaultColSize(int width, bool resizeExistingCols = false);
static int LUACALL wxLua_wxGrid_SetDefaultColSize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool resizeExistingCols = false
    bool resizeExistingCols = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetDefaultColSize
    self->SetDefaultColSize(width, resizeExistingCols);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetDefaultEditor[] = { &wxluatype_wxGrid, &wxluatype_wxGridCellEditor, NULL };
static int LUACALL wxLua_wxGrid_SetDefaultEditor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetDefaultEditor[1] = {{ wxLua_wxGrid_SetDefaultEditor, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetDefaultEditor }};
//     void    SetDefaultEditor(%IncRef wxGridCellEditor *editor);
static int LUACALL wxLua_wxGrid_SetDefaultEditor(lua_State *L)
{
    // wxGridCellEditor editor
    wxGridCellEditor * editor = (wxGridCellEditor *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridCellEditor);
    // This param will have DecRef() called on it so we IncRef() it to not have to worry about the Lua gc
    editor->IncRef();
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetDefaultEditor
    self->SetDefaultEditor(editor);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetDefaultRenderer[] = { &wxluatype_wxGrid, &wxluatype_wxGridCellRenderer, NULL };
static int LUACALL wxLua_wxGrid_SetDefaultRenderer(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetDefaultRenderer[1] = {{ wxLua_wxGrid_SetDefaultRenderer, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetDefaultRenderer }};
//     void    SetDefaultRenderer(%IncRef wxGridCellRenderer *renderer);
static int LUACALL wxLua_wxGrid_SetDefaultRenderer(lua_State *L)
{
    // wxGridCellRenderer renderer
    wxGridCellRenderer * renderer = (wxGridCellRenderer *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridCellRenderer);
    // This param will have DecRef() called on it so we IncRef() it to not have to worry about the Lua gc
    renderer->IncRef();
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetDefaultRenderer
    self->SetDefaultRenderer(renderer);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetDefaultRowSize[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_SetDefaultRowSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetDefaultRowSize[1] = {{ wxLua_wxGrid_SetDefaultRowSize, WXLUAMETHOD_METHOD, 2, 3, s_wxluatypeArray_wxLua_wxGrid_SetDefaultRowSize }};
//     void    SetDefaultRowSize(int height, bool resizeExistingRows = false);
static int LUACALL wxLua_wxGrid_SetDefaultRowSize(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool resizeExistingRows = false
    bool resizeExistingRows = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // int height
    int height = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetDefaultRowSize
    self->SetDefaultRowSize(height, resizeExistingRows);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetGridCursor[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_SetGridCursor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetGridCursor[1] = {{ wxLua_wxGrid_SetGridCursor, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_SetGridCursor }};
//     void    SetGridCursor(int row, int col);
static int LUACALL wxLua_wxGrid_SetGridCursor(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetGridCursor
    self->SetGridCursor(row, col);

    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetGridLineColour[] = { &wxluatype_wxGrid, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxGrid_SetGridLineColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetGridLineColour[1] = {{ wxLua_wxGrid_SetGridLineColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetGridLineColour }};
//     void    SetGridLineColour(const wxColour& lineColour);
static int LUACALL wxLua_wxGrid_SetGridLineColour(lua_State *L)
{
    // const wxColour lineColour
    const wxColour * lineColour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetGridLineColour
    self->SetGridLineColour(*lineColour);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetLabelBackgroundColour[] = { &wxluatype_wxGrid, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxGrid_SetLabelBackgroundColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetLabelBackgroundColour[1] = {{ wxLua_wxGrid_SetLabelBackgroundColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetLabelBackgroundColour }};
//     void    SetLabelBackgroundColour(const wxColour& backColour);
static int LUACALL wxLua_wxGrid_SetLabelBackgroundColour(lua_State *L)
{
    // const wxColour backColour
    const wxColour * backColour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetLabelBackgroundColour
    self->SetLabelBackgroundColour(*backColour);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetLabelFont[] = { &wxluatype_wxGrid, &wxluatype_wxFont, NULL };
static int LUACALL wxLua_wxGrid_SetLabelFont(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetLabelFont[1] = {{ wxLua_wxGrid_SetLabelFont, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetLabelFont }};
//     void    SetLabelFont(const wxFont& labelFont);
static int LUACALL wxLua_wxGrid_SetLabelFont(lua_State *L)
{
    // const wxFont labelFont
    const wxFont * labelFont = (const wxFont *)wxluaT_getuserdatatype(L, 2, wxluatype_wxFont);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetLabelFont
    self->SetLabelFont(*labelFont);

    return 0;
}

#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetLabelTextColour[] = { &wxluatype_wxGrid, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxGrid_SetLabelTextColour(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetLabelTextColour[1] = {{ wxLua_wxGrid_SetLabelTextColour, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetLabelTextColour }};
//     void    SetLabelTextColour(const wxColour& textColour);
static int LUACALL wxLua_wxGrid_SetLabelTextColour(lua_State *L)
{
    // const wxColour textColour
    const wxColour * textColour = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetLabelTextColour
    self->SetLabelTextColour(*textColour);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetMargins[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_SetMargins(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetMargins[1] = {{ wxLua_wxGrid_SetMargins, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_SetMargins }};
//     void SetMargins(int extraWidth, int extraHeight);
static int LUACALL wxLua_wxGrid_SetMargins(lua_State *L)
{
    // int extraHeight
    int extraHeight = (int)wxlua_getnumbertype(L, 3);
    // int extraWidth
    int extraWidth = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetMargins
    self->SetMargins(extraWidth, extraHeight);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetReadOnly[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGrid_SetReadOnly(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetReadOnly[1] = {{ wxLua_wxGrid_SetReadOnly, WXLUAMETHOD_METHOD, 3, 4, s_wxluatypeArray_wxLua_wxGrid_SetReadOnly }};
//     void    SetReadOnly(int row, int col, bool isReadOnly = true);
static int LUACALL wxLua_wxGrid_SetReadOnly(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool isReadOnly = true
    bool isReadOnly = (argCount >= 4 ? wxlua_getbooleantype(L, 4) : true);
    // int col
    int col = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetReadOnly
    self->SetReadOnly(row, col, isReadOnly);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetRowAttr[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_wxGridCellAttr, NULL };
static int LUACALL wxLua_wxGrid_SetRowAttr(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetRowAttr[1] = {{ wxLua_wxGrid_SetRowAttr, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_SetRowAttr }};
//     void    SetRowAttr(int row, %IncRef wxGridCellAttr *attr);
static int LUACALL wxLua_wxGrid_SetRowAttr(lua_State *L)
{
    // wxGridCellAttr attr
    wxGridCellAttr * attr = (wxGridCellAttr *)wxluaT_getuserdatatype(L, 3, wxluatype_wxGridCellAttr);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // This param will have DecRef() called on it so we IncRef() it to not have to worry about the Lua gc
    attr->IncRef();
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetRowAttr
    self->SetRowAttr(row, attr);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetRowLabelAlignment[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_SetRowLabelAlignment(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetRowLabelAlignment[1] = {{ wxLua_wxGrid_SetRowLabelAlignment, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_SetRowLabelAlignment }};
//     void    SetRowLabelAlignment(int horiz, int vert);
static int LUACALL wxLua_wxGrid_SetRowLabelAlignment(lua_State *L)
{
    // int vert
    int vert = (int)wxlua_getnumbertype(L, 3);
    // int horiz
    int horiz = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetRowLabelAlignment
    self->SetRowLabelAlignment(horiz, vert);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetRowLabelSize[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_SetRowLabelSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetRowLabelSize[1] = {{ wxLua_wxGrid_SetRowLabelSize, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetRowLabelSize }};
//     void    SetRowLabelSize(int width);
static int LUACALL wxLua_wxGrid_SetRowLabelSize(lua_State *L)
{
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetRowLabelSize
    self->SetRowLabelSize(width);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetRowLabelValue[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGrid_SetRowLabelValue(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetRowLabelValue[1] = {{ wxLua_wxGrid_SetRowLabelValue, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_SetRowLabelValue }};
//     void    SetRowLabelValue(int row, const wxString& value);
static int LUACALL wxLua_wxGrid_SetRowLabelValue(lua_State *L)
{
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetRowLabelValue
    self->SetRowLabelValue(row, value);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetRowMinimalAcceptableHeight[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_SetRowMinimalAcceptableHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetRowMinimalAcceptableHeight[1] = {{ wxLua_wxGrid_SetRowMinimalAcceptableHeight, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetRowMinimalAcceptableHeight }};
//     void    SetRowMinimalAcceptableHeight(int width);
static int LUACALL wxLua_wxGrid_SetRowMinimalAcceptableHeight(lua_State *L)
{
    // int width
    int width = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetRowMinimalAcceptableHeight
    self->SetRowMinimalAcceptableHeight(width);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetRowMinimalHeight[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_SetRowMinimalHeight(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetRowMinimalHeight[1] = {{ wxLua_wxGrid_SetRowMinimalHeight, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_SetRowMinimalHeight }};
//     void    SetRowMinimalHeight(int row, int width);
static int LUACALL wxLua_wxGrid_SetRowMinimalHeight(lua_State *L)
{
    // int width
    int width = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetRowMinimalHeight
    self->SetRowMinimalHeight(row, width);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetRowSize[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_SetRowSize(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetRowSize[1] = {{ wxLua_wxGrid_SetRowSize, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_SetRowSize }};
//     void    SetRowSize(int row, int height);
static int LUACALL wxLua_wxGrid_SetRowSize(lua_State *L)
{
    // int height
    int height = (int)wxlua_getnumbertype(L, 3);
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetRowSize
    self->SetRowSize(row, height);

    return 0;
}


#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetSelectionBackground[] = { &wxluatype_wxGrid, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxGrid_SetSelectionBackground(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetSelectionBackground[1] = {{ wxLua_wxGrid_SetSelectionBackground, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetSelectionBackground }};
//     void    SetSelectionBackground(const wxColour& c);
static int LUACALL wxLua_wxGrid_SetSelectionBackground(lua_State *L)
{
    // const wxColour c
    const wxColour * c = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetSelectionBackground
    self->SetSelectionBackground(*c);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetSelectionForeground[] = { &wxluatype_wxGrid, &wxluatype_wxColour, NULL };
static int LUACALL wxLua_wxGrid_SetSelectionForeground(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetSelectionForeground[1] = {{ wxLua_wxGrid_SetSelectionForeground, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetSelectionForeground }};
//     void    SetSelectionForeground(const wxColour& c);
static int LUACALL wxLua_wxGrid_SetSelectionForeground(lua_State *L)
{
    // const wxColour c
    const wxColour * c = (const wxColour *)wxluaT_getuserdatatype(L, 2, wxluatype_wxColour);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetSelectionForeground
    self->SetSelectionForeground(*c);

    return 0;
}

#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetSelectionMode[] = { &wxluatype_wxGrid, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxGrid_SetSelectionMode(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetSelectionMode[1] = {{ wxLua_wxGrid_SetSelectionMode, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_SetSelectionMode }};
//     void    SetSelectionMode(wxGrid::wxGridSelectionModes selmode);
static int LUACALL wxLua_wxGrid_SetSelectionMode(lua_State *L)
{
    // wxGrid::wxGridSelectionModes selmode
    wxGrid::wxGridSelectionModes selmode = (wxGrid::wxGridSelectionModes)wxlua_getenumtype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetSelectionMode
    self->SetSelectionMode(selmode);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_SetTable[] = { &wxluatype_wxGrid, &wxluatype_wxGridTableBase, &wxluatype_TBOOLEAN, &wxluatype_TINTEGER, NULL };
static int LUACALL wxLua_wxGrid_SetTable(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_SetTable[1] = {{ wxLua_wxGrid_SetTable, WXLUAMETHOD_METHOD, 2, 4, s_wxluatypeArray_wxLua_wxGrid_SetTable }};
// %override wxLua_wxGrid_SetTable
// bool SetTable(wxGridTableBase *table, bool takeOwnership = false,
//                    wxGrid::wxGridSelectionModes selmode =
//                   wxGrid::wxGridSelectCells)
static int LUACALL wxLua_wxGrid_SetTable(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // wxGrid::wxGridSelectionModes selmode = wxGrid::wxGridSelectCells
    wxGrid::wxGridSelectionModes selmode = (argCount >= 4 ? (wxGrid::wxGridSelectionModes)wxlua_getenumtype(L, 4) : wxGrid::wxGridSelectCells);
    // bool takeOwnership = false
    bool takeOwnership = (argCount >= 3 ? wxlua_getbooleantype(L, 3) : false);
    // wxGridTableBase table
    wxGridTableBase * table = (wxGridTableBase *)wxluaT_getuserdatatype(L, 2, wxluatype_wxGridTableBase);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call SetTable
    bool returns = (self->SetTable(table, takeOwnership, selmode));

    if (returns && takeOwnership)
    {
        // The wxGrid is now responsible for deleting it
        if (wxluaO_isgcobject(L, table)) wxluaO_undeletegcobject(L, table);
    }

    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_ShowCellEditControl[] = { &wxluatype_wxGrid, NULL };
static int LUACALL wxLua_wxGrid_ShowCellEditControl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_ShowCellEditControl[1] = {{ wxLua_wxGrid_ShowCellEditControl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_ShowCellEditControl }};
//     void    ShowCellEditControl();
static int LUACALL wxLua_wxGrid_ShowCellEditControl(lua_State *L)
{
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call ShowCellEditControl
    self->ShowCellEditControl();

    return 0;
}


#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxGrid && wxUSE_GRID)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_StringToLines[] = { &wxluatype_wxGrid, &wxluatype_TSTRING, &wxluatype_wxArrayString, NULL };
static int LUACALL wxLua_wxGrid_StringToLines(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_StringToLines[1] = {{ wxLua_wxGrid_StringToLines, WXLUAMETHOD_METHOD, 3, 3, s_wxluatypeArray_wxLua_wxGrid_StringToLines }};
//     void StringToLines(const wxString& value, wxArrayString& lines);
static int LUACALL wxLua_wxGrid_StringToLines(lua_State *L)
{
    // wxArrayString lines
    wxArrayString * lines = (wxArrayString *)wxluaT_getuserdatatype(L, 3, wxluatype_wxArrayString);
    // const wxString value
    const wxString value = wxlua_getwxStringtype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call StringToLines
    self->StringToLines(value, *lines);

    return 0;
}

#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxGrid && wxUSE_GRID)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_XToCol[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_XToCol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_XToCol[1] = {{ wxLua_wxGrid_XToCol, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_XToCol }};
//     int     XToCol(int x);
static int LUACALL wxLua_wxGrid_XToCol(lua_State *L)
{
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call XToCol
    int returns = (self->XToCol(x));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_XToEdgeOfCol[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_XToEdgeOfCol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_XToEdgeOfCol[1] = {{ wxLua_wxGrid_XToEdgeOfCol, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_XToEdgeOfCol }};
//     int     XToEdgeOfCol(int x);
static int LUACALL wxLua_wxGrid_XToEdgeOfCol(lua_State *L)
{
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call XToEdgeOfCol
    int returns = (self->XToEdgeOfCol(x));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_XYToCell[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxGridCellCoords, NULL };
static int LUACALL wxLua_wxGrid_XYToCell(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_XYToCell[1] = {{ wxLua_wxGrid_XYToCell, WXLUAMETHOD_METHOD, 4, 4, s_wxluatypeArray_wxLua_wxGrid_XYToCell }};
//     void    XYToCell(int x, int y, wxGridCellCoords& coords);
static int LUACALL wxLua_wxGrid_XYToCell(lua_State *L)
{
    // wxGridCellCoords coords
    wxGridCellCoords * coords = (wxGridCellCoords *)wxluaT_getuserdatatype(L, 4, wxluatype_wxGridCellCoords);
    // int y
    int y = (int)wxlua_getnumbertype(L, 3);
    // int x
    int x = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call XYToCell
    self->XYToCell(x, y, *coords);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_YToEdgeOfRow[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_YToEdgeOfRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_YToEdgeOfRow[1] = {{ wxLua_wxGrid_YToEdgeOfRow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_YToEdgeOfRow }};
//     int     YToEdgeOfRow(int y);
static int LUACALL wxLua_wxGrid_YToEdgeOfRow(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call YToEdgeOfRow
    int returns = (self->YToEdgeOfRow(y));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_YToRow[] = { &wxluatype_wxGrid, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGrid_YToRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_YToRow[1] = {{ wxLua_wxGrid_YToRow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_YToRow }};
//     int     YToRow(int y);
static int LUACALL wxLua_wxGrid_YToRow(lua_State *L)
{
    // int y
    int y = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGrid * self = (wxGrid *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGrid);
    // call YToRow
    int returns = (self->YToRow(y));
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGrid_constructor[] = { &wxluatype_wxWindow, &wxluatype_TNUMBER, &wxluatype_wxPoint, &wxluatype_wxSize, &wxluatype_TNUMBER, &wxluatype_TSTRING, NULL };
static int LUACALL wxLua_wxGrid_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_constructor[1] = {{ wxLua_wxGrid_constructor, WXLUAMETHOD_CONSTRUCTOR, 2, 6, s_wxluatypeArray_wxLua_wxGrid_constructor }};
//     wxGrid(wxWindow* parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = wxWANTS_CHARS, const wxString &name = "wxGrid");
static int LUACALL wxLua_wxGrid_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // const wxString name = "wxGrid"
    const wxString name = (argCount >= 6 ? wxlua_getwxStringtype(L, 6) : wxString(wxT("wxGrid")));
    // long style = wxWANTS_CHARS
    long style = (argCount >= 5 ? (long)wxlua_getnumbertype(L, 5) : wxWANTS_CHARS);
    // const wxSize size = wxDefaultSize
    const wxSize * size = (argCount >= 4 ? (const wxSize *)wxluaT_getuserdatatype(L, 4, wxluatype_wxSize) : &wxDefaultSize);
    // const wxPoint pos = wxDefaultPosition
    const wxPoint * pos = (argCount >= 3 ? (const wxPoint *)wxluaT_getuserdatatype(L, 3, wxluatype_wxPoint) : &wxDefaultPosition);
    // wxWindowID id
    wxWindowID id = (wxWindowID)wxlua_getnumbertype(L, 2);
    // wxWindow parent
    wxWindow * parent = (wxWindow *)wxluaT_getuserdatatype(L, 1, wxluatype_wxWindow);
    // call constructor
    wxGrid* returns = new wxGrid(parent, id, *pos, *size, style, name);
    // add to tracked window list, it will check validity
    wxluaW_addtrackedwindow(L, returns);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGrid);

    return 1;
}

#endif // (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)



#if ((wxCHECK_VERSION(3,0,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID))||((!wxCHECK_VERSION(3,0,0) || (defined(WXWIN_COMPATIBILITY_2_8) && WXWIN_COMPATIBILITY_2_8)) && (wxLUA_USE_wxGrid && wxUSE_GRID))
// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_CanDragColSize_overload[] =
{

#if (wxCHECK_VERSION(3,0,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { wxLua_wxGrid_CanDragColSize1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_CanDragColSize1 },
#endif // (wxCHECK_VERSION(3,0,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (!wxCHECK_VERSION(3,0,0) || (defined(WXWIN_COMPATIBILITY_2_8) && WXWIN_COMPATIBILITY_2_8)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { wxLua_wxGrid_CanDragColSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_CanDragColSize },
#endif // (!wxCHECK_VERSION(3,0,0) || (defined(WXWIN_COMPATIBILITY_2_8) && WXWIN_COMPATIBILITY_2_8)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
};
static int s_wxluafunc_wxLua_wxGrid_CanDragColSize_overload_count = sizeof(s_wxluafunc_wxLua_wxGrid_CanDragColSize_overload)/sizeof(wxLuaBindCFunc);

// function overload table
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGrid_CanDragRowSize_overload[] =
{

#if (wxCHECK_VERSION(3,0,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { wxLua_wxGrid_CanDragRowSize1, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGrid_CanDragRowSize1 },
#endif // (wxCHECK_VERSION(3,0,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (!wxCHECK_VERSION(3,0,0) || (defined(WXWIN_COMPATIBILITY_2_8) && WXWIN_COMPATIBILITY_2_8)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { wxLua_wxGrid_CanDragRowSize, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGrid_CanDragRowSize },
#endif // (!wxCHECK_VERSION(3,0,0) || (defined(WXWIN_COMPATIBILITY_2_8) && WXWIN_COMPATIBILITY_2_8)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
};
static int s_wxluafunc_wxLua_wxGrid_CanDragRowSize_overload_count = sizeof(s_wxluafunc_wxLua_wxGrid_CanDragRowSize_overload)/sizeof(wxLuaBindCFunc);

#endif // ((wxCHECK_VERSION(3,0,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID))||((!wxCHECK_VERSION(3,0,0) || (defined(WXWIN_COMPATIBILITY_2_8) && WXWIN_COMPATIBILITY_2_8)) && (wxLUA_USE_wxGrid && wxUSE_GRID))

void wxLua_wxGrid_delete_function(void** p)
{
    wxGrid* o = (wxGrid*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGrid_methods[] = {
    { "AppendCols", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_AppendCols, 1, NULL },
    { "AppendRows", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_AppendRows, 1, NULL },
    { "AutoSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_AutoSize, 1, NULL },
    { "AutoSizeColLabelSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_AutoSizeColLabelSize, 1, NULL },
    { "AutoSizeColumn", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_AutoSizeColumn, 1, NULL },
    { "AutoSizeColumns", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_AutoSizeColumns, 1, NULL },
    { "AutoSizeRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_AutoSizeRow, 1, NULL },
    { "AutoSizeRowLabelSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_AutoSizeRowLabelSize, 1, NULL },
    { "AutoSizeRows", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_AutoSizeRows, 1, NULL },
    { "BeginBatch", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_BeginBatch, 1, NULL },

#if (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)
    { "BlockToDeviceRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_BlockToDeviceRect, 1, NULL },
#endif // (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)

    { "CanDragCell", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_CanDragCell, 1, NULL },

#if ((wxCHECK_VERSION(3,0,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID))||((!wxCHECK_VERSION(3,0,0) || (defined(WXWIN_COMPATIBILITY_2_8) && WXWIN_COMPATIBILITY_2_8)) && (wxLUA_USE_wxGrid && wxUSE_GRID))
    { "CanDragColSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_CanDragColSize_overload, s_wxluafunc_wxLua_wxGrid_CanDragColSize_overload_count, 0 },
#endif // ((wxCHECK_VERSION(3,0,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID))||((!wxCHECK_VERSION(3,0,0) || (defined(WXWIN_COMPATIBILITY_2_8) && WXWIN_COMPATIBILITY_2_8)) && (wxLUA_USE_wxGrid && wxUSE_GRID))

    { "CanDragGridSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_CanDragGridSize, 1, NULL },

#if ((wxCHECK_VERSION(3,0,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID))||((!wxCHECK_VERSION(3,0,0) || (defined(WXWIN_COMPATIBILITY_2_8) && WXWIN_COMPATIBILITY_2_8)) && (wxLUA_USE_wxGrid && wxUSE_GRID))
    { "CanDragRowSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_CanDragRowSize_overload, s_wxluafunc_wxLua_wxGrid_CanDragRowSize_overload_count, 0 },
#endif // ((wxCHECK_VERSION(3,0,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID))||((!wxCHECK_VERSION(3,0,0) || (defined(WXWIN_COMPATIBILITY_2_8) && WXWIN_COMPATIBILITY_2_8)) && (wxLUA_USE_wxGrid && wxUSE_GRID))

    { "CanEnableCellControl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_CanEnableCellControl, 1, NULL },

#if (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)
    { "CellToRect", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_CellToRect, 1, NULL },
#endif // (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)

    { "ClearGrid", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_ClearGrid, 1, NULL },
    { "ClearSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_ClearSelection, 1, NULL },
    { "CreateGrid", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_CreateGrid, 1, NULL },
    { "DeleteCols", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_DeleteCols, 1, NULL },
    { "DeleteRows", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_DeleteRows, 1, NULL },
    { "DeselectCell", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_DeselectCell, 1, NULL },
    { "DeselectCol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_DeselectCol, 1, NULL },
    { "DeselectRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_DeselectRow, 1, NULL },
    { "DisableCellEditControl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_DisableCellEditControl, 1, NULL },
    { "DisableDragCell", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_DisableDragCell, 1, NULL },
    { "DisableDragColSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_DisableDragColSize, 1, NULL },
    { "DisableDragGridSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_DisableDragGridSize, 1, NULL },
    { "DisableDragRowSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_DisableDragRowSize, 1, NULL },

#if ((wxLUA_USE_wxDC) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect)
    { "DrawTextRectangle", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_DrawTextRectangle, 1, NULL },
#endif // ((wxLUA_USE_wxDC) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxPointSizeRect)

    { "EnableCellEditControl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_EnableCellEditControl, 1, NULL },
    { "EnableDragCell", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_EnableDragCell, 1, NULL },
    { "EnableDragColSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_EnableDragColSize, 1, NULL },
    { "EnableDragGridSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_EnableDragGridSize, 1, NULL },
    { "EnableDragRowSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_EnableDragRowSize, 1, NULL },
    { "EnableEditing", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_EnableEditing, 1, NULL },
    { "EnableGridLines", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_EnableGridLines, 1, NULL },
    { "EndBatch", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_EndBatch, 1, NULL },
    { "ForceRefresh", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_ForceRefresh, 1, NULL },
    { "GetBatchCount", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetBatchCount, 1, NULL },
    { "GetCellAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetCellAlignment, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "GetCellBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetCellBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "GetCellEditor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetCellEditor, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "GetCellFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetCellFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "GetCellHighlightColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetCellHighlightColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "GetCellHighlightPenWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetCellHighlightPenWidth, 1, NULL },
    { "GetCellHighlightROPenWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetCellHighlightROPenWidth, 1, NULL },
    { "GetCellOverflow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetCellOverflow, 1, NULL },
    { "GetCellRenderer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetCellRenderer, 1, NULL },
    { "GetCellSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetCellSize, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "GetCellTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetCellTextColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "GetCellValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetCellValue, 1, NULL },
    { "GetColLabelAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetColLabelAlignment, 1, NULL },
    { "GetColLabelSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetColLabelSize, 1, NULL },
    { "GetColLabelTextOrientation", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetColLabelTextOrientation, 1, NULL },
    { "GetColLabelValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetColLabelValue, 1, NULL },
    { "GetColMinimalAcceptableWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetColMinimalAcceptableWidth, 1, NULL },
    { "GetColSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetColSize, 1, NULL },
    { "GetDefaultCellAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetDefaultCellAlignment, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "GetDefaultCellBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetDefaultCellBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "GetDefaultCellFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetDefaultCellFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "GetDefaultCellOverflow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetDefaultCellOverflow, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "GetDefaultCellTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetDefaultCellTextColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "GetDefaultColLabelSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetDefaultColLabelSize, 1, NULL },
    { "GetDefaultColSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetDefaultColSize, 1, NULL },
    { "GetDefaultEditor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetDefaultEditor, 1, NULL },
    { "GetDefaultEditorForCell", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetDefaultEditorForCell, 1, NULL },
    { "GetDefaultEditorForType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetDefaultEditorForType, 1, NULL },
    { "GetDefaultRenderer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetDefaultRenderer, 1, NULL },
    { "GetDefaultRendererForCell", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetDefaultRendererForCell, 1, NULL },
    { "GetDefaultRendererForType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetDefaultRendererForType, 1, NULL },
    { "GetDefaultRowLabelSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetDefaultRowLabelSize, 1, NULL },
    { "GetDefaultRowSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetDefaultRowSize, 1, NULL },
    { "GetGridColLabelWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetGridColLabelWindow, 1, NULL },
    { "GetGridCornerLabelWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetGridCornerLabelWindow, 1, NULL },
    { "GetGridCursorCol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetGridCursorCol, 1, NULL },
    { "GetGridCursorRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetGridCursorRow, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "GetGridLineColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetGridLineColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "GetGridRowLabelWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetGridRowLabelWindow, 1, NULL },
    { "GetGridWindow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetGridWindow, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "GetLabelBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetLabelBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "GetLabelFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetLabelFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "GetLabelTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetLabelTextColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "GetNumberCols", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetNumberCols, 1, NULL },
    { "GetNumberRows", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetNumberRows, 1, NULL },
    { "GetOrCreateCellAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetOrCreateCellAttr, 1, NULL },
    { "GetRowLabelAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetRowLabelAlignment, 1, NULL },
    { "GetRowLabelSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetRowLabelSize, 1, NULL },
    { "GetRowLabelValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetRowLabelValue, 1, NULL },
    { "GetRowMinimalAcceptableHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetRowMinimalAcceptableHeight, 1, NULL },
    { "GetRowSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetRowSize, 1, NULL },
    { "GetSelectedCells", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetSelectedCells, 1, NULL },

#if (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "GetSelectedCols", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetSelectedCols, 1, NULL },
    { "GetSelectedRows", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetSelectedRows, 1, NULL },
#endif // (wxLUA_USE_wxArrayInt) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "GetSelectionBackground", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetSelectionBackground, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "GetSelectionBlockBottomRight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetSelectionBlockBottomRight, 1, NULL },
    { "GetSelectionBlockTopLeft", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetSelectionBlockTopLeft, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "GetSelectionForeground", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetSelectionForeground, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "GetSelectionMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetSelectionMode, 1, NULL },
    { "GetTable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetTable, 1, NULL },

#if ((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "GetTextBoxSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GetTextBoxSize, 1, NULL },
#endif // ((wxLUA_USE_wxArrayString) && (wxLUA_USE_wxDC)) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "GridLinesEnabled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_GridLinesEnabled, 1, NULL },
    { "HideCellEditControl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_HideCellEditControl, 1, NULL },
    { "InsertCols", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_InsertCols, 1, NULL },
    { "InsertRows", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_InsertRows, 1, NULL },
    { "IsCellEditControlEnabled", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_IsCellEditControlEnabled, 1, NULL },
    { "IsCellEditControlShown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_IsCellEditControlShown, 1, NULL },
    { "IsCurrentCellReadOnly", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_IsCurrentCellReadOnly, 1, NULL },
    { "IsEditable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_IsEditable, 1, NULL },
    { "IsInSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_IsInSelection, 1, NULL },
    { "IsReadOnly", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_IsReadOnly, 1, NULL },
    { "IsSelection", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_IsSelection, 1, NULL },
    { "IsVisible", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_IsVisible, 1, NULL },
    { "MakeCellVisible", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_MakeCellVisible, 1, NULL },
    { "MoveCursorDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_MoveCursorDown, 1, NULL },
    { "MoveCursorDownBlock", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_MoveCursorDownBlock, 1, NULL },
    { "MoveCursorLeft", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_MoveCursorLeft, 1, NULL },
    { "MoveCursorLeftBlock", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_MoveCursorLeftBlock, 1, NULL },
    { "MoveCursorRight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_MoveCursorRight, 1, NULL },
    { "MoveCursorRightBlock", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_MoveCursorRightBlock, 1, NULL },
    { "MoveCursorUp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_MoveCursorUp, 1, NULL },
    { "MoveCursorUpBlock", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_MoveCursorUpBlock, 1, NULL },
    { "MovePageDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_MovePageDown, 1, NULL },
    { "MovePageUp", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_MovePageUp, 1, NULL },
    { "ProcessTableMessage", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_ProcessTableMessage, 1, NULL },
    { "RegisterDataType", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_RegisterDataType, 1, NULL },
    { "SaveEditControlValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SaveEditControlValue, 1, NULL },
    { "SelectAll", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SelectAll, 1, NULL },
    { "SelectBlock", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SelectBlock, 1, NULL },
    { "SelectCol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SelectCol, 1, NULL },
    { "SelectRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SelectRow, 1, NULL },
    { "SetAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetAttr, 1, NULL },
    { "SetCellAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetCellAlignment, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "SetCellBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetCellBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "SetCellEditor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetCellEditor, 1, NULL },

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "SetCellFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetCellFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "SetCellHighlightColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetCellHighlightColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "SetCellHighlightPenWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetCellHighlightPenWidth, 1, NULL },
    { "SetCellHighlightROPenWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetCellHighlightROPenWidth, 1, NULL },
    { "SetCellOverflow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetCellOverflow, 1, NULL },
    { "SetCellRenderer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetCellRenderer, 1, NULL },
    { "SetCellSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetCellSize, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "SetCellTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetCellTextColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "SetCellValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetCellValue, 1, NULL },
    { "SetColAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetColAttr, 1, NULL },
    { "SetColFormatBool", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetColFormatBool, 1, NULL },
    { "SetColFormatCustom", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetColFormatCustom, 1, NULL },
    { "SetColFormatFloat", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetColFormatFloat, 1, NULL },
    { "SetColFormatNumber", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetColFormatNumber, 1, NULL },
    { "SetColLabelAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetColLabelAlignment, 1, NULL },
    { "SetColLabelSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetColLabelSize, 1, NULL },
    { "SetColLabelValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetColLabelValue, 1, NULL },
    { "SetColMinimalAcceptableWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetColMinimalAcceptableWidth, 1, NULL },
    { "SetColMinimalWidth", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetColMinimalWidth, 1, NULL },
    { "SetColSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetColSize, 1, NULL },
    { "SetDefaultCellAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetDefaultCellAlignment, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "SetDefaultCellBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetDefaultCellBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "SetDefaultCellFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetDefaultCellFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "SetDefaultCellOverflow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetDefaultCellOverflow, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "SetDefaultCellTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetDefaultCellTextColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "SetDefaultColSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetDefaultColSize, 1, NULL },
    { "SetDefaultEditor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetDefaultEditor, 1, NULL },
    { "SetDefaultRenderer", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetDefaultRenderer, 1, NULL },
    { "SetDefaultRowSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetDefaultRowSize, 1, NULL },
    { "SetGridCursor", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetGridCursor, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "SetGridLineColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetGridLineColour, 1, NULL },
    { "SetLabelBackgroundColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetLabelBackgroundColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "SetLabelFont", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetLabelFont, 1, NULL },
#endif // (wxLUA_USE_wxFont) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "SetLabelTextColour", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetLabelTextColour, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "SetMargins", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetMargins, 1, NULL },
    { "SetReadOnly", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetReadOnly, 1, NULL },
    { "SetRowAttr", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetRowAttr, 1, NULL },
    { "SetRowLabelAlignment", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetRowLabelAlignment, 1, NULL },
    { "SetRowLabelSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetRowLabelSize, 1, NULL },
    { "SetRowLabelValue", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetRowLabelValue, 1, NULL },
    { "SetRowMinimalAcceptableHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetRowMinimalAcceptableHeight, 1, NULL },
    { "SetRowMinimalHeight", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetRowMinimalHeight, 1, NULL },
    { "SetRowSize", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetRowSize, 1, NULL },

#if (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "SetSelectionBackground", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetSelectionBackground, 1, NULL },
    { "SetSelectionForeground", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetSelectionForeground, 1, NULL },
#endif // (wxLUA_USE_wxColourPenBrush) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "SetSelectionMode", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetSelectionMode, 1, NULL },
    { "SetTable", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_SetTable, 1, NULL },
    { "ShowCellEditControl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_ShowCellEditControl, 1, NULL },

#if (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxGrid && wxUSE_GRID)
    { "StringToLines", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_StringToLines, 1, NULL },
#endif // (wxLUA_USE_wxArrayString) && (wxLUA_USE_wxGrid && wxUSE_GRID)

    { "XToCol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_XToCol, 1, NULL },
    { "XToEdgeOfCol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_XToEdgeOfCol, 1, NULL },
    { "XYToCell", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_XYToCell, 1, NULL },
    { "YToEdgeOfRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_YToEdgeOfRow, 1, NULL },
    { "YToRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGrid_YToRow, 1, NULL },

#if (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)
    { "wxGrid", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGrid_constructor, 1, NULL },
#endif // (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)

    { 0, 0, 0, 0 },
};

int wxGrid_methodCount = sizeof(wxGrid_methods)/sizeof(wxLuaBindMethod) - 1;

wxLuaBindNumber wxGrid_enums[] = {
#if wxLUA_USE_wxGrid && wxUSE_GRID
        { "wxGridSelectCells", wxGrid::wxGridSelectCells },
        { "wxGridSelectColumns", wxGrid::wxGridSelectColumns },
        { "wxGridSelectRows", wxGrid::wxGridSelectRows },
#endif // wxLUA_USE_wxGrid && wxUSE_GRID

    { NULL, 0, },
};
int wxGrid_enumCount = sizeof(wxGrid_enums)/sizeof(wxLuaBindNumber) - 1;
#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridEvent'
int wxluatype_wxGridEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridEvent_AltDown[] = { &wxluatype_wxGridEvent, NULL };
static int LUACALL wxLua_wxGridEvent_AltDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridEvent_AltDown[1] = {{ wxLua_wxGridEvent_AltDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridEvent_AltDown }};
//     bool        AltDown();
static int LUACALL wxLua_wxGridEvent_AltDown(lua_State *L)
{
    // get this
    wxGridEvent * self = (wxGridEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridEvent);
    // call AltDown
    bool returns = (self->AltDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridEvent_ControlDown[] = { &wxluatype_wxGridEvent, NULL };
static int LUACALL wxLua_wxGridEvent_ControlDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridEvent_ControlDown[1] = {{ wxLua_wxGridEvent_ControlDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridEvent_ControlDown }};
//     bool        ControlDown();
static int LUACALL wxLua_wxGridEvent_ControlDown(lua_State *L)
{
    // get this
    wxGridEvent * self = (wxGridEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridEvent);
    // call ControlDown
    bool returns = (self->ControlDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridEvent_GetCol[] = { &wxluatype_wxGridEvent, NULL };
static int LUACALL wxLua_wxGridEvent_GetCol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridEvent_GetCol[1] = {{ wxLua_wxGridEvent_GetCol, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridEvent_GetCol }};
//     virtual int GetCol();
static int LUACALL wxLua_wxGridEvent_GetCol(lua_State *L)
{
    // get this
    wxGridEvent * self = (wxGridEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridEvent);
    // call GetCol
    int returns = (self->GetCol());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}


#if (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridEvent_GetPosition[] = { &wxluatype_wxGridEvent, NULL };
static int LUACALL wxLua_wxGridEvent_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridEvent_GetPosition[1] = {{ wxLua_wxGridEvent_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridEvent_GetPosition }};
//     wxPoint     GetPosition();
static int LUACALL wxLua_wxGridEvent_GetPosition(lua_State *L)
{
    // get this
    wxGridEvent * self = (wxGridEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridEvent);
    // call GetPosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPosition());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxPoint);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridEvent_GetRow[] = { &wxluatype_wxGridEvent, NULL };
static int LUACALL wxLua_wxGridEvent_GetRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridEvent_GetRow[1] = {{ wxLua_wxGridEvent_GetRow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridEvent_GetRow }};
//     virtual int GetRow();
static int LUACALL wxLua_wxGridEvent_GetRow(lua_State *L)
{
    // get this
    wxGridEvent * self = (wxGridEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridEvent);
    // call GetRow
    int returns = (self->GetRow());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridEvent_MetaDown[] = { &wxluatype_wxGridEvent, NULL };
static int LUACALL wxLua_wxGridEvent_MetaDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridEvent_MetaDown[1] = {{ wxLua_wxGridEvent_MetaDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridEvent_MetaDown }};
//     bool        MetaDown();
static int LUACALL wxLua_wxGridEvent_MetaDown(lua_State *L)
{
    // get this
    wxGridEvent * self = (wxGridEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridEvent);
    // call MetaDown
    bool returns = (self->MetaDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridEvent_Selecting[] = { &wxluatype_wxGridEvent, NULL };
static int LUACALL wxLua_wxGridEvent_Selecting(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridEvent_Selecting[1] = {{ wxLua_wxGridEvent_Selecting, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridEvent_Selecting }};
//     bool        Selecting();
static int LUACALL wxLua_wxGridEvent_Selecting(lua_State *L)
{
    // get this
    wxGridEvent * self = (wxGridEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridEvent);
    // call Selecting
    bool returns = (self->Selecting());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridEvent_ShiftDown[] = { &wxluatype_wxGridEvent, NULL };
static int LUACALL wxLua_wxGridEvent_ShiftDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridEvent_ShiftDown[1] = {{ wxLua_wxGridEvent_ShiftDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridEvent_ShiftDown }};
//     bool        ShiftDown();
static int LUACALL wxLua_wxGridEvent_ShiftDown(lua_State *L)
{
    // get this
    wxGridEvent * self = (wxGridEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridEvent);
    // call ShiftDown
    bool returns = (self->ShiftDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridEvent_delete[] = { &wxluatype_wxGridEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridEvent_delete }};


#if (((!wxCHECK_VERSION(2,9,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxObject)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGridEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridEvent_constructor[1] = {{ wxLua_wxGridEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 3, 12, s_wxluatypeArray_wxLua_wxGridEvent_constructor }};
//     !%wxchkver_2_9_0 wxGridEvent(int id, wxEventType type, wxObject* obj, int row = -1, int col = -1, int x = -1, int y = -1, bool sel = true, bool control = false, bool shift = false, bool alt = false, bool meta = false);
static int LUACALL wxLua_wxGridEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool meta = false
    bool meta = (argCount >= 12 ? wxlua_getbooleantype(L, 12) : false);
    // bool alt = false
    bool alt = (argCount >= 11 ? wxlua_getbooleantype(L, 11) : false);
    // bool shift = false
    bool shift = (argCount >= 10 ? wxlua_getbooleantype(L, 10) : false);
    // bool control = false
    bool control = (argCount >= 9 ? wxlua_getbooleantype(L, 9) : false);
    // bool sel = true
    bool sel = (argCount >= 8 ? wxlua_getbooleantype(L, 8) : true);
    // int y = -1
    int y = (argCount >= 7 ? (int)wxlua_getnumbertype(L, 7) : -1);
    // int x = -1
    int x = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : -1);
    // int col = -1
    int col = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // int row = -1
    int row = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // wxObject obj
    wxObject * obj = (wxObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxObject);
    // wxEventType type
    wxEventType type = (wxEventType)wxlua_getnumbertype(L, 2);
    // int id
    int id = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxGridEvent* returns = new wxGridEvent(id, type, obj, row, col, x, y, sel, control, shift, alt, meta);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridEvent);

    return 1;
}

#endif // (((!wxCHECK_VERSION(2,9,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxObject)



void wxLua_wxGridEvent_delete_function(void** p)
{
    wxGridEvent* o = (wxGridEvent*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridEvent_methods[] = {
    { "AltDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridEvent_AltDown, 1, NULL },
    { "ControlDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridEvent_ControlDown, 1, NULL },
    { "GetCol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridEvent_GetCol, 1, NULL },

#if (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridEvent_GetPosition, 1, NULL },
#endif // (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)

    { "GetRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridEvent_GetRow, 1, NULL },
    { "MetaDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridEvent_MetaDown, 1, NULL },
    { "Selecting", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridEvent_Selecting, 1, NULL },
    { "ShiftDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridEvent_ShiftDown, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridEvent_delete, 1, NULL },

#if (((!wxCHECK_VERSION(2,9,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxObject)
    { "wxGridEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridEvent_constructor, 1, NULL },
#endif // (((!wxCHECK_VERSION(2,9,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxObject)

    { 0, 0, 0, 0 },
};

int wxGridEvent_methodCount = sizeof(wxGridEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridSizeEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridSizeEvent'
int wxluatype_wxGridSizeEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridSizeEvent_AltDown[] = { &wxluatype_wxGridSizeEvent, NULL };
static int LUACALL wxLua_wxGridSizeEvent_AltDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridSizeEvent_AltDown[1] = {{ wxLua_wxGridSizeEvent_AltDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridSizeEvent_AltDown }};
//     bool        AltDown();
static int LUACALL wxLua_wxGridSizeEvent_AltDown(lua_State *L)
{
    // get this
    wxGridSizeEvent * self = (wxGridSizeEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridSizeEvent);
    // call AltDown
    bool returns = (self->AltDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridSizeEvent_ControlDown[] = { &wxluatype_wxGridSizeEvent, NULL };
static int LUACALL wxLua_wxGridSizeEvent_ControlDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridSizeEvent_ControlDown[1] = {{ wxLua_wxGridSizeEvent_ControlDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridSizeEvent_ControlDown }};
//     bool        ControlDown();
static int LUACALL wxLua_wxGridSizeEvent_ControlDown(lua_State *L)
{
    // get this
    wxGridSizeEvent * self = (wxGridSizeEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridSizeEvent);
    // call ControlDown
    bool returns = (self->ControlDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}


#if (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridSizeEvent_GetPosition[] = { &wxluatype_wxGridSizeEvent, NULL };
static int LUACALL wxLua_wxGridSizeEvent_GetPosition(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridSizeEvent_GetPosition[1] = {{ wxLua_wxGridSizeEvent_GetPosition, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridSizeEvent_GetPosition }};
//     wxPoint     GetPosition();
static int LUACALL wxLua_wxGridSizeEvent_GetPosition(lua_State *L)
{
    // get this
    wxGridSizeEvent * self = (wxGridSizeEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridSizeEvent);
    // call GetPosition
    // allocate a new object using the copy constructor
    wxPoint* returns = new wxPoint(self->GetPosition());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxPoint);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxPoint);

    return 1;
}

#endif // (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridSizeEvent_GetRowOrCol[] = { &wxluatype_wxGridSizeEvent, NULL };
static int LUACALL wxLua_wxGridSizeEvent_GetRowOrCol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridSizeEvent_GetRowOrCol[1] = {{ wxLua_wxGridSizeEvent_GetRowOrCol, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridSizeEvent_GetRowOrCol }};
//     int         GetRowOrCol();
static int LUACALL wxLua_wxGridSizeEvent_GetRowOrCol(lua_State *L)
{
    // get this
    wxGridSizeEvent * self = (wxGridSizeEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridSizeEvent);
    // call GetRowOrCol
    int returns = (self->GetRowOrCol());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridSizeEvent_MetaDown[] = { &wxluatype_wxGridSizeEvent, NULL };
static int LUACALL wxLua_wxGridSizeEvent_MetaDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridSizeEvent_MetaDown[1] = {{ wxLua_wxGridSizeEvent_MetaDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridSizeEvent_MetaDown }};
//     bool        MetaDown();
static int LUACALL wxLua_wxGridSizeEvent_MetaDown(lua_State *L)
{
    // get this
    wxGridSizeEvent * self = (wxGridSizeEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridSizeEvent);
    // call MetaDown
    bool returns = (self->MetaDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridSizeEvent_ShiftDown[] = { &wxluatype_wxGridSizeEvent, NULL };
static int LUACALL wxLua_wxGridSizeEvent_ShiftDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridSizeEvent_ShiftDown[1] = {{ wxLua_wxGridSizeEvent_ShiftDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridSizeEvent_ShiftDown }};
//     bool        ShiftDown();
static int LUACALL wxLua_wxGridSizeEvent_ShiftDown(lua_State *L)
{
    // get this
    wxGridSizeEvent * self = (wxGridSizeEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridSizeEvent);
    // call ShiftDown
    bool returns = (self->ShiftDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridSizeEvent_delete[] = { &wxluatype_wxGridSizeEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridSizeEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridSizeEvent_delete }};


#if (((!wxCHECK_VERSION(2,9,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxObject)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridSizeEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGridSizeEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridSizeEvent_constructor[1] = {{ wxLua_wxGridSizeEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 3, 10, s_wxluatypeArray_wxLua_wxGridSizeEvent_constructor }};
//     !%wxchkver_2_9_0 wxGridSizeEvent(int id, wxEventType type, wxObject* obj, int rowOrCol = -1, int x = -1, int y = -1, bool control = false, bool shift = false, bool alt = false, bool meta = false);
static int LUACALL wxLua_wxGridSizeEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool meta = false
    bool meta = (argCount >= 10 ? wxlua_getbooleantype(L, 10) : false);
    // bool alt = false
    bool alt = (argCount >= 9 ? wxlua_getbooleantype(L, 9) : false);
    // bool shift = false
    bool shift = (argCount >= 8 ? wxlua_getbooleantype(L, 8) : false);
    // bool control = false
    bool control = (argCount >= 7 ? wxlua_getbooleantype(L, 7) : false);
    // int y = -1
    int y = (argCount >= 6 ? (int)wxlua_getnumbertype(L, 6) : -1);
    // int x = -1
    int x = (argCount >= 5 ? (int)wxlua_getnumbertype(L, 5) : -1);
    // int rowOrCol = -1
    int rowOrCol = (argCount >= 4 ? (int)wxlua_getnumbertype(L, 4) : -1);
    // wxObject obj
    wxObject * obj = (wxObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxObject);
    // wxEventType type
    wxEventType type = (wxEventType)wxlua_getnumbertype(L, 2);
    // int id
    int id = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxGridSizeEvent* returns = new wxGridSizeEvent(id, type, obj, rowOrCol, x, y, control, shift, alt, meta);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridSizeEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridSizeEvent);

    return 1;
}

#endif // (((!wxCHECK_VERSION(2,9,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxObject)



void wxLua_wxGridSizeEvent_delete_function(void** p)
{
    wxGridSizeEvent* o = (wxGridSizeEvent*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridSizeEvent_methods[] = {
    { "AltDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridSizeEvent_AltDown, 1, NULL },
    { "ControlDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridSizeEvent_ControlDown, 1, NULL },

#if (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)
    { "GetPosition", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridSizeEvent_GetPosition, 1, NULL },
#endif // (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxPointSizeRect)

    { "GetRowOrCol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridSizeEvent_GetRowOrCol, 1, NULL },
    { "MetaDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridSizeEvent_MetaDown, 1, NULL },
    { "ShiftDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridSizeEvent_ShiftDown, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridSizeEvent_delete, 1, NULL },

#if (((!wxCHECK_VERSION(2,9,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxObject)
    { "wxGridSizeEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridSizeEvent_constructor, 1, NULL },
#endif // (((!wxCHECK_VERSION(2,9,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxObject)

    { 0, 0, 0, 0 },
};

int wxGridSizeEvent_methodCount = sizeof(wxGridSizeEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridRangeSelectEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridRangeSelectEvent'
int wxluatype_wxGridRangeSelectEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_AltDown[] = { &wxluatype_wxGridRangeSelectEvent, NULL };
static int LUACALL wxLua_wxGridRangeSelectEvent_AltDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridRangeSelectEvent_AltDown[1] = {{ wxLua_wxGridRangeSelectEvent_AltDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_AltDown }};
//     bool        AltDown();
static int LUACALL wxLua_wxGridRangeSelectEvent_AltDown(lua_State *L)
{
    // get this
    wxGridRangeSelectEvent * self = (wxGridRangeSelectEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridRangeSelectEvent);
    // call AltDown
    bool returns = (self->AltDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_ControlDown[] = { &wxluatype_wxGridRangeSelectEvent, NULL };
static int LUACALL wxLua_wxGridRangeSelectEvent_ControlDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridRangeSelectEvent_ControlDown[1] = {{ wxLua_wxGridRangeSelectEvent_ControlDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_ControlDown }};
//     bool        ControlDown();
static int LUACALL wxLua_wxGridRangeSelectEvent_ControlDown(lua_State *L)
{
    // get this
    wxGridRangeSelectEvent * self = (wxGridRangeSelectEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridRangeSelectEvent);
    // call ControlDown
    bool returns = (self->ControlDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_GetBottomRightCoords[] = { &wxluatype_wxGridRangeSelectEvent, NULL };
static int LUACALL wxLua_wxGridRangeSelectEvent_GetBottomRightCoords(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridRangeSelectEvent_GetBottomRightCoords[1] = {{ wxLua_wxGridRangeSelectEvent_GetBottomRightCoords, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_GetBottomRightCoords }};
//     wxGridCellCoords GetBottomRightCoords();
static int LUACALL wxLua_wxGridRangeSelectEvent_GetBottomRightCoords(lua_State *L)
{
    // get this
    wxGridRangeSelectEvent * self = (wxGridRangeSelectEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridRangeSelectEvent);
    // call GetBottomRightCoords
    // allocate a new object using the copy constructor
    wxGridCellCoords* returns = new wxGridCellCoords(self->GetBottomRightCoords());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellCoords);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellCoords);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_GetBottomRow[] = { &wxluatype_wxGridRangeSelectEvent, NULL };
static int LUACALL wxLua_wxGridRangeSelectEvent_GetBottomRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridRangeSelectEvent_GetBottomRow[1] = {{ wxLua_wxGridRangeSelectEvent_GetBottomRow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_GetBottomRow }};
//     int         GetBottomRow();
static int LUACALL wxLua_wxGridRangeSelectEvent_GetBottomRow(lua_State *L)
{
    // get this
    wxGridRangeSelectEvent * self = (wxGridRangeSelectEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridRangeSelectEvent);
    // call GetBottomRow
    int returns = (self->GetBottomRow());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_GetLeftCol[] = { &wxluatype_wxGridRangeSelectEvent, NULL };
static int LUACALL wxLua_wxGridRangeSelectEvent_GetLeftCol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridRangeSelectEvent_GetLeftCol[1] = {{ wxLua_wxGridRangeSelectEvent_GetLeftCol, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_GetLeftCol }};
//     int         GetLeftCol();
static int LUACALL wxLua_wxGridRangeSelectEvent_GetLeftCol(lua_State *L)
{
    // get this
    wxGridRangeSelectEvent * self = (wxGridRangeSelectEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridRangeSelectEvent);
    // call GetLeftCol
    int returns = (self->GetLeftCol());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_GetRightCol[] = { &wxluatype_wxGridRangeSelectEvent, NULL };
static int LUACALL wxLua_wxGridRangeSelectEvent_GetRightCol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridRangeSelectEvent_GetRightCol[1] = {{ wxLua_wxGridRangeSelectEvent_GetRightCol, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_GetRightCol }};
//     int         GetRightCol();
static int LUACALL wxLua_wxGridRangeSelectEvent_GetRightCol(lua_State *L)
{
    // get this
    wxGridRangeSelectEvent * self = (wxGridRangeSelectEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridRangeSelectEvent);
    // call GetRightCol
    int returns = (self->GetRightCol());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_GetTopLeftCoords[] = { &wxluatype_wxGridRangeSelectEvent, NULL };
static int LUACALL wxLua_wxGridRangeSelectEvent_GetTopLeftCoords(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridRangeSelectEvent_GetTopLeftCoords[1] = {{ wxLua_wxGridRangeSelectEvent_GetTopLeftCoords, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_GetTopLeftCoords }};
//     wxGridCellCoords GetTopLeftCoords();
static int LUACALL wxLua_wxGridRangeSelectEvent_GetTopLeftCoords(lua_State *L)
{
    // get this
    wxGridRangeSelectEvent * self = (wxGridRangeSelectEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridRangeSelectEvent);
    // call GetTopLeftCoords
    // allocate a new object using the copy constructor
    wxGridCellCoords* returns = new wxGridCellCoords(self->GetTopLeftCoords());
    // add the new object to the tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridCellCoords);
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridCellCoords);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_GetTopRow[] = { &wxluatype_wxGridRangeSelectEvent, NULL };
static int LUACALL wxLua_wxGridRangeSelectEvent_GetTopRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridRangeSelectEvent_GetTopRow[1] = {{ wxLua_wxGridRangeSelectEvent_GetTopRow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_GetTopRow }};
//     int         GetTopRow();
static int LUACALL wxLua_wxGridRangeSelectEvent_GetTopRow(lua_State *L)
{
    // get this
    wxGridRangeSelectEvent * self = (wxGridRangeSelectEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridRangeSelectEvent);
    // call GetTopRow
    int returns = (self->GetTopRow());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_MetaDown[] = { &wxluatype_wxGridRangeSelectEvent, NULL };
static int LUACALL wxLua_wxGridRangeSelectEvent_MetaDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridRangeSelectEvent_MetaDown[1] = {{ wxLua_wxGridRangeSelectEvent_MetaDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_MetaDown }};
//     bool        MetaDown();
static int LUACALL wxLua_wxGridRangeSelectEvent_MetaDown(lua_State *L)
{
    // get this
    wxGridRangeSelectEvent * self = (wxGridRangeSelectEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridRangeSelectEvent);
    // call MetaDown
    bool returns = (self->MetaDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_Selecting[] = { &wxluatype_wxGridRangeSelectEvent, NULL };
static int LUACALL wxLua_wxGridRangeSelectEvent_Selecting(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridRangeSelectEvent_Selecting[1] = {{ wxLua_wxGridRangeSelectEvent_Selecting, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_Selecting }};
//     bool        Selecting();
static int LUACALL wxLua_wxGridRangeSelectEvent_Selecting(lua_State *L)
{
    // get this
    wxGridRangeSelectEvent * self = (wxGridRangeSelectEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridRangeSelectEvent);
    // call Selecting
    bool returns = (self->Selecting());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_ShiftDown[] = { &wxluatype_wxGridRangeSelectEvent, NULL };
static int LUACALL wxLua_wxGridRangeSelectEvent_ShiftDown(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridRangeSelectEvent_ShiftDown[1] = {{ wxLua_wxGridRangeSelectEvent_ShiftDown, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_ShiftDown }};
//     bool        ShiftDown();
static int LUACALL wxLua_wxGridRangeSelectEvent_ShiftDown(lua_State *L)
{
    // get this
    wxGridRangeSelectEvent * self = (wxGridRangeSelectEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridRangeSelectEvent);
    // call ShiftDown
    bool returns = (self->ShiftDown());
    // push the result flag
    lua_pushboolean(L, returns);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_delete[] = { &wxluatype_wxGridRangeSelectEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridRangeSelectEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_delete }};


#if (((!wxCHECK_VERSION(2,9,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxObject)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, &wxluatype_wxGridCellCoords, &wxluatype_wxGridCellCoords, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, &wxluatype_TBOOLEAN, NULL };
static int LUACALL wxLua_wxGridRangeSelectEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridRangeSelectEvent_constructor[1] = {{ wxLua_wxGridRangeSelectEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 5, 10, s_wxluatypeArray_wxLua_wxGridRangeSelectEvent_constructor }};
//     !%wxchkver_2_9_0 wxGridRangeSelectEvent(int id, wxEventType type, wxObject* obj, const wxGridCellCoords& topLeft, const wxGridCellCoords& bottomRight, bool sel = true, bool control = false, bool shift = false, bool alt = false, bool meta = false);
static int LUACALL wxLua_wxGridRangeSelectEvent_constructor(lua_State *L)
{
    // get number of arguments
    int argCount = lua_gettop(L);
    // bool meta = false
    bool meta = (argCount >= 10 ? wxlua_getbooleantype(L, 10) : false);
    // bool alt = false
    bool alt = (argCount >= 9 ? wxlua_getbooleantype(L, 9) : false);
    // bool shift = false
    bool shift = (argCount >= 8 ? wxlua_getbooleantype(L, 8) : false);
    // bool control = false
    bool control = (argCount >= 7 ? wxlua_getbooleantype(L, 7) : false);
    // bool sel = true
    bool sel = (argCount >= 6 ? wxlua_getbooleantype(L, 6) : true);
    // const wxGridCellCoords bottomRight
    const wxGridCellCoords * bottomRight = (const wxGridCellCoords *)wxluaT_getuserdatatype(L, 5, wxluatype_wxGridCellCoords);
    // const wxGridCellCoords topLeft
    const wxGridCellCoords * topLeft = (const wxGridCellCoords *)wxluaT_getuserdatatype(L, 4, wxluatype_wxGridCellCoords);
    // wxObject obj
    wxObject * obj = (wxObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxObject);
    // wxEventType type
    wxEventType type = (wxEventType)wxlua_getnumbertype(L, 2);
    // int id
    int id = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxGridRangeSelectEvent* returns = new wxGridRangeSelectEvent(id, type, obj, *topLeft, *bottomRight, sel, control, shift, alt, meta);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridRangeSelectEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridRangeSelectEvent);

    return 1;
}

#endif // (((!wxCHECK_VERSION(2,9,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxObject)



void wxLua_wxGridRangeSelectEvent_delete_function(void** p)
{
    wxGridRangeSelectEvent* o = (wxGridRangeSelectEvent*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridRangeSelectEvent_methods[] = {
    { "AltDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridRangeSelectEvent_AltDown, 1, NULL },
    { "ControlDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridRangeSelectEvent_ControlDown, 1, NULL },
    { "GetBottomRightCoords", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridRangeSelectEvent_GetBottomRightCoords, 1, NULL },
    { "GetBottomRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridRangeSelectEvent_GetBottomRow, 1, NULL },
    { "GetLeftCol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridRangeSelectEvent_GetLeftCol, 1, NULL },
    { "GetRightCol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridRangeSelectEvent_GetRightCol, 1, NULL },
    { "GetTopLeftCoords", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridRangeSelectEvent_GetTopLeftCoords, 1, NULL },
    { "GetTopRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridRangeSelectEvent_GetTopRow, 1, NULL },
    { "MetaDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridRangeSelectEvent_MetaDown, 1, NULL },
    { "Selecting", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridRangeSelectEvent_Selecting, 1, NULL },
    { "ShiftDown", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridRangeSelectEvent_ShiftDown, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridRangeSelectEvent_delete, 1, NULL },

#if (((!wxCHECK_VERSION(2,9,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxObject)
    { "wxGridRangeSelectEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridRangeSelectEvent_constructor, 1, NULL },
#endif // (((!wxCHECK_VERSION(2,9,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxGrid && wxUSE_GRID)) && (wxLUA_USE_wxObject)

    { 0, 0, 0, 0 },
};

int wxGridRangeSelectEvent_methodCount = sizeof(wxGridRangeSelectEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID


#if wxLUA_USE_wxGrid && wxUSE_GRID
// ---------------------------------------------------------------------------
// Bind class wxGridEditorCreatedEvent
// ---------------------------------------------------------------------------

// Lua MetaTable Tag for Class 'wxGridEditorCreatedEvent'
int wxluatype_wxGridEditorCreatedEvent = WXLUA_TUNKNOWN;

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridEditorCreatedEvent_GetCol[] = { &wxluatype_wxGridEditorCreatedEvent, NULL };
static int LUACALL wxLua_wxGridEditorCreatedEvent_GetCol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridEditorCreatedEvent_GetCol[1] = {{ wxLua_wxGridEditorCreatedEvent_GetCol, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridEditorCreatedEvent_GetCol }};
//     int GetCol();
static int LUACALL wxLua_wxGridEditorCreatedEvent_GetCol(lua_State *L)
{
    // get this
    wxGridEditorCreatedEvent * self = (wxGridEditorCreatedEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridEditorCreatedEvent);
    // call GetCol
    int returns = (self->GetCol());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridEditorCreatedEvent_GetControl[] = { &wxluatype_wxGridEditorCreatedEvent, NULL };
static int LUACALL wxLua_wxGridEditorCreatedEvent_GetControl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridEditorCreatedEvent_GetControl[1] = {{ wxLua_wxGridEditorCreatedEvent_GetControl, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridEditorCreatedEvent_GetControl }};
//     wxControl* GetControl();
static int LUACALL wxLua_wxGridEditorCreatedEvent_GetControl(lua_State *L)
{
    // get this
    wxGridEditorCreatedEvent * self = (wxGridEditorCreatedEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridEditorCreatedEvent);
    // call GetControl
    wxControl* returns = (wxControl*)self->GetControl();
    // push the result datatype
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxControl);

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridEditorCreatedEvent_GetRow[] = { &wxluatype_wxGridEditorCreatedEvent, NULL };
static int LUACALL wxLua_wxGridEditorCreatedEvent_GetRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridEditorCreatedEvent_GetRow[1] = {{ wxLua_wxGridEditorCreatedEvent_GetRow, WXLUAMETHOD_METHOD, 1, 1, s_wxluatypeArray_wxLua_wxGridEditorCreatedEvent_GetRow }};
//     int GetRow();
static int LUACALL wxLua_wxGridEditorCreatedEvent_GetRow(lua_State *L)
{
    // get this
    wxGridEditorCreatedEvent * self = (wxGridEditorCreatedEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridEditorCreatedEvent);
    // call GetRow
    int returns = (self->GetRow());
    // push the result number
#if LUA_VERSION_NUM >= 503
if ((double)(lua_Integer)returns == (double)returns) {
    // Exactly representable as lua_Integer
    lua_pushinteger(L, returns);
} else
#endif
{
    lua_pushnumber(L, returns);
}

    return 1;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridEditorCreatedEvent_SetCol[] = { &wxluatype_wxGridEditorCreatedEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridEditorCreatedEvent_SetCol(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridEditorCreatedEvent_SetCol[1] = {{ wxLua_wxGridEditorCreatedEvent_SetCol, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridEditorCreatedEvent_SetCol }};
//     void SetCol(int col);
static int LUACALL wxLua_wxGridEditorCreatedEvent_SetCol(lua_State *L)
{
    // int col
    int col = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridEditorCreatedEvent * self = (wxGridEditorCreatedEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridEditorCreatedEvent);
    // call SetCol
    self->SetCol(col);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridEditorCreatedEvent_SetControl[] = { &wxluatype_wxGridEditorCreatedEvent, &wxluatype_wxControl, NULL };
static int LUACALL wxLua_wxGridEditorCreatedEvent_SetControl(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridEditorCreatedEvent_SetControl[1] = {{ wxLua_wxGridEditorCreatedEvent_SetControl, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridEditorCreatedEvent_SetControl }};
//     void SetControl(wxControl * ctrl);
static int LUACALL wxLua_wxGridEditorCreatedEvent_SetControl(lua_State *L)
{
    // wxControl ctrl
    wxControl * ctrl = (wxControl *)wxluaT_getuserdatatype(L, 2, wxluatype_wxControl);
    // get this
    wxGridEditorCreatedEvent * self = (wxGridEditorCreatedEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridEditorCreatedEvent);
    // call SetControl
    self->SetControl(ctrl);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridEditorCreatedEvent_SetRow[] = { &wxluatype_wxGridEditorCreatedEvent, &wxluatype_TNUMBER, NULL };
static int LUACALL wxLua_wxGridEditorCreatedEvent_SetRow(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridEditorCreatedEvent_SetRow[1] = {{ wxLua_wxGridEditorCreatedEvent_SetRow, WXLUAMETHOD_METHOD, 2, 2, s_wxluatypeArray_wxLua_wxGridEditorCreatedEvent_SetRow }};
//     void SetRow(int row);
static int LUACALL wxLua_wxGridEditorCreatedEvent_SetRow(lua_State *L)
{
    // int row
    int row = (int)wxlua_getnumbertype(L, 2);
    // get this
    wxGridEditorCreatedEvent * self = (wxGridEditorCreatedEvent *)wxluaT_getuserdatatype(L, 1, wxluatype_wxGridEditorCreatedEvent);
    // call SetRow
    self->SetRow(row);

    return 0;
}

static wxLuaArgType s_wxluatypeArray_wxLua_wxGridEditorCreatedEvent_delete[] = { &wxluatype_wxGridEditorCreatedEvent, NULL };
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridEditorCreatedEvent_delete[1] = {{ wxlua_userdata_delete, WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, 1, 1, s_wxluatypeArray_wxLua_wxGridEditorCreatedEvent_delete }};


#if (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxObject)
static wxLuaArgType s_wxluatypeArray_wxLua_wxGridEditorCreatedEvent_constructor[] = { &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxObject, &wxluatype_TNUMBER, &wxluatype_TNUMBER, &wxluatype_wxControl, NULL };
static int LUACALL wxLua_wxGridEditorCreatedEvent_constructor(lua_State *L);
static wxLuaBindCFunc s_wxluafunc_wxLua_wxGridEditorCreatedEvent_constructor[1] = {{ wxLua_wxGridEditorCreatedEvent_constructor, WXLUAMETHOD_CONSTRUCTOR, 6, 6, s_wxluatypeArray_wxLua_wxGridEditorCreatedEvent_constructor }};
//     wxGridEditorCreatedEvent(int id, wxEventType type, wxObject* obj, int row, int col, wxControl* ctrl);
static int LUACALL wxLua_wxGridEditorCreatedEvent_constructor(lua_State *L)
{
    // wxControl ctrl
    wxControl * ctrl = (wxControl *)wxluaT_getuserdatatype(L, 6, wxluatype_wxControl);
    // int col
    int col = (int)wxlua_getnumbertype(L, 5);
    // int row
    int row = (int)wxlua_getnumbertype(L, 4);
    // wxObject obj
    wxObject * obj = (wxObject *)wxluaT_getuserdatatype(L, 3, wxluatype_wxObject);
    // wxEventType type
    wxEventType type = (wxEventType)wxlua_getnumbertype(L, 2);
    // int id
    int id = (int)wxlua_getnumbertype(L, 1);
    // call constructor
    wxGridEditorCreatedEvent* returns = new wxGridEditorCreatedEvent(id, type, obj, row, col, ctrl);
    // add to tracked memory list
    wxluaO_addgcobject(L, returns, wxluatype_wxGridEditorCreatedEvent);
    // push the constructed class pointer
    wxluaT_pushuserdatatype(L, returns, wxluatype_wxGridEditorCreatedEvent);

    return 1;
}

#endif // (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxObject)



void wxLua_wxGridEditorCreatedEvent_delete_function(void** p)
{
    wxGridEditorCreatedEvent* o = (wxGridEditorCreatedEvent*)(*p);
    delete o;
}

// Map Lua Class Methods to C Binding Functions
wxLuaBindMethod wxGridEditorCreatedEvent_methods[] = {
    { "GetCol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridEditorCreatedEvent_GetCol, 1, NULL },
    { "GetControl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridEditorCreatedEvent_GetControl, 1, NULL },
    { "GetRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridEditorCreatedEvent_GetRow, 1, NULL },
    { "SetCol", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridEditorCreatedEvent_SetCol, 1, NULL },
    { "SetControl", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridEditorCreatedEvent_SetControl, 1, NULL },
    { "SetRow", WXLUAMETHOD_METHOD, s_wxluafunc_wxLua_wxGridEditorCreatedEvent_SetRow, 1, NULL },
    { "delete", WXLUAMETHOD_METHOD|WXLUAMETHOD_DELETE, s_wxluafunc_wxLua_wxGridEditorCreatedEvent_delete, 1, NULL },

#if (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxObject)
    { "wxGridEditorCreatedEvent", WXLUAMETHOD_CONSTRUCTOR, s_wxluafunc_wxLua_wxGridEditorCreatedEvent_constructor, 1, NULL },
#endif // (wxLUA_USE_wxGrid && wxUSE_GRID) && (wxLUA_USE_wxObject)

    { 0, 0, 0, 0 },
};

int wxGridEditorCreatedEvent_methodCount = sizeof(wxGridEditorCreatedEvent_methods)/sizeof(wxLuaBindMethod) - 1;

#endif  // wxLUA_USE_wxGrid && wxUSE_GRID



// ---------------------------------------------------------------------------
// ../modules/wxbind/src/wxadv_bind.cpp was generated by genwxbind.lua
//
// Any changes made to this file will be lost when the file is regenerated.
// ---------------------------------------------------------------------------


// ---------------------------------------------------------------------------
// wxLuaGetEventList_wxadv() is called to register events
// ---------------------------------------------------------------------------

wxLuaBindEvent* wxLuaGetEventList_wxadv(size_t &count)
{
    static wxLuaBindEvent eventList[] =
    {
#if wxLUA_USE_wxSashWindow && wxUSE_SASH
        { "wxEVT_CALCULATE_LAYOUT", WXLUA_GET_wxEventType_ptr(wxEVT_CALCULATE_LAYOUT), &wxluatype_wxCalculateLayoutEvent },
#endif // wxLUA_USE_wxSashWindow && wxUSE_SASH

#if wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL
        { "wxEVT_CALENDAR_DAY_CHANGED", WXLUA_GET_wxEventType_ptr(wxEVT_CALENDAR_DAY_CHANGED), &wxluatype_wxCalendarEvent },
        { "wxEVT_CALENDAR_DOUBLECLICKED", WXLUA_GET_wxEventType_ptr(wxEVT_CALENDAR_DOUBLECLICKED), &wxluatype_wxCalendarEvent },
        { "wxEVT_CALENDAR_MONTH_CHANGED", WXLUA_GET_wxEventType_ptr(wxEVT_CALENDAR_MONTH_CHANGED), &wxluatype_wxCalendarEvent },
        { "wxEVT_CALENDAR_SEL_CHANGED", WXLUA_GET_wxEventType_ptr(wxEVT_CALENDAR_SEL_CHANGED), &wxluatype_wxCalendarEvent },
        { "wxEVT_CALENDAR_WEEKDAY_CLICKED", WXLUA_GET_wxEventType_ptr(wxEVT_CALENDAR_WEEKDAY_CLICKED), &wxluatype_wxCalendarEvent },
        { "wxEVT_CALENDAR_YEAR_CHANGED", WXLUA_GET_wxEventType_ptr(wxEVT_CALENDAR_YEAR_CHANGED), &wxluatype_wxCalendarEvent },
#endif // wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL

#if wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl
        { "wxEVT_COMMAND_HYPERLINK", WXLUA_GET_wxEventType_ptr(wxEVT_COMMAND_HYPERLINK), &wxluatype_wxHyperlinkEvent },
#endif // wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl

#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
        { "wxEVT_DATAVIEW_CACHE_HINT", WXLUA_GET_wxEventType_ptr(wxEVT_DATAVIEW_CACHE_HINT), &wxluatype_wxDataViewEvent },
        { "wxEVT_DATAVIEW_COLUMN_HEADER_CLICK", WXLUA_GET_wxEventType_ptr(wxEVT_DATAVIEW_COLUMN_HEADER_CLICK), &wxluatype_wxDataViewEvent },
        { "wxEVT_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK", WXLUA_GET_wxEventType_ptr(wxEVT_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK), &wxluatype_wxDataViewEvent },
        { "wxEVT_DATAVIEW_COLUMN_REORDERED", WXLUA_GET_wxEventType_ptr(wxEVT_DATAVIEW_COLUMN_REORDERED), &wxluatype_wxDataViewEvent },
        { "wxEVT_DATAVIEW_COLUMN_SORTED", WXLUA_GET_wxEventType_ptr(wxEVT_DATAVIEW_COLUMN_SORTED), &wxluatype_wxDataViewEvent },
        { "wxEVT_DATAVIEW_ITEM_ACTIVATED", WXLUA_GET_wxEventType_ptr(wxEVT_DATAVIEW_ITEM_ACTIVATED), &wxluatype_wxDataViewEvent },
        { "wxEVT_DATAVIEW_ITEM_BEGIN_DRAG", WXLUA_GET_wxEventType_ptr(wxEVT_DATAVIEW_ITEM_BEGIN_DRAG), &wxluatype_wxDataViewEvent },
        { "wxEVT_DATAVIEW_ITEM_COLLAPSED", WXLUA_GET_wxEventType_ptr(wxEVT_DATAVIEW_ITEM_COLLAPSED), &wxluatype_wxDataViewEvent },
        { "wxEVT_DATAVIEW_ITEM_COLLAPSING", WXLUA_GET_wxEventType_ptr(wxEVT_DATAVIEW_ITEM_COLLAPSING), &wxluatype_wxDataViewEvent },
        { "wxEVT_DATAVIEW_ITEM_CONTEXT_MENU", WXLUA_GET_wxEventType_ptr(wxEVT_DATAVIEW_ITEM_CONTEXT_MENU), &wxluatype_wxDataViewEvent },
        { "wxEVT_DATAVIEW_ITEM_DROP", WXLUA_GET_wxEventType_ptr(wxEVT_DATAVIEW_ITEM_DROP), &wxluatype_wxDataViewEvent },
        { "wxEVT_DATAVIEW_ITEM_DROP_POSSIBLE", WXLUA_GET_wxEventType_ptr(wxEVT_DATAVIEW_ITEM_DROP_POSSIBLE), &wxluatype_wxDataViewEvent },
        { "wxEVT_DATAVIEW_ITEM_EDITING_DONE", WXLUA_GET_wxEventType_ptr(wxEVT_DATAVIEW_ITEM_EDITING_DONE), &wxluatype_wxDataViewEvent },
        { "wxEVT_DATAVIEW_ITEM_EDITING_STARTED", WXLUA_GET_wxEventType_ptr(wxEVT_DATAVIEW_ITEM_EDITING_STARTED), &wxluatype_wxDataViewEvent },
        { "wxEVT_DATAVIEW_ITEM_EXPANDED", WXLUA_GET_wxEventType_ptr(wxEVT_DATAVIEW_ITEM_EXPANDED), &wxluatype_wxDataViewEvent },
        { "wxEVT_DATAVIEW_ITEM_EXPANDING", WXLUA_GET_wxEventType_ptr(wxEVT_DATAVIEW_ITEM_EXPANDING), &wxluatype_wxDataViewEvent },
        { "wxEVT_DATAVIEW_ITEM_START_EDITING", WXLUA_GET_wxEventType_ptr(wxEVT_DATAVIEW_ITEM_START_EDITING), &wxluatype_wxDataViewEvent },
        { "wxEVT_DATAVIEW_ITEM_VALUE_CHANGED", WXLUA_GET_wxEventType_ptr(wxEVT_DATAVIEW_ITEM_VALUE_CHANGED), &wxluatype_wxDataViewEvent },
        { "wxEVT_DATAVIEW_SELECTION_CHANGED", WXLUA_GET_wxEventType_ptr(wxEVT_DATAVIEW_SELECTION_CHANGED), &wxluatype_wxDataViewEvent },
#endif // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl

#if wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL
        { "wxEVT_DATE_CHANGED", WXLUA_GET_wxEventType_ptr(wxEVT_DATE_CHANGED), &wxluatype_wxDateEvent },
#endif // wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL

#if wxLUA_USE_wxGrid && wxUSE_GRID
        { "wxEVT_GRID_CELL_BEGIN_DRAG", WXLUA_GET_wxEventType_ptr(wxEVT_GRID_CELL_BEGIN_DRAG), &wxluatype_wxGridEvent },
#endif // wxLUA_USE_wxGrid && wxUSE_GRID

#if (!wxCHECK_VERSION(3,0,0) || (defined(WXWIN_COMPATIBILITY_2_8) && WXWIN_COMPATIBILITY_2_8)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
        { "wxEVT_GRID_CELL_CHANGE", WXLUA_GET_wxEventType_ptr(wxEVT_GRID_CELL_CHANGE), &wxluatype_wxGridEvent },
#endif // (!wxCHECK_VERSION(3,0,0) || (defined(WXWIN_COMPATIBILITY_2_8) && WXWIN_COMPATIBILITY_2_8)) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if (wxCHECK_VERSION(3,0,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
        { "wxEVT_GRID_CELL_CHANGED", WXLUA_GET_wxEventType_ptr(wxEVT_GRID_CELL_CHANGED), &wxluatype_wxGridEvent },
        { "wxEVT_GRID_CELL_CHANGING", WXLUA_GET_wxEventType_ptr(wxEVT_GRID_CELL_CHANGING), &wxluatype_wxGridEvent },
#endif // (wxCHECK_VERSION(3,0,0)) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if wxLUA_USE_wxGrid && wxUSE_GRID
        { "wxEVT_GRID_CELL_LEFT_CLICK", WXLUA_GET_wxEventType_ptr(wxEVT_GRID_CELL_LEFT_CLICK), &wxluatype_wxGridEvent },
        { "wxEVT_GRID_CELL_LEFT_DCLICK", WXLUA_GET_wxEventType_ptr(wxEVT_GRID_CELL_LEFT_DCLICK), &wxluatype_wxGridEvent },
        { "wxEVT_GRID_CELL_RIGHT_CLICK", WXLUA_GET_wxEventType_ptr(wxEVT_GRID_CELL_RIGHT_CLICK), &wxluatype_wxGridEvent },
        { "wxEVT_GRID_CELL_RIGHT_DCLICK", WXLUA_GET_wxEventType_ptr(wxEVT_GRID_CELL_RIGHT_DCLICK), &wxluatype_wxGridEvent },
        { "wxEVT_GRID_COL_SIZE", WXLUA_GET_wxEventType_ptr(wxEVT_GRID_COL_SIZE), &wxluatype_wxGridSizeEvent },
        { "wxEVT_GRID_EDITOR_CREATED", WXLUA_GET_wxEventType_ptr(wxEVT_GRID_EDITOR_CREATED), &wxluatype_wxGridEditorCreatedEvent },
        { "wxEVT_GRID_EDITOR_HIDDEN", WXLUA_GET_wxEventType_ptr(wxEVT_GRID_EDITOR_HIDDEN), &wxluatype_wxGridEvent },
        { "wxEVT_GRID_EDITOR_SHOWN", WXLUA_GET_wxEventType_ptr(wxEVT_GRID_EDITOR_SHOWN), &wxluatype_wxGridEvent },
        { "wxEVT_GRID_LABEL_LEFT_CLICK", WXLUA_GET_wxEventType_ptr(wxEVT_GRID_LABEL_LEFT_CLICK), &wxluatype_wxGridEvent },
        { "wxEVT_GRID_LABEL_LEFT_DCLICK", WXLUA_GET_wxEventType_ptr(wxEVT_GRID_LABEL_LEFT_DCLICK), &wxluatype_wxGridEvent },
        { "wxEVT_GRID_LABEL_RIGHT_CLICK", WXLUA_GET_wxEventType_ptr(wxEVT_GRID_LABEL_RIGHT_CLICK), &wxluatype_wxGridEvent },
        { "wxEVT_GRID_LABEL_RIGHT_DCLICK", WXLUA_GET_wxEventType_ptr(wxEVT_GRID_LABEL_RIGHT_DCLICK), &wxluatype_wxGridEvent },
        { "wxEVT_GRID_RANGE_SELECT", WXLUA_GET_wxEventType_ptr(wxEVT_GRID_RANGE_SELECT), &wxluatype_wxGridRangeSelectEvent },
        { "wxEVT_GRID_ROW_SIZE", WXLUA_GET_wxEventType_ptr(wxEVT_GRID_ROW_SIZE), &wxluatype_wxGridSizeEvent },
        { "wxEVT_GRID_SELECT_CELL", WXLUA_GET_wxEventType_ptr(wxEVT_GRID_SELECT_CELL), &wxluatype_wxGridEvent },
#endif // wxLUA_USE_wxGrid && wxUSE_GRID

#if (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxCHECK_VERSION(3,0,0))
        { "wxEVT_HYPERLINK", WXLUA_GET_wxEventType_ptr(wxEVT_HYPERLINK), &wxluatype_wxHyperlinkEvent },
#endif // (wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl) && (wxCHECK_VERSION(3,0,0))

#if wxLUA_USE_wxJoystick && wxUSE_JOYSTICK
        { "wxEVT_JOY_BUTTON_DOWN", WXLUA_GET_wxEventType_ptr(wxEVT_JOY_BUTTON_DOWN), &wxluatype_wxJoystickEvent },
        { "wxEVT_JOY_BUTTON_UP", WXLUA_GET_wxEventType_ptr(wxEVT_JOY_BUTTON_UP), &wxluatype_wxJoystickEvent },
        { "wxEVT_JOY_MOVE", WXLUA_GET_wxEventType_ptr(wxEVT_JOY_MOVE), &wxluatype_wxJoystickEvent },
        { "wxEVT_JOY_ZMOVE", WXLUA_GET_wxEventType_ptr(wxEVT_JOY_ZMOVE), &wxluatype_wxJoystickEvent },
#endif // wxLUA_USE_wxJoystick && wxUSE_JOYSTICK

#if wxLUA_USE_wxSashWindow && wxUSE_SASH
        { "wxEVT_QUERY_LAYOUT_INFO", WXLUA_GET_wxEventType_ptr(wxEVT_QUERY_LAYOUT_INFO), &wxluatype_wxQueryLayoutInfoEvent },
        { "wxEVT_SASH_DRAGGED", WXLUA_GET_wxEventType_ptr(wxEVT_SASH_DRAGGED), &wxluatype_wxSashEvent },
#endif // wxLUA_USE_wxSashWindow && wxUSE_SASH

#if wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON )
        { "wxEVT_TASKBAR_LEFT_DCLICK", WXLUA_GET_wxEventType_ptr(wxEVT_TASKBAR_LEFT_DCLICK), &wxluatype_wxTaskBarIconEvent },
        { "wxEVT_TASKBAR_LEFT_DOWN", WXLUA_GET_wxEventType_ptr(wxEVT_TASKBAR_LEFT_DOWN), &wxluatype_wxTaskBarIconEvent },
        { "wxEVT_TASKBAR_LEFT_UP", WXLUA_GET_wxEventType_ptr(wxEVT_TASKBAR_LEFT_UP), &wxluatype_wxTaskBarIconEvent },
        { "wxEVT_TASKBAR_MOVE", WXLUA_GET_wxEventType_ptr(wxEVT_TASKBAR_MOVE), &wxluatype_wxTaskBarIconEvent },
        { "wxEVT_TASKBAR_RIGHT_DCLICK", WXLUA_GET_wxEventType_ptr(wxEVT_TASKBAR_RIGHT_DCLICK), &wxluatype_wxTaskBarIconEvent },
        { "wxEVT_TASKBAR_RIGHT_DOWN", WXLUA_GET_wxEventType_ptr(wxEVT_TASKBAR_RIGHT_DOWN), &wxluatype_wxTaskBarIconEvent },
        { "wxEVT_TASKBAR_RIGHT_UP", WXLUA_GET_wxEventType_ptr(wxEVT_TASKBAR_RIGHT_UP), &wxluatype_wxTaskBarIconEvent },
#endif // wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON )

#if wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL
        { "wxEVT_TIME_CHANGED", WXLUA_GET_wxEventType_ptr(wxEVT_TIME_CHANGED), &wxluatype_wxDateEvent },
#endif // wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL

#if wxUSE_WIZARDDLG && wxLUA_USE_wxWizard
        { "wxEVT_WIZARD_CANCEL", WXLUA_GET_wxEventType_ptr(wxEVT_WIZARD_CANCEL), &wxluatype_wxWizardEvent },
        { "wxEVT_WIZARD_FINISHED", WXLUA_GET_wxEventType_ptr(wxEVT_WIZARD_FINISHED), &wxluatype_wxWizardEvent },
        { "wxEVT_WIZARD_HELP", WXLUA_GET_wxEventType_ptr(wxEVT_WIZARD_HELP), &wxluatype_wxWizardEvent },
        { "wxEVT_WIZARD_PAGE_CHANGED", WXLUA_GET_wxEventType_ptr(wxEVT_WIZARD_PAGE_CHANGED), &wxluatype_wxWizardEvent },
        { "wxEVT_WIZARD_PAGE_CHANGING", WXLUA_GET_wxEventType_ptr(wxEVT_WIZARD_PAGE_CHANGING), &wxluatype_wxWizardEvent },
#endif // wxUSE_WIZARDDLG && wxLUA_USE_wxWizard


        { 0, 0, 0 },
    };
    count = sizeof(eventList)/sizeof(wxLuaBindEvent) - 1;
    return eventList;
}

// ---------------------------------------------------------------------------
// wxLuaGetDefineList_wxadv() is called to register #define and enum
// ---------------------------------------------------------------------------

wxLuaBindNumber* wxLuaGetDefineList_wxadv(size_t &count)
{
    static wxLuaBindNumber numberList[] =
    {
#if wxLUA_USE_wxGrid && wxUSE_GRID
        { "WXGRID_DEFAULT_COL_LABEL_HEIGHT", WXGRID_DEFAULT_COL_LABEL_HEIGHT },
        { "WXGRID_DEFAULT_COL_WIDTH", WXGRID_DEFAULT_COL_WIDTH },
        { "WXGRID_DEFAULT_NUMBER_COLS", WXGRID_DEFAULT_NUMBER_COLS },
        { "WXGRID_DEFAULT_NUMBER_ROWS", WXGRID_DEFAULT_NUMBER_ROWS },
        { "WXGRID_DEFAULT_ROW_HEIGHT", WXGRID_DEFAULT_ROW_HEIGHT },
        { "WXGRID_DEFAULT_ROW_LABEL_WIDTH", WXGRID_DEFAULT_ROW_LABEL_WIDTH },
        { "WXGRID_DEFAULT_SCROLLBAR_WIDTH", WXGRID_DEFAULT_SCROLLBAR_WIDTH },
        { "WXGRID_LABEL_EDGE_ZONE", WXGRID_LABEL_EDGE_ZONE },
        { "WXGRID_MIN_COL_WIDTH", WXGRID_MIN_COL_WIDTH },
        { "WXGRID_MIN_ROW_HEIGHT", WXGRID_MIN_ROW_HEIGHT },
#endif // wxLUA_USE_wxGrid && wxUSE_GRID

#if wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL
        { "wxAC_DEFAULT_STYLE", wxAC_DEFAULT_STYLE },
        { "wxAC_NO_AUTORESIZE", wxAC_NO_AUTORESIZE },
        { "wxANIMATION_TYPE_ANI", wxANIMATION_TYPE_ANI },
        { "wxANIMATION_TYPE_ANY", wxANIMATION_TYPE_ANY },
        { "wxANIMATION_TYPE_GIF", wxANIMATION_TYPE_GIF },
        { "wxANIMATION_TYPE_INVALID", wxANIMATION_TYPE_INVALID },
#endif // wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL

#if wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL
        { "wxCAL_BORDER_NONE", wxCAL_BORDER_NONE },
        { "wxCAL_BORDER_ROUND", wxCAL_BORDER_ROUND },
        { "wxCAL_BORDER_SQUARE", wxCAL_BORDER_SQUARE },
        { "wxCAL_HITTEST_DAY", wxCAL_HITTEST_DAY },
        { "wxCAL_HITTEST_DECMONTH", wxCAL_HITTEST_DECMONTH },
        { "wxCAL_HITTEST_HEADER", wxCAL_HITTEST_HEADER },
        { "wxCAL_HITTEST_INCMONTH", wxCAL_HITTEST_INCMONTH },
        { "wxCAL_HITTEST_NOWHERE", wxCAL_HITTEST_NOWHERE },
        { "wxCAL_HITTEST_SURROUNDING_WEEK", wxCAL_HITTEST_SURROUNDING_WEEK },
        { "wxCAL_MONDAY_FIRST", wxCAL_MONDAY_FIRST },
        { "wxCAL_NO_MONTH_CHANGE", wxCAL_NO_MONTH_CHANGE },
        { "wxCAL_NO_YEAR_CHANGE", wxCAL_NO_YEAR_CHANGE },
        { "wxCAL_SEQUENTIAL_MONTH_SELECTION", wxCAL_SEQUENTIAL_MONTH_SELECTION },
        { "wxCAL_SHOW_HOLIDAYS", wxCAL_SHOW_HOLIDAYS },
        { "wxCAL_SHOW_SURROUNDING_WEEKS", wxCAL_SHOW_SURROUNDING_WEEKS },
        { "wxCAL_SUNDAY_FIRST", wxCAL_SUNDAY_FIRST },
#endif // wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL

#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
        { "wxCOL_DEFAULT_FLAGS", wxCOL_DEFAULT_FLAGS },
        { "wxCOL_HIDDEN", wxCOL_HIDDEN },
        { "wxCOL_REORDERABLE", wxCOL_REORDERABLE },
        { "wxCOL_RESIZABLE", wxCOL_RESIZABLE },
        { "wxCOL_SORTABLE", wxCOL_SORTABLE },
        { "wxCOL_WIDTH_AUTOSIZE", wxCOL_WIDTH_AUTOSIZE },
        { "wxCOL_WIDTH_DEFAULT", wxCOL_WIDTH_DEFAULT },
        { "wxDATAVIEW_CELL_ACTIVATABLE", wxDATAVIEW_CELL_ACTIVATABLE },
        { "wxDATAVIEW_CELL_EDITABLE", wxDATAVIEW_CELL_EDITABLE },
        { "wxDATAVIEW_CELL_FOCUSED", wxDATAVIEW_CELL_FOCUSED },
        { "wxDATAVIEW_CELL_INERT", wxDATAVIEW_CELL_INERT },
        { "wxDATAVIEW_CELL_INSENSITIVE", wxDATAVIEW_CELL_INSENSITIVE },
        { "wxDATAVIEW_CELL_PRELIT", wxDATAVIEW_CELL_PRELIT },
        { "wxDATAVIEW_CELL_SELECTED", wxDATAVIEW_CELL_SELECTED },
        { "wxDATAVIEW_COL_HIDDEN", wxDATAVIEW_COL_HIDDEN },
        { "wxDATAVIEW_COL_REORDERABLE", wxDATAVIEW_COL_REORDERABLE },
        { "wxDATAVIEW_COL_RESIZABLE", wxDATAVIEW_COL_RESIZABLE },
        { "wxDATAVIEW_COL_SORTABLE", wxDATAVIEW_COL_SORTABLE },
        { "wxDVC_DEFAULT_MINWIDTH", wxDVC_DEFAULT_MINWIDTH },
        { "wxDVC_DEFAULT_RENDERER_SIZE", wxDVC_DEFAULT_RENDERER_SIZE },
        { "wxDVC_DEFAULT_WIDTH", wxDVC_DEFAULT_WIDTH },
        { "wxDVC_TOGGLE_DEFAULT_WIDTH", wxDVC_TOGGLE_DEFAULT_WIDTH },
        { "wxDVR_DEFAULT_ALIGNMENT", wxDVR_DEFAULT_ALIGNMENT },
        { "wxDV_HORIZ_RULES", wxDV_HORIZ_RULES },
        { "wxDV_MULTIPLE", wxDV_MULTIPLE },
        { "wxDV_NO_HEADER", wxDV_NO_HEADER },
        { "wxDV_ROW_LINES", wxDV_ROW_LINES },
        { "wxDV_SINGLE", wxDV_SINGLE },
        { "wxDV_VARIABLE_LINE_HEIGHT", wxDV_VARIABLE_LINE_HEIGHT },
        { "wxDV_VERT_RULES", wxDV_VERT_RULES },
#endif // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl

#if wxLUA_USE_wxGrid && wxUSE_GRID
        { "wxGRIDTABLE_NOTIFY_COLS_APPENDED", wxGRIDTABLE_NOTIFY_COLS_APPENDED },
        { "wxGRIDTABLE_NOTIFY_COLS_DELETED", wxGRIDTABLE_NOTIFY_COLS_DELETED },
        { "wxGRIDTABLE_NOTIFY_COLS_INSERTED", wxGRIDTABLE_NOTIFY_COLS_INSERTED },
        { "wxGRIDTABLE_NOTIFY_ROWS_APPENDED", wxGRIDTABLE_NOTIFY_ROWS_APPENDED },
        { "wxGRIDTABLE_NOTIFY_ROWS_DELETED", wxGRIDTABLE_NOTIFY_ROWS_DELETED },
        { "wxGRIDTABLE_NOTIFY_ROWS_INSERTED", wxGRIDTABLE_NOTIFY_ROWS_INSERTED },

        // REVIEW: [Randalphwa - 10-15-2022] According to docs, these never did anything
        // { "wxGRIDTABLE_REQUEST_VIEW_GET_VALUES", wxGRIDTABLE_REQUEST_VIEW_GET_VALUES },
        // { "wxGRIDTABLE_REQUEST_VIEW_SEND_VALUES", wxGRIDTABLE_REQUEST_VIEW_SEND_VALUES },
#endif // wxLUA_USE_wxGrid && wxUSE_GRID

#if (wxCHECK_VERSION(2,8,8)) && (wxLUA_USE_wxGrid && wxUSE_GRID)
        { "wxGRID_AUTOSIZE", wxGRID_AUTOSIZE },
#endif // (wxCHECK_VERSION(2,8,8)) && (wxLUA_USE_wxGrid && wxUSE_GRID)

#if wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl
        { "wxHL_ALIGN_CENTRE", wxHL_ALIGN_CENTRE },
        { "wxHL_ALIGN_LEFT", wxHL_ALIGN_LEFT },
        { "wxHL_ALIGN_RIGHT", wxHL_ALIGN_RIGHT },
        { "wxHL_CONTEXTMENU", wxHL_CONTEXTMENU },
        { "wxHL_DEFAULT_STYLE", wxHL_DEFAULT_STYLE },
#endif // wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl

#if wxLUA_USE_wxJoystick && wxUSE_JOYSTICK
        { "wxJOYSTICK1", wxJOYSTICK1 },
        { "wxJOYSTICK2", wxJOYSTICK2 },
        { "wxJOY_BUTTON1", wxJOY_BUTTON1 },
        { "wxJOY_BUTTON2", wxJOY_BUTTON2 },
        { "wxJOY_BUTTON3", wxJOY_BUTTON3 },
        { "wxJOY_BUTTON4", wxJOY_BUTTON4 },
        { "wxJOY_BUTTON_ANY", wxJOY_BUTTON_ANY },
#endif // wxLUA_USE_wxJoystick && wxUSE_JOYSTICK

#if wxLUA_USE_wxSashWindow && wxUSE_SASH
        { "wxLAYOUT_BOTTOM", wxLAYOUT_BOTTOM },
        { "wxLAYOUT_HORIZONTAL", wxLAYOUT_HORIZONTAL },
        { "wxLAYOUT_LEFT", wxLAYOUT_LEFT },
        { "wxLAYOUT_NONE", wxLAYOUT_NONE },
        { "wxLAYOUT_RIGHT", wxLAYOUT_RIGHT },
        { "wxLAYOUT_TOP", wxLAYOUT_TOP },
        { "wxLAYOUT_VERTICAL", wxLAYOUT_VERTICAL },
        { "wxSASH_BOTTOM", wxSASH_BOTTOM },
        { "wxSASH_LEFT", wxSASH_LEFT },
        { "wxSASH_NONE", wxSASH_NONE },
        { "wxSASH_RIGHT", wxSASH_RIGHT },
        { "wxSASH_STATUS_OK", wxSASH_STATUS_OK },
        { "wxSASH_STATUS_OUT_OF_RANGE", wxSASH_STATUS_OUT_OF_RANGE },
        { "wxSASH_TOP", wxSASH_TOP },
#endif // wxLUA_USE_wxSashWindow && wxUSE_SASH

#if (wxLUA_USE_wxWave) && (wxUSE_SOUND || (defined(__WXMSW__) && wxUSE_WAVE ))
        { "wxSOUND_ASYNC", wxSOUND_ASYNC },
        { "wxSOUND_LOOP", wxSOUND_LOOP },
        { "wxSOUND_SYNC", wxSOUND_SYNC },
#endif // (wxLUA_USE_wxWave) && (wxUSE_SOUND || (defined(__WXMSW__) && wxUSE_WAVE ))

#if wxLUA_USE_wxSplashScreen
        { "wxSPLASH_CENTRE_ON_PARENT", wxSPLASH_CENTRE_ON_PARENT },
        { "wxSPLASH_CENTRE_ON_SCREEN", wxSPLASH_CENTRE_ON_SCREEN },
        { "wxSPLASH_NO_CENTRE", wxSPLASH_NO_CENTRE },
        { "wxSPLASH_NO_TIMEOUT", wxSPLASH_NO_TIMEOUT },
        { "wxSPLASH_TIMEOUT", wxSPLASH_TIMEOUT },
#endif // wxLUA_USE_wxSplashScreen

#if wxLUA_USE_wxSashWindow && wxUSE_SASH
        { "wxSW_3D", wxSW_3D },
        { "wxSW_3DBORDER", wxSW_3DBORDER },
        { "wxSW_3DSASH", wxSW_3DSASH },
        { "wxSW_BORDER", wxSW_BORDER },
#endif // wxLUA_USE_wxSashWindow && wxUSE_SASH

#if wxUSE_WIZARDDLG && wxLUA_USE_wxWizard
        { "wxWIZARD_EX_HELPBUTTON", wxWIZARD_EX_HELPBUTTON },
#endif // wxUSE_WIZARDDLG && wxLUA_USE_wxWizard


        { 0, 0 },
    };
    count = sizeof(numberList)/sizeof(wxLuaBindNumber) - 1;
    return numberList;
}

// ---------------------------------------------------------------------------

// wxLuaGetStringList_wxadv() is called to register #define_string
// ---------------------------------------------------------------------------

wxLuaBindString* wxLuaGetStringList_wxadv(size_t &count)
{
    static wxLuaBindString stringList[] =
    {
#if wxLUA_USE_wxGrid && wxUSE_GRID
        { "wxGRID_VALUE_BOOL", NULL, wxGRID_VALUE_BOOL },
        { "wxGRID_VALUE_CHOICE", NULL, wxGRID_VALUE_CHOICE },
        { "wxGRID_VALUE_CHOICEINT", NULL, wxGRID_VALUE_CHOICEINT },
        { "wxGRID_VALUE_DATETIME", NULL, wxGRID_VALUE_DATETIME },
        { "wxGRID_VALUE_FLOAT", NULL, wxGRID_VALUE_FLOAT },
        { "wxGRID_VALUE_LONG", NULL, wxGRID_VALUE_LONG },
        { "wxGRID_VALUE_NUMBER", NULL, wxGRID_VALUE_NUMBER },
        { "wxGRID_VALUE_STRING", NULL, wxGRID_VALUE_STRING },
        { "wxGRID_VALUE_TEXT", NULL, wxGRID_VALUE_TEXT },
#endif // wxLUA_USE_wxGrid && wxUSE_GRID


        { 0, 0 },
    };
    count = sizeof(stringList)/sizeof(wxLuaBindString) - 1;
    return stringList;
}

// ---------------------------------------------------------------------------
// wxLuaGetObjectList_wxadv() is called to register object and pointer bindings
// ---------------------------------------------------------------------------

wxLuaBindObject* wxLuaGetObjectList_wxadv(size_t &count)
{
    static wxLuaBindObject objectList[] =
    {
#if wxLUA_USE_wxGrid && wxUSE_GRID
        { "wxGridNoCellCoords", &wxluatype_wxGridCellCoords, &wxGridNoCellCoords, NULL },
#endif // wxLUA_USE_wxGrid && wxUSE_GRID


        { 0, 0, 0, 0 },
    };
    count = sizeof(objectList)/sizeof(wxLuaBindObject) - 1;
    return objectList;
}

// ---------------------------------------------------------------------------
// wxLuaGetFunctionList_wxadv() is called to register global functions
// ---------------------------------------------------------------------------

#if wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog
static wxLuaArgType s_wxluatypeArray_wxLua_function_wxAboutBox[] = { &wxluatype_wxAboutDialogInfo, NULL };
// void wxAboutBox(const wxAboutDialogInfo& info);
static int LUACALL wxLua_function_wxAboutBox(lua_State *L)
{
    // const wxAboutDialogInfo info
    const wxAboutDialogInfo * info = (const wxAboutDialogInfo *)wxluaT_getuserdatatype(L, 1, wxluatype_wxAboutDialogInfo);
    // call wxAboutBox
    wxAboutBox(*info);

    return 0;
}
static wxLuaBindCFunc s_wxluafunc_wxLua_function_wxAboutBox[1] = {{ wxLua_function_wxAboutBox, WXLUAMETHOD_CFUNCTION, 1, 1, s_wxluatypeArray_wxLua_function_wxAboutBox }};

#endif // wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog

// ---------------------------------------------------------------------------
// wxLuaGetFunctionList_wxadv() is called to register global functions
// ---------------------------------------------------------------------------

wxLuaBindMethod* wxLuaGetFunctionList_wxadv(size_t &count)
{
    static wxLuaBindMethod functionList[] =
    {
#if wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog
        { "wxAboutBox", WXLUAMETHOD_CFUNCTION, s_wxluafunc_wxLua_function_wxAboutBox, 1, NULL },
#endif // wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog


        { 0, 0, 0, 0 },
    };
    count = sizeof(functionList)/sizeof(wxLuaBindMethod) - 1;
    return functionList;
}



// ---------------------------------------------------------------------------
// wxLuaGetClassList_wxadv() is called to register classes
// ---------------------------------------------------------------------------

static const char* wxluaclassname_wxAboutDialogInfo = "wxAboutDialogInfo";
static const char* wxluaclassname_wxAnimation = "wxAnimation";
static const char* wxluaclassname_wxAnimationCtrl = "wxAnimationCtrl";
static const char* wxluaclassname_wxBitmapComboBox = "wxBitmapComboBox";
static const char* wxluaclassname_wxCalculateLayoutEvent = "wxCalculateLayoutEvent";
static const char* wxluaclassname_wxCalendarCtrl = "wxCalendarCtrl";
static const char* wxluaclassname_wxCalendarDateAttr = "wxCalendarDateAttr";
static const char* wxluaclassname_wxCalendarEvent = "wxCalendarEvent";
static const char* wxluaclassname_wxClientDataContainer = "wxClientDataContainer";
static const char* wxluaclassname_wxCommandEvent = "wxCommandEvent";
static const char* wxluaclassname_wxControl = "wxControl";
static const char* wxluaclassname_wxDataViewBitmapRenderer = "wxDataViewBitmapRenderer";
static const char* wxluaclassname_wxDataViewCheckIconText = "wxDataViewCheckIconText";
static const char* wxluaclassname_wxDataViewChoiceByIndexRenderer = "wxDataViewChoiceByIndexRenderer";
static const char* wxluaclassname_wxDataViewChoiceRenderer = "wxDataViewChoiceRenderer";
static const char* wxluaclassname_wxDataViewColumn = "wxDataViewColumn";
static const char* wxluaclassname_wxDataViewColumnBase = "wxDataViewColumnBase";
static const char* wxluaclassname_wxDataViewCtrl = "wxDataViewCtrl";
static const char* wxluaclassname_wxDataViewCtrlBase = "wxDataViewCtrlBase";
static const char* wxluaclassname_wxDataViewCustomRendererBase = "wxDataViewCustomRendererBase";
static const char* wxluaclassname_wxDataViewEvent = "wxDataViewEvent";
static const char* wxluaclassname_wxDataViewIconText = "wxDataViewIconText";
static const char* wxluaclassname_wxDataViewIconTextRenderer = "wxDataViewIconTextRenderer";
static const char* wxluaclassname_wxDataViewIndexListModel = "wxDataViewIndexListModel";
static const char* wxluaclassname_wxDataViewItem = "wxDataViewItem";
static const char* wxluaclassname_wxDataViewItemArray = "wxDataViewItemArray";
static const char* wxluaclassname_wxDataViewItemAttr = "wxDataViewItemAttr";
static const char* wxluaclassname_wxDataViewListCtrl = "wxDataViewListCtrl";
static const char* wxluaclassname_wxDataViewListModel = "wxDataViewListModel";
static const char* wxluaclassname_wxDataViewListStore = "wxDataViewListStore";
static const char* wxluaclassname_wxDataViewListStoreLine = "wxDataViewListStoreLine";
static const char* wxluaclassname_wxDataViewModel = "wxDataViewModel";
static const char* wxluaclassname_wxDataViewModelNotifier = "wxDataViewModelNotifier";
static const char* wxluaclassname_wxDataViewProgressRenderer = "wxDataViewProgressRenderer";
static const char* wxluaclassname_wxDataViewRenderer = "wxDataViewRenderer";
static const char* wxluaclassname_wxDataViewRendererBase = "wxDataViewRendererBase";
static const char* wxluaclassname_wxDataViewSpinRenderer = "wxDataViewSpinRenderer";
static const char* wxluaclassname_wxDataViewTextRenderer = "wxDataViewTextRenderer";
static const char* wxluaclassname_wxDataViewToggleRenderer = "wxDataViewToggleRenderer";
static const char* wxluaclassname_wxDataViewTreeStore = "wxDataViewTreeStore";
static const char* wxluaclassname_wxDataViewTreeStoreContainerNode = "wxDataViewTreeStoreContainerNode";
static const char* wxluaclassname_wxDataViewTreeStoreNode = "wxDataViewTreeStoreNode";
static const char* wxluaclassname_wxDataViewValueAdjuster = "wxDataViewValueAdjuster";
static const char* wxluaclassname_wxDateEvent = "wxDateEvent";
static const char* wxluaclassname_wxDialog = "wxDialog";
static const char* wxluaclassname_wxEvent = "wxEvent";
static const char* wxluaclassname_wxEvtHandler = "wxEvtHandler";
static const char* wxluaclassname_wxFrame = "wxFrame";
static const char* wxluaclassname_wxGDIObject = "wxGDIObject";
static const char* wxluaclassname_wxGrid = "wxGrid";
static const char* wxluaclassname_wxGridCellAttr = "wxGridCellAttr";
static const char* wxluaclassname_wxGridCellAttrProvider = "wxGridCellAttrProvider";
static const char* wxluaclassname_wxGridCellAutoWrapStringEditor = "wxGridCellAutoWrapStringEditor";
static const char* wxluaclassname_wxGridCellAutoWrapStringRenderer = "wxGridCellAutoWrapStringRenderer";
static const char* wxluaclassname_wxGridCellBoolEditor = "wxGridCellBoolEditor";
static const char* wxluaclassname_wxGridCellBoolRenderer = "wxGridCellBoolRenderer";
static const char* wxluaclassname_wxGridCellChoiceEditor = "wxGridCellChoiceEditor";
static const char* wxluaclassname_wxGridCellCoords = "wxGridCellCoords";
static const char* wxluaclassname_wxGridCellCoordsArray = "wxGridCellCoordsArray";
static const char* wxluaclassname_wxGridCellDateTimeRenderer = "wxGridCellDateTimeRenderer";
static const char* wxluaclassname_wxGridCellEditor = "wxGridCellEditor";
static const char* wxluaclassname_wxGridCellEnumEditor = "wxGridCellEnumEditor";
static const char* wxluaclassname_wxGridCellEnumRenderer = "wxGridCellEnumRenderer";
static const char* wxluaclassname_wxGridCellFloatEditor = "wxGridCellFloatEditor";
static const char* wxluaclassname_wxGridCellFloatRenderer = "wxGridCellFloatRenderer";
static const char* wxluaclassname_wxGridCellNumberEditor = "wxGridCellNumberEditor";
static const char* wxluaclassname_wxGridCellNumberRenderer = "wxGridCellNumberRenderer";
static const char* wxluaclassname_wxGridCellRenderer = "wxGridCellRenderer";
static const char* wxluaclassname_wxGridCellStringRenderer = "wxGridCellStringRenderer";
static const char* wxluaclassname_wxGridCellTextEditor = "wxGridCellTextEditor";
static const char* wxluaclassname_wxGridCellWorker = "wxGridCellWorker";
static const char* wxluaclassname_wxGridEditorCreatedEvent = "wxGridEditorCreatedEvent";
static const char* wxluaclassname_wxGridEvent = "wxGridEvent";
static const char* wxluaclassname_wxGridRangeSelectEvent = "wxGridRangeSelectEvent";
static const char* wxluaclassname_wxGridSizeEvent = "wxGridSizeEvent";
static const char* wxluaclassname_wxGridStringTable = "wxGridStringTable";
static const char* wxluaclassname_wxGridTableBase = "wxGridTableBase";
static const char* wxluaclassname_wxGridTableMessage = "wxGridTableMessage";
static const char* wxluaclassname_wxHeaderColumn = "wxHeaderColumn";
static const char* wxluaclassname_wxHyperlinkCtrl = "wxHyperlinkCtrl";
static const char* wxluaclassname_wxHyperlinkEvent = "wxHyperlinkEvent";
static const char* wxluaclassname_wxJoystick = "wxJoystick";
static const char* wxluaclassname_wxJoystickEvent = "wxJoystickEvent";
static const char* wxluaclassname_wxLayoutAlgorithm = "wxLayoutAlgorithm";
static const char* wxluaclassname_wxLuaGridTableBase = "wxLuaGridTableBase";
static const char* wxluaclassname_wxNotifyEvent = "wxNotifyEvent";
static const char* wxluaclassname_wxObject = "wxObject";
static const char* wxluaclassname_wxPanel = "wxPanel";
static const char* wxluaclassname_wxQueryLayoutInfoEvent = "wxQueryLayoutInfoEvent";
static const char* wxluaclassname_wxSashEvent = "wxSashEvent";
static const char* wxluaclassname_wxSashLayoutWindow = "wxSashLayoutWindow";
static const char* wxluaclassname_wxSashWindow = "wxSashWindow";
static const char* wxluaclassname_wxScrolledWindow = "wxScrolledWindow";
static const char* wxluaclassname_wxSettableHeaderColumn = "wxSettableHeaderColumn";
static const char* wxluaclassname_wxSound = "wxSound";
static const char* wxluaclassname_wxSplashScreen = "wxSplashScreen";
static const char* wxluaclassname_wxSplashScreenWindow = "wxSplashScreenWindow";
static const char* wxluaclassname_wxTaskBarIcon = "wxTaskBarIcon";
static const char* wxluaclassname_wxTaskBarIconEvent = "wxTaskBarIconEvent";
static const char* wxluaclassname_wxWave = "wxWave";
static const char* wxluaclassname_wxWindow = "wxWindow";
static const char* wxluaclassname_wxWizard = "wxWizard";
static const char* wxluaclassname_wxWizardEvent = "wxWizardEvent";
static const char* wxluaclassname_wxWizardPage = "wxWizardPage";
static const char* wxluaclassname_wxWizardPageSimple = "wxWizardPageSimple";

static const char* wxluabaseclassnames_wxAnimation[] = { wxluaclassname_wxGDIObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxAnimation[] = { NULL };
static const char* wxluabaseclassnames_wxAnimationCtrl[] = { wxluaclassname_wxControl, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxAnimationCtrl[] = { NULL };
static const char* wxluabaseclassnames_wxBitmapComboBox[] = { wxluaclassname_wxControl, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxBitmapComboBox[] = { NULL };
static const char* wxluabaseclassnames_wxCalculateLayoutEvent[] = { wxluaclassname_wxEvent, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxCalculateLayoutEvent[] = { NULL };
static const char* wxluabaseclassnames_wxCalendarCtrl[] = { wxluaclassname_wxControl, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxCalendarCtrl[] = { NULL };
static const char* wxluabaseclassnames_wxCalendarEvent[] = { wxluaclassname_wxDateEvent, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxCalendarEvent[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewBitmapRenderer[] = { wxluaclassname_wxDataViewRenderer, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewBitmapRenderer[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewCheckIconText[] = { wxluaclassname_wxDataViewIconText, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewCheckIconText[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewChoiceByIndexRenderer[] = { wxluaclassname_wxDataViewChoiceRenderer, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewChoiceByIndexRenderer[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewChoiceRenderer[] = { wxluaclassname_wxDataViewRenderer, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewChoiceRenderer[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewColumn[] = { wxluaclassname_wxDataViewColumnBase, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewColumn[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewColumnBase[] = { wxluaclassname_wxSettableHeaderColumn, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewColumnBase[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewCtrl[] = { wxluaclassname_wxDataViewCtrlBase, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewCtrl[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewCtrlBase[] = { wxluaclassname_wxControl, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewCtrlBase[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewCustomRendererBase[] = { wxluaclassname_wxDataViewRendererBase, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewCustomRendererBase[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewEvent[] = { wxluaclassname_wxNotifyEvent, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewEvent[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewIconText[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewIconText[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewIconTextRenderer[] = { wxluaclassname_wxDataViewTextRenderer, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewIconTextRenderer[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewIndexListModel[] = { wxluaclassname_wxDataViewListModel, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewIndexListModel[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewListCtrl[] = { wxluaclassname_wxDataViewCtrl, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewListCtrl[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewListModel[] = { wxluaclassname_wxDataViewModel, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewListModel[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewListStore[] = { wxluaclassname_wxDataViewIndexListModel, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewListStore[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewProgressRenderer[] = { wxluaclassname_wxDataViewRenderer, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewProgressRenderer[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewRenderer[] = { wxluaclassname_wxDataViewCustomRendererBase, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewRenderer[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewRendererBase[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewRendererBase[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewSpinRenderer[] = { wxluaclassname_wxDataViewRenderer, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewSpinRenderer[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewTextRenderer[] = { wxluaclassname_wxDataViewRenderer, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewTextRenderer[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewToggleRenderer[] = { wxluaclassname_wxDataViewRenderer, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewToggleRenderer[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewTreeStore[] = { wxluaclassname_wxDataViewModel, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewTreeStore[] = { NULL };
static const char* wxluabaseclassnames_wxDataViewTreeStoreContainerNode[] = { wxluaclassname_wxDataViewTreeStoreNode, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDataViewTreeStoreContainerNode[] = { NULL };
static const char* wxluabaseclassnames_wxDateEvent[] = { wxluaclassname_wxCommandEvent, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxDateEvent[] = { NULL };
static const char* wxluabaseclassnames_wxGrid[] = { wxluaclassname_wxScrolledWindow, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGrid[] = { NULL };
static const char* wxluabaseclassnames_wxGridCellAttr[] = { wxluaclassname_wxClientDataContainer, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridCellAttr[] = { NULL };
static const char* wxluabaseclassnames_wxGridCellAttrProvider[] = { wxluaclassname_wxClientDataContainer, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridCellAttrProvider[] = { NULL };
static const char* wxluabaseclassnames_wxGridCellAutoWrapStringEditor[] = { wxluaclassname_wxGridCellTextEditor, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridCellAutoWrapStringEditor[] = { NULL };
static const char* wxluabaseclassnames_wxGridCellAutoWrapStringRenderer[] = { wxluaclassname_wxGridCellStringRenderer, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridCellAutoWrapStringRenderer[] = { NULL };
static const char* wxluabaseclassnames_wxGridCellBoolEditor[] = { wxluaclassname_wxGridCellEditor, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridCellBoolEditor[] = { NULL };
static const char* wxluabaseclassnames_wxGridCellBoolRenderer[] = { wxluaclassname_wxGridCellRenderer, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridCellBoolRenderer[] = { NULL };
static const char* wxluabaseclassnames_wxGridCellChoiceEditor[] = { wxluaclassname_wxGridCellEditor, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridCellChoiceEditor[] = { NULL };
static const char* wxluabaseclassnames_wxGridCellDateTimeRenderer[] = { wxluaclassname_wxGridCellStringRenderer, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridCellDateTimeRenderer[] = { NULL };
static const char* wxluabaseclassnames_wxGridCellEditor[] = { wxluaclassname_wxGridCellWorker, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridCellEditor[] = { NULL };
static const char* wxluabaseclassnames_wxGridCellEnumEditor[] = { wxluaclassname_wxGridCellChoiceEditor, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridCellEnumEditor[] = { NULL };
static const char* wxluabaseclassnames_wxGridCellEnumRenderer[] = { wxluaclassname_wxGridCellStringRenderer, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridCellEnumRenderer[] = { NULL };
static const char* wxluabaseclassnames_wxGridCellFloatEditor[] = { wxluaclassname_wxGridCellTextEditor, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridCellFloatEditor[] = { NULL };
static const char* wxluabaseclassnames_wxGridCellFloatRenderer[] = { wxluaclassname_wxGridCellStringRenderer, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridCellFloatRenderer[] = { NULL };
static const char* wxluabaseclassnames_wxGridCellNumberEditor[] = { wxluaclassname_wxGridCellTextEditor, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridCellNumberEditor[] = { NULL };
static const char* wxluabaseclassnames_wxGridCellNumberRenderer[] = { wxluaclassname_wxGridCellStringRenderer, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridCellNumberRenderer[] = { NULL };
static const char* wxluabaseclassnames_wxGridCellRenderer[] = { wxluaclassname_wxGridCellWorker, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridCellRenderer[] = { NULL };
static const char* wxluabaseclassnames_wxGridCellStringRenderer[] = { wxluaclassname_wxGridCellRenderer, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridCellStringRenderer[] = { NULL };
static const char* wxluabaseclassnames_wxGridCellTextEditor[] = { wxluaclassname_wxGridCellEditor, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridCellTextEditor[] = { NULL };
static const char* wxluabaseclassnames_wxGridCellWorker[] = { wxluaclassname_wxClientDataContainer, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridCellWorker[] = { NULL };
static const char* wxluabaseclassnames_wxGridEditorCreatedEvent[] = { wxluaclassname_wxCommandEvent, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridEditorCreatedEvent[] = { NULL };
static const char* wxluabaseclassnames_wxGridEvent[] = { wxluaclassname_wxNotifyEvent, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridEvent[] = { NULL };
static const char* wxluabaseclassnames_wxGridRangeSelectEvent[] = { wxluaclassname_wxNotifyEvent, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridRangeSelectEvent[] = { NULL };
static const char* wxluabaseclassnames_wxGridSizeEvent[] = { wxluaclassname_wxNotifyEvent, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridSizeEvent[] = { NULL };
static const char* wxluabaseclassnames_wxGridStringTable[] = { wxluaclassname_wxGridTableBase, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridStringTable[] = { NULL };
static const char* wxluabaseclassnames_wxGridTableBase[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxGridTableBase[] = { NULL };
static const char* wxluabaseclassnames_wxHyperlinkCtrl[] = { wxluaclassname_wxControl, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxHyperlinkCtrl[] = { NULL };
static const char* wxluabaseclassnames_wxHyperlinkEvent[] = { wxluaclassname_wxCommandEvent, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxHyperlinkEvent[] = { NULL };
static const char* wxluabaseclassnames_wxJoystick[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxJoystick[] = { NULL };
static const char* wxluabaseclassnames_wxJoystickEvent[] = { wxluaclassname_wxEvent, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxJoystickEvent[] = { NULL };
static const char* wxluabaseclassnames_wxLayoutAlgorithm[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxLayoutAlgorithm[] = { NULL };
static const char* wxluabaseclassnames_wxLuaGridTableBase[] = { wxluaclassname_wxGridTableBase, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxLuaGridTableBase[] = { NULL };
static const char* wxluabaseclassnames_wxQueryLayoutInfoEvent[] = { wxluaclassname_wxEvent, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxQueryLayoutInfoEvent[] = { NULL };
static const char* wxluabaseclassnames_wxSashEvent[] = { wxluaclassname_wxCommandEvent, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxSashEvent[] = { NULL };
static const char* wxluabaseclassnames_wxSashLayoutWindow[] = { wxluaclassname_wxSashWindow, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxSashLayoutWindow[] = { NULL };
static const char* wxluabaseclassnames_wxSashWindow[] = { wxluaclassname_wxWindow, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxSashWindow[] = { NULL };
static const char* wxluabaseclassnames_wxSettableHeaderColumn[] = { wxluaclassname_wxHeaderColumn, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxSettableHeaderColumn[] = { NULL };
static const char* wxluabaseclassnames_wxSound[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxSound[] = { NULL };
static const char* wxluabaseclassnames_wxSplashScreen[] = { wxluaclassname_wxFrame, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxSplashScreen[] = { NULL };
static const char* wxluabaseclassnames_wxSplashScreenWindow[] = { wxluaclassname_wxWindow, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxSplashScreenWindow[] = { NULL };
static const char* wxluabaseclassnames_wxTaskBarIcon[] = { wxluaclassname_wxEvtHandler, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxTaskBarIcon[] = { NULL };
static const char* wxluabaseclassnames_wxTaskBarIconEvent[] = { wxluaclassname_wxEvent, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxTaskBarIconEvent[] = { NULL };
static const char* wxluabaseclassnames_wxWave[] = { wxluaclassname_wxObject, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxWave[] = { NULL };
static const char* wxluabaseclassnames_wxWizard[] = { wxluaclassname_wxDialog, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxWizard[] = { NULL };
static const char* wxluabaseclassnames_wxWizardEvent[] = { wxluaclassname_wxNotifyEvent, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxWizardEvent[] = { NULL };
static const char* wxluabaseclassnames_wxWizardPage[] = { wxluaclassname_wxPanel, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxWizardPage[] = { NULL };
static const char* wxluabaseclassnames_wxWizardPageSimple[] = { wxluaclassname_wxWizardPage, NULL };
static wxLuaBindClass* wxluabaseclassbinds_wxWizardPageSimple[] = { NULL };
// ---------------------------------------------------------------------------
// Lua Tag Method Values and Tables for each Class
// ---------------------------------------------------------------------------

#if (defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave)
    extern wxLuaBindMethod wxWave_methods[];
    extern int wxWave_methodCount;
    extern void wxLua_wxWave_delete_function(void** p);
#endif // (defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave)

#if (wxCHECK_VERSION(2,6,0) && wxUSE_SOUND) && (wxLUA_USE_wxWave)
    extern wxLuaBindMethod wxSound_methods[];
    extern int wxSound_methodCount;
    extern void wxLua_wxSound_delete_function(void** p);
#endif // (wxCHECK_VERSION(2,6,0) && wxUSE_SOUND) && (wxLUA_USE_wxWave)

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_SPINCTRL)
    extern wxLuaBindMethod wxDataViewSpinRenderer_methods[];
    extern int wxDataViewSpinRenderer_methodCount;
    extern void wxLua_wxDataViewSpinRenderer_delete_function(void** p);
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_SPINCTRL)

#if wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL
    extern wxLuaBindMethod wxAnimation_methods[];
    extern int wxAnimation_methodCount;
    extern void wxLua_wxAnimation_delete_function(void** p);
    extern wxLuaBindMethod wxAnimationCtrl_methods[];
    extern int wxAnimationCtrl_methodCount;
    extern void wxLua_wxAnimationCtrl_delete_function(void** p);
#endif // wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL

#if wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog
    extern wxLuaBindMethod wxAboutDialogInfo_methods[];
    extern int wxAboutDialogInfo_methodCount;
    extern void wxLua_wxAboutDialogInfo_delete_function(void** p);
#endif // wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog

#if wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl
    extern wxLuaBindMethod wxHyperlinkCtrl_methods[];
    extern int wxHyperlinkCtrl_methodCount;
    extern void wxLua_wxHyperlinkCtrl_delete_function(void** p);
    extern wxLuaBindMethod wxHyperlinkEvent_methods[];
    extern int wxHyperlinkEvent_methodCount;
    extern void wxLua_wxHyperlinkEvent_delete_function(void** p);
#endif // wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl

#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
    extern wxLuaBindMethod wxDataViewBitmapRenderer_methods[];
    extern int wxDataViewBitmapRenderer_methodCount;
    extern void wxLua_wxDataViewBitmapRenderer_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewCheckIconText_methods[];
    extern int wxDataViewCheckIconText_methodCount;
    extern void wxLua_wxDataViewCheckIconText_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewChoiceByIndexRenderer_methods[];
    extern int wxDataViewChoiceByIndexRenderer_methodCount;
    extern void wxLua_wxDataViewChoiceByIndexRenderer_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewChoiceRenderer_methods[];
    extern int wxDataViewChoiceRenderer_methodCount;
    extern void wxLua_wxDataViewChoiceRenderer_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewColumn_methods[];
    extern int wxDataViewColumn_methodCount;
    extern void wxLua_wxDataViewColumn_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewColumnBase_methods[];
    extern int wxDataViewColumnBase_methodCount;
    extern void wxLua_wxDataViewColumnBase_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewCtrl_methods[];
    extern int wxDataViewCtrl_methodCount;
    extern void wxLua_wxDataViewCtrl_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewCtrlBase_methods[];
    extern int wxDataViewCtrlBase_methodCount;
    extern void wxLua_wxDataViewCtrlBase_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewCustomRendererBase_methods[];
    extern int wxDataViewCustomRendererBase_methodCount;
    extern void wxLua_wxDataViewCustomRendererBase_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewEvent_methods[];
    extern int wxDataViewEvent_methodCount;
    extern void wxLua_wxDataViewEvent_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewIconText_methods[];
    extern int wxDataViewIconText_methodCount;
    extern void wxLua_wxDataViewIconText_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewIconTextRenderer_methods[];
    extern int wxDataViewIconTextRenderer_methodCount;
    extern void wxLua_wxDataViewIconTextRenderer_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewIndexListModel_methods[];
    extern int wxDataViewIndexListModel_methodCount;
    extern void wxLua_wxDataViewIndexListModel_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewItem_methods[];
    extern int wxDataViewItem_methodCount;
    extern void wxLua_wxDataViewItem_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewItemArray_methods[];
    extern int wxDataViewItemArray_methodCount;
    extern void wxLua_wxDataViewItemArray_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewItemAttr_methods[];
    extern int wxDataViewItemAttr_methodCount;
    extern void wxLua_wxDataViewItemAttr_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewListCtrl_methods[];
    extern int wxDataViewListCtrl_methodCount;
    extern void wxLua_wxDataViewListCtrl_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewListModel_methods[];
    extern int wxDataViewListModel_methodCount;
    extern void wxLua_wxDataViewListModel_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewListStore_methods[];
    extern int wxDataViewListStore_methodCount;
    extern void wxLua_wxDataViewListStore_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewListStoreLine_methods[];
    extern int wxDataViewListStoreLine_methodCount;
    extern void wxLua_wxDataViewListStoreLine_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewModel_methods[];
    extern int wxDataViewModel_methodCount;
    extern void wxLua_wxDataViewModel_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewModelNotifier_methods[];
    extern int wxDataViewModelNotifier_methodCount;
    extern void wxLua_wxDataViewModelNotifier_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewProgressRenderer_methods[];
    extern int wxDataViewProgressRenderer_methodCount;
    extern void wxLua_wxDataViewProgressRenderer_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewRenderer_methods[];
    extern int wxDataViewRenderer_methodCount;
    extern void wxLua_wxDataViewRenderer_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewRendererBase_methods[];
    extern int wxDataViewRendererBase_methodCount;
    extern void wxLua_wxDataViewRendererBase_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewTextRenderer_methods[];
    extern int wxDataViewTextRenderer_methodCount;
    extern void wxLua_wxDataViewTextRenderer_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewToggleRenderer_methods[];
    extern int wxDataViewToggleRenderer_methodCount;
    extern void wxLua_wxDataViewToggleRenderer_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewTreeStore_methods[];
    extern int wxDataViewTreeStore_methodCount;
    extern void wxLua_wxDataViewTreeStore_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewTreeStoreContainerNode_methods[];
    extern int wxDataViewTreeStoreContainerNode_methodCount;
    extern void wxLua_wxDataViewTreeStoreContainerNode_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewTreeStoreNode_methods[];
    extern int wxDataViewTreeStoreNode_methodCount;
    extern void wxLua_wxDataViewTreeStoreNode_delete_function(void** p);
    extern wxLuaBindMethod wxDataViewValueAdjuster_methods[];
    extern int wxDataViewValueAdjuster_methodCount;
    extern void wxLua_wxDataViewValueAdjuster_delete_function(void** p);
    extern wxLuaBindMethod wxHeaderColumn_methods[];
    extern int wxHeaderColumn_methodCount;
    extern void wxLua_wxHeaderColumn_delete_function(void** p);
    extern wxLuaBindMethod wxSettableHeaderColumn_methods[];
    extern int wxSettableHeaderColumn_methodCount;
    extern void wxLua_wxSettableHeaderColumn_delete_function(void** p);
#endif // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl

#if wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX
    extern wxLuaBindMethod wxBitmapComboBox_methods[];
    extern int wxBitmapComboBox_methodCount;
    extern void wxLua_wxBitmapComboBox_delete_function(void** p);
#endif // wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX

#if wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL
    extern wxLuaBindMethod wxCalendarCtrl_methods[];
    extern int wxCalendarCtrl_methodCount;
    extern void wxLua_wxCalendarCtrl_delete_function(void** p);
    extern wxLuaBindMethod wxCalendarDateAttr_methods[];
    extern int wxCalendarDateAttr_methodCount;
    extern void wxLua_wxCalendarDateAttr_delete_function(void** p);
    extern wxLuaBindMethod wxCalendarEvent_methods[];
    extern int wxCalendarEvent_methodCount;
    extern void wxLua_wxCalendarEvent_delete_function(void** p);
    extern wxLuaBindMethod wxDateEvent_methods[];
    extern int wxDateEvent_methodCount;
    extern void wxLua_wxDateEvent_delete_function(void** p);
#endif // wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL

#if wxLUA_USE_wxGrid && wxUSE_GRID
    extern wxLuaBindMethod wxGrid_methods[];
    extern int wxGrid_methodCount;
    extern wxLuaBindNumber wxGrid_enums[];
    extern int wxGrid_enumCount;
    extern void wxLua_wxGrid_delete_function(void** p);
    extern wxLuaBindMethod wxGridCellAttr_methods[];
    extern int wxGridCellAttr_methodCount;
    extern wxLuaBindNumber wxGridCellAttr_enums[];
    extern int wxGridCellAttr_enumCount;
    extern void wxLua_wxGridCellAttr_delete_function(void** p);
    extern wxLuaBindMethod wxGridCellAttrProvider_methods[];
    extern int wxGridCellAttrProvider_methodCount;
    extern void wxLua_wxGridCellAttrProvider_delete_function(void** p);
    extern wxLuaBindMethod wxGridCellAutoWrapStringEditor_methods[];
    extern int wxGridCellAutoWrapStringEditor_methodCount;
    extern void wxLua_wxGridCellAutoWrapStringEditor_delete_function(void** p);
    extern wxLuaBindMethod wxGridCellAutoWrapStringRenderer_methods[];
    extern int wxGridCellAutoWrapStringRenderer_methodCount;
    extern void wxLua_wxGridCellAutoWrapStringRenderer_delete_function(void** p);
    extern wxLuaBindMethod wxGridCellBoolEditor_methods[];
    extern int wxGridCellBoolEditor_methodCount;
    extern void wxLua_wxGridCellBoolEditor_delete_function(void** p);
    extern wxLuaBindMethod wxGridCellBoolRenderer_methods[];
    extern int wxGridCellBoolRenderer_methodCount;
    extern void wxLua_wxGridCellBoolRenderer_delete_function(void** p);
    extern wxLuaBindMethod wxGridCellChoiceEditor_methods[];
    extern int wxGridCellChoiceEditor_methodCount;
    extern void wxLua_wxGridCellChoiceEditor_delete_function(void** p);
    extern wxLuaBindMethod wxGridCellCoords_methods[];
    extern int wxGridCellCoords_methodCount;
    extern void wxLua_wxGridCellCoords_delete_function(void** p);
    extern wxLuaBindMethod wxGridCellCoordsArray_methods[];
    extern int wxGridCellCoordsArray_methodCount;
    extern void wxLua_wxGridCellCoordsArray_delete_function(void** p);
    extern wxLuaBindMethod wxGridCellDateTimeRenderer_methods[];
    extern int wxGridCellDateTimeRenderer_methodCount;
    extern void wxLua_wxGridCellDateTimeRenderer_delete_function(void** p);
    extern wxLuaBindMethod wxGridCellEditor_methods[];
    extern int wxGridCellEditor_methodCount;
    extern void wxLua_wxGridCellEditor_delete_function(void** p);
    extern wxLuaBindMethod wxGridCellEnumEditor_methods[];
    extern int wxGridCellEnumEditor_methodCount;
    extern void wxLua_wxGridCellEnumEditor_delete_function(void** p);
    extern wxLuaBindMethod wxGridCellEnumRenderer_methods[];
    extern int wxGridCellEnumRenderer_methodCount;
    extern void wxLua_wxGridCellEnumRenderer_delete_function(void** p);
    extern wxLuaBindMethod wxGridCellFloatEditor_methods[];
    extern int wxGridCellFloatEditor_methodCount;
    extern void wxLua_wxGridCellFloatEditor_delete_function(void** p);
    extern wxLuaBindMethod wxGridCellFloatRenderer_methods[];
    extern int wxGridCellFloatRenderer_methodCount;
    extern void wxLua_wxGridCellFloatRenderer_delete_function(void** p);
    extern wxLuaBindMethod wxGridCellNumberEditor_methods[];
    extern int wxGridCellNumberEditor_methodCount;
    extern void wxLua_wxGridCellNumberEditor_delete_function(void** p);
    extern wxLuaBindMethod wxGridCellNumberRenderer_methods[];
    extern int wxGridCellNumberRenderer_methodCount;
    extern void wxLua_wxGridCellNumberRenderer_delete_function(void** p);
    extern wxLuaBindMethod wxGridCellRenderer_methods[];
    extern int wxGridCellRenderer_methodCount;
    extern void wxLua_wxGridCellRenderer_delete_function(void** p);
    extern wxLuaBindMethod wxGridCellStringRenderer_methods[];
    extern int wxGridCellStringRenderer_methodCount;
    extern void wxLua_wxGridCellStringRenderer_delete_function(void** p);
    extern wxLuaBindMethod wxGridCellTextEditor_methods[];
    extern int wxGridCellTextEditor_methodCount;
    extern void wxLua_wxGridCellTextEditor_delete_function(void** p);
    extern wxLuaBindMethod wxGridCellWorker_methods[];
    extern int wxGridCellWorker_methodCount;
    extern void wxLua_wxGridCellWorker_delete_function(void** p);
    extern wxLuaBindMethod wxGridEditorCreatedEvent_methods[];
    extern int wxGridEditorCreatedEvent_methodCount;
    extern void wxLua_wxGridEditorCreatedEvent_delete_function(void** p);
    extern wxLuaBindMethod wxGridEvent_methods[];
    extern int wxGridEvent_methodCount;
    extern void wxLua_wxGridEvent_delete_function(void** p);
    extern wxLuaBindMethod wxGridRangeSelectEvent_methods[];
    extern int wxGridRangeSelectEvent_methodCount;
    extern void wxLua_wxGridRangeSelectEvent_delete_function(void** p);
    extern wxLuaBindMethod wxGridSizeEvent_methods[];
    extern int wxGridSizeEvent_methodCount;
    extern void wxLua_wxGridSizeEvent_delete_function(void** p);
    extern wxLuaBindMethod wxGridStringTable_methods[];
    extern int wxGridStringTable_methodCount;
    extern void wxLua_wxGridStringTable_delete_function(void** p);
    extern wxLuaBindMethod wxGridTableBase_methods[];
    extern int wxGridTableBase_methodCount;
    extern void wxLua_wxGridTableBase_delete_function(void** p);
    extern wxLuaBindMethod wxGridTableMessage_methods[];
    extern int wxGridTableMessage_methodCount;
    extern void wxLua_wxGridTableMessage_delete_function(void** p);
    extern wxLuaBindMethod wxLuaGridTableBase_methods[];
    extern int wxLuaGridTableBase_methodCount;
    extern void wxLua_wxLuaGridTableBase_delete_function(void** p);
#endif // wxLUA_USE_wxGrid && wxUSE_GRID

#if wxLUA_USE_wxJoystick && wxUSE_JOYSTICK
    extern wxLuaBindMethod wxJoystick_methods[];
    extern int wxJoystick_methodCount;
    extern void wxLua_wxJoystick_delete_function(void** p);
    extern wxLuaBindMethod wxJoystickEvent_methods[];
    extern int wxJoystickEvent_methodCount;
    extern void wxLua_wxJoystickEvent_delete_function(void** p);
#endif // wxLUA_USE_wxJoystick && wxUSE_JOYSTICK

#if wxLUA_USE_wxSashWindow && wxUSE_SASH
    extern wxLuaBindMethod wxCalculateLayoutEvent_methods[];
    extern int wxCalculateLayoutEvent_methodCount;
    extern void wxLua_wxCalculateLayoutEvent_delete_function(void** p);
    extern wxLuaBindMethod wxLayoutAlgorithm_methods[];
    extern int wxLayoutAlgorithm_methodCount;
    extern void wxLua_wxLayoutAlgorithm_delete_function(void** p);
    extern wxLuaBindMethod wxQueryLayoutInfoEvent_methods[];
    extern int wxQueryLayoutInfoEvent_methodCount;
    extern void wxLua_wxQueryLayoutInfoEvent_delete_function(void** p);
    extern wxLuaBindMethod wxSashEvent_methods[];
    extern int wxSashEvent_methodCount;
    extern void wxLua_wxSashEvent_delete_function(void** p);
    extern wxLuaBindMethod wxSashLayoutWindow_methods[];
    extern int wxSashLayoutWindow_methodCount;
    extern void wxLua_wxSashLayoutWindow_delete_function(void** p);
    extern wxLuaBindMethod wxSashWindow_methods[];
    extern int wxSashWindow_methodCount;
    extern void wxLua_wxSashWindow_delete_function(void** p);
#endif // wxLUA_USE_wxSashWindow && wxUSE_SASH

#if wxLUA_USE_wxSplashScreen
    extern wxLuaBindMethod wxSplashScreen_methods[];
    extern int wxSplashScreen_methodCount;
    extern void wxLua_wxSplashScreen_delete_function(void** p);
    extern wxLuaBindMethod wxSplashScreenWindow_methods[];
    extern int wxSplashScreenWindow_methodCount;
    extern void wxLua_wxSplashScreenWindow_delete_function(void** p);
#endif // wxLUA_USE_wxSplashScreen

#if wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON )
    extern wxLuaBindMethod wxTaskBarIcon_methods[];
    extern int wxTaskBarIcon_methodCount;
    extern void wxLua_wxTaskBarIcon_delete_function(void** p);
    extern wxLuaBindMethod wxTaskBarIconEvent_methods[];
    extern int wxTaskBarIconEvent_methodCount;
    extern void wxLua_wxTaskBarIconEvent_delete_function(void** p);
#endif // wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON )

#if wxUSE_WIZARDDLG && wxLUA_USE_wxWizard
    extern wxLuaBindMethod wxWizard_methods[];
    extern int wxWizard_methodCount;
    extern void wxLua_wxWizard_delete_function(void** p);
    extern wxLuaBindMethod wxWizardEvent_methods[];
    extern int wxWizardEvent_methodCount;
    extern void wxLua_wxWizardEvent_delete_function(void** p);
    extern wxLuaBindMethod wxWizardPage_methods[];
    extern int wxWizardPage_methodCount;
    extern void wxLua_wxWizardPage_delete_function(void** p);
    extern wxLuaBindMethod wxWizardPageSimple_methods[];
    extern int wxWizardPageSimple_methodCount;
    extern void wxLua_wxWizardPageSimple_delete_function(void** p);
#endif // wxUSE_WIZARDDLG && wxLUA_USE_wxWizard




wxLuaBindClass* wxLuaGetClassList_wxadv(size_t &count)
{
    static wxLuaBindClass classList[] =
    {
#if wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog
        { wxluaclassname_wxAboutDialogInfo, wxAboutDialogInfo_methods, wxAboutDialogInfo_methodCount, NULL, &wxluatype_wxAboutDialogInfo, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxAboutDialogInfo_delete_function, },
#endif // wxCHECK_VERSION(2,8,0) && wxUSE_ABOUTDLG && wxLUA_USE_wxAboutDialog

#if wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL
        { wxluaclassname_wxAnimation, wxAnimation_methods, wxAnimation_methodCount, CLASSINFO(wxAnimation), &wxluatype_wxAnimation, wxluabaseclassnames_wxAnimation, wxluabaseclassbinds_wxAnimation, NULL, NULL, NULL, 0, &wxLua_wxAnimation_delete_function, },
        { wxluaclassname_wxAnimationCtrl, wxAnimationCtrl_methods, wxAnimationCtrl_methodCount, CLASSINFO(wxAnimationCtrl), &wxluatype_wxAnimationCtrl, wxluabaseclassnames_wxAnimationCtrl, wxluabaseclassbinds_wxAnimationCtrl, NULL, NULL, NULL, 0, &wxLua_wxAnimationCtrl_delete_function, },
#endif // wxCHECK_VERSION(2,8,0) && wxLUA_USE_wxAnimation && wxUSE_ANIMATIONCTRL

#if wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX
        { wxluaclassname_wxBitmapComboBox, wxBitmapComboBox_methods, wxBitmapComboBox_methodCount, CLASSINFO(wxBitmapComboBox), &wxluatype_wxBitmapComboBox, wxluabaseclassnames_wxBitmapComboBox, wxluabaseclassbinds_wxBitmapComboBox, NULL, NULL, NULL, 0, &wxLua_wxBitmapComboBox_delete_function, },
#endif // wxLUA_USE_wxBitmapComboBox && wxUSE_BITMAPCOMBOBOX

#if wxLUA_USE_wxSashWindow && wxUSE_SASH
        { wxluaclassname_wxCalculateLayoutEvent, wxCalculateLayoutEvent_methods, wxCalculateLayoutEvent_methodCount, CLASSINFO(wxCalculateLayoutEvent), &wxluatype_wxCalculateLayoutEvent, wxluabaseclassnames_wxCalculateLayoutEvent, wxluabaseclassbinds_wxCalculateLayoutEvent, NULL, NULL, NULL, 0, &wxLua_wxCalculateLayoutEvent_delete_function, },
#endif // wxLUA_USE_wxSashWindow && wxUSE_SASH

#if wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL
        { wxluaclassname_wxCalendarCtrl, wxCalendarCtrl_methods, wxCalendarCtrl_methodCount, CLASSINFO(wxCalendarCtrl), &wxluatype_wxCalendarCtrl, wxluabaseclassnames_wxCalendarCtrl, wxluabaseclassbinds_wxCalendarCtrl, NULL, NULL, NULL, 0, &wxLua_wxCalendarCtrl_delete_function, },
        { wxluaclassname_wxCalendarDateAttr, wxCalendarDateAttr_methods, wxCalendarDateAttr_methodCount, NULL, &wxluatype_wxCalendarDateAttr, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxCalendarDateAttr_delete_function, },
        { wxluaclassname_wxCalendarEvent, wxCalendarEvent_methods, wxCalendarEvent_methodCount, CLASSINFO(wxCalendarEvent), &wxluatype_wxCalendarEvent, wxluabaseclassnames_wxCalendarEvent, wxluabaseclassbinds_wxCalendarEvent, NULL, NULL, NULL, 0, &wxLua_wxCalendarEvent_delete_function, },
#endif // wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL

#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
        { wxluaclassname_wxDataViewBitmapRenderer, wxDataViewBitmapRenderer_methods, wxDataViewBitmapRenderer_methodCount, CLASSINFO(wxDataViewBitmapRenderer), &wxluatype_wxDataViewBitmapRenderer, wxluabaseclassnames_wxDataViewBitmapRenderer, wxluabaseclassbinds_wxDataViewBitmapRenderer, NULL, NULL, NULL, 0, &wxLua_wxDataViewBitmapRenderer_delete_function, },
        { wxluaclassname_wxDataViewCheckIconText, wxDataViewCheckIconText_methods, wxDataViewCheckIconText_methodCount, CLASSINFO(wxDataViewCheckIconText), &wxluatype_wxDataViewCheckIconText, wxluabaseclassnames_wxDataViewCheckIconText, wxluabaseclassbinds_wxDataViewCheckIconText, NULL, NULL, NULL, 0, &wxLua_wxDataViewCheckIconText_delete_function, },
        { wxluaclassname_wxDataViewChoiceByIndexRenderer, wxDataViewChoiceByIndexRenderer_methods, wxDataViewChoiceByIndexRenderer_methodCount, CLASSINFO(wxDataViewChoiceByIndexRenderer), &wxluatype_wxDataViewChoiceByIndexRenderer, wxluabaseclassnames_wxDataViewChoiceByIndexRenderer, wxluabaseclassbinds_wxDataViewChoiceByIndexRenderer, NULL, NULL, NULL, 0, &wxLua_wxDataViewChoiceByIndexRenderer_delete_function, },
        { wxluaclassname_wxDataViewChoiceRenderer, wxDataViewChoiceRenderer_methods, wxDataViewChoiceRenderer_methodCount, CLASSINFO(wxDataViewChoiceRenderer), &wxluatype_wxDataViewChoiceRenderer, wxluabaseclassnames_wxDataViewChoiceRenderer, wxluabaseclassbinds_wxDataViewChoiceRenderer, NULL, NULL, NULL, 0, &wxLua_wxDataViewChoiceRenderer_delete_function, },
        { wxluaclassname_wxDataViewColumn, wxDataViewColumn_methods, wxDataViewColumn_methodCount, NULL, &wxluatype_wxDataViewColumn, wxluabaseclassnames_wxDataViewColumn, wxluabaseclassbinds_wxDataViewColumn, NULL, NULL, NULL, 0, &wxLua_wxDataViewColumn_delete_function, },
        { wxluaclassname_wxDataViewColumnBase, wxDataViewColumnBase_methods, wxDataViewColumnBase_methodCount, NULL, &wxluatype_wxDataViewColumnBase, wxluabaseclassnames_wxDataViewColumnBase, wxluabaseclassbinds_wxDataViewColumnBase, NULL, NULL, NULL, 0, &wxLua_wxDataViewColumnBase_delete_function, },
        { wxluaclassname_wxDataViewCtrl, wxDataViewCtrl_methods, wxDataViewCtrl_methodCount, CLASSINFO(wxDataViewCtrl), &wxluatype_wxDataViewCtrl, wxluabaseclassnames_wxDataViewCtrl, wxluabaseclassbinds_wxDataViewCtrl, NULL, NULL, NULL, 0, &wxLua_wxDataViewCtrl_delete_function, },
        { wxluaclassname_wxDataViewCtrlBase, wxDataViewCtrlBase_methods, wxDataViewCtrlBase_methodCount, CLASSINFO(wxDataViewCtrlBase), &wxluatype_wxDataViewCtrlBase, wxluabaseclassnames_wxDataViewCtrlBase, wxluabaseclassbinds_wxDataViewCtrlBase, NULL, NULL, NULL, 0, &wxLua_wxDataViewCtrlBase_delete_function, },
        { wxluaclassname_wxDataViewCustomRendererBase, wxDataViewCustomRendererBase_methods, wxDataViewCustomRendererBase_methodCount, CLASSINFO(wxDataViewCustomRendererBase), &wxluatype_wxDataViewCustomRendererBase, wxluabaseclassnames_wxDataViewCustomRendererBase, wxluabaseclassbinds_wxDataViewCustomRendererBase, NULL, NULL, NULL, 0, &wxLua_wxDataViewCustomRendererBase_delete_function, },
        { wxluaclassname_wxDataViewEvent, wxDataViewEvent_methods, wxDataViewEvent_methodCount, CLASSINFO(wxDataViewEvent), &wxluatype_wxDataViewEvent, wxluabaseclassnames_wxDataViewEvent, wxluabaseclassbinds_wxDataViewEvent, NULL, NULL, NULL, 0, &wxLua_wxDataViewEvent_delete_function, },
        { wxluaclassname_wxDataViewIconText, wxDataViewIconText_methods, wxDataViewIconText_methodCount, CLASSINFO(wxDataViewIconText), &wxluatype_wxDataViewIconText, wxluabaseclassnames_wxDataViewIconText, wxluabaseclassbinds_wxDataViewIconText, NULL, NULL, NULL, 0, &wxLua_wxDataViewIconText_delete_function, },
        { wxluaclassname_wxDataViewIconTextRenderer, wxDataViewIconTextRenderer_methods, wxDataViewIconTextRenderer_methodCount, CLASSINFO(wxDataViewIconTextRenderer), &wxluatype_wxDataViewIconTextRenderer, wxluabaseclassnames_wxDataViewIconTextRenderer, wxluabaseclassbinds_wxDataViewIconTextRenderer, NULL, NULL, NULL, 0, &wxLua_wxDataViewIconTextRenderer_delete_function, },
        { wxluaclassname_wxDataViewIndexListModel, wxDataViewIndexListModel_methods, wxDataViewIndexListModel_methodCount, NULL, &wxluatype_wxDataViewIndexListModel, wxluabaseclassnames_wxDataViewIndexListModel, wxluabaseclassbinds_wxDataViewIndexListModel, NULL, NULL, NULL, 0, &wxLua_wxDataViewIndexListModel_delete_function, },
        { wxluaclassname_wxDataViewItem, wxDataViewItem_methods, wxDataViewItem_methodCount, NULL, &wxluatype_wxDataViewItem, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxDataViewItem_delete_function, },
        { wxluaclassname_wxDataViewItemArray, wxDataViewItemArray_methods, wxDataViewItemArray_methodCount, NULL, &wxluatype_wxDataViewItemArray, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxDataViewItemArray_delete_function, },
        { wxluaclassname_wxDataViewItemAttr, wxDataViewItemAttr_methods, wxDataViewItemAttr_methodCount, NULL, &wxluatype_wxDataViewItemAttr, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxDataViewItemAttr_delete_function, },
        { wxluaclassname_wxDataViewListCtrl, wxDataViewListCtrl_methods, wxDataViewListCtrl_methodCount, CLASSINFO(wxDataViewListCtrl), &wxluatype_wxDataViewListCtrl, wxluabaseclassnames_wxDataViewListCtrl, wxluabaseclassbinds_wxDataViewListCtrl, NULL, NULL, NULL, 0, &wxLua_wxDataViewListCtrl_delete_function, },
        { wxluaclassname_wxDataViewListModel, wxDataViewListModel_methods, wxDataViewListModel_methodCount, NULL, &wxluatype_wxDataViewListModel, wxluabaseclassnames_wxDataViewListModel, wxluabaseclassbinds_wxDataViewListModel, NULL, NULL, NULL, 0, &wxLua_wxDataViewListModel_delete_function, },
        { wxluaclassname_wxDataViewListStore, wxDataViewListStore_methods, wxDataViewListStore_methodCount, NULL, &wxluatype_wxDataViewListStore, wxluabaseclassnames_wxDataViewListStore, wxluabaseclassbinds_wxDataViewListStore, NULL, NULL, NULL, 0, &wxLua_wxDataViewListStore_delete_function, },
        { wxluaclassname_wxDataViewListStoreLine, wxDataViewListStoreLine_methods, wxDataViewListStoreLine_methodCount, NULL, &wxluatype_wxDataViewListStoreLine, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxDataViewListStoreLine_delete_function, },
        { wxluaclassname_wxDataViewModel, wxDataViewModel_methods, wxDataViewModel_methodCount, NULL, &wxluatype_wxDataViewModel, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxDataViewModel_delete_function, },
        { wxluaclassname_wxDataViewModelNotifier, wxDataViewModelNotifier_methods, wxDataViewModelNotifier_methodCount, NULL, &wxluatype_wxDataViewModelNotifier, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxDataViewModelNotifier_delete_function, },
        { wxluaclassname_wxDataViewProgressRenderer, wxDataViewProgressRenderer_methods, wxDataViewProgressRenderer_methodCount, CLASSINFO(wxDataViewProgressRenderer), &wxluatype_wxDataViewProgressRenderer, wxluabaseclassnames_wxDataViewProgressRenderer, wxluabaseclassbinds_wxDataViewProgressRenderer, NULL, NULL, NULL, 0, &wxLua_wxDataViewProgressRenderer_delete_function, },
        { wxluaclassname_wxDataViewRenderer, wxDataViewRenderer_methods, wxDataViewRenderer_methodCount, CLASSINFO(wxDataViewRenderer), &wxluatype_wxDataViewRenderer, wxluabaseclassnames_wxDataViewRenderer, wxluabaseclassbinds_wxDataViewRenderer, NULL, NULL, NULL, 0, &wxLua_wxDataViewRenderer_delete_function, },
        { wxluaclassname_wxDataViewRendererBase, wxDataViewRendererBase_methods, wxDataViewRendererBase_methodCount, CLASSINFO(wxDataViewRendererBase), &wxluatype_wxDataViewRendererBase, wxluabaseclassnames_wxDataViewRendererBase, wxluabaseclassbinds_wxDataViewRendererBase, NULL, NULL, NULL, 0, &wxLua_wxDataViewRendererBase_delete_function, },
#endif // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl

#if (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_SPINCTRL)
        { wxluaclassname_wxDataViewSpinRenderer, wxDataViewSpinRenderer_methods, wxDataViewSpinRenderer_methodCount, CLASSINFO(wxDataViewSpinRenderer), &wxluatype_wxDataViewSpinRenderer, wxluabaseclassnames_wxDataViewSpinRenderer, wxluabaseclassbinds_wxDataViewSpinRenderer, NULL, NULL, NULL, 0, &wxLua_wxDataViewSpinRenderer_delete_function, },
#endif // (wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl) && (wxUSE_SPINCTRL)

#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
        { wxluaclassname_wxDataViewTextRenderer, wxDataViewTextRenderer_methods, wxDataViewTextRenderer_methodCount, CLASSINFO(wxDataViewTextRenderer), &wxluatype_wxDataViewTextRenderer, wxluabaseclassnames_wxDataViewTextRenderer, wxluabaseclassbinds_wxDataViewTextRenderer, NULL, NULL, NULL, 0, &wxLua_wxDataViewTextRenderer_delete_function, },
        { wxluaclassname_wxDataViewToggleRenderer, wxDataViewToggleRenderer_methods, wxDataViewToggleRenderer_methodCount, CLASSINFO(wxDataViewToggleRenderer), &wxluatype_wxDataViewToggleRenderer, wxluabaseclassnames_wxDataViewToggleRenderer, wxluabaseclassbinds_wxDataViewToggleRenderer, NULL, NULL, NULL, 0, &wxLua_wxDataViewToggleRenderer_delete_function, },
        { wxluaclassname_wxDataViewTreeStore, wxDataViewTreeStore_methods, wxDataViewTreeStore_methodCount, NULL, &wxluatype_wxDataViewTreeStore, wxluabaseclassnames_wxDataViewTreeStore, wxluabaseclassbinds_wxDataViewTreeStore, NULL, NULL, NULL, 0, &wxLua_wxDataViewTreeStore_delete_function, },
        { wxluaclassname_wxDataViewTreeStoreContainerNode, wxDataViewTreeStoreContainerNode_methods, wxDataViewTreeStoreContainerNode_methodCount, NULL, &wxluatype_wxDataViewTreeStoreContainerNode, wxluabaseclassnames_wxDataViewTreeStoreContainerNode, wxluabaseclassbinds_wxDataViewTreeStoreContainerNode, NULL, NULL, NULL, 0, &wxLua_wxDataViewTreeStoreContainerNode_delete_function, },
        { wxluaclassname_wxDataViewTreeStoreNode, wxDataViewTreeStoreNode_methods, wxDataViewTreeStoreNode_methodCount, NULL, &wxluatype_wxDataViewTreeStoreNode, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxDataViewTreeStoreNode_delete_function, },
        { wxluaclassname_wxDataViewValueAdjuster, wxDataViewValueAdjuster_methods, wxDataViewValueAdjuster_methodCount, NULL, &wxluatype_wxDataViewValueAdjuster, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxDataViewValueAdjuster_delete_function, },
#endif // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl

#if wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL
        { wxluaclassname_wxDateEvent, wxDateEvent_methods, wxDateEvent_methodCount, CLASSINFO(wxDateEvent), &wxluatype_wxDateEvent, wxluabaseclassnames_wxDateEvent, wxluabaseclassbinds_wxDateEvent, NULL, NULL, NULL, 0, &wxLua_wxDateEvent_delete_function, },
#endif // wxLUA_USE_wxCalendarCtrl && wxUSE_CALENDARCTRL

#if wxLUA_USE_wxGrid && wxUSE_GRID
        { wxluaclassname_wxGrid, wxGrid_methods, wxGrid_methodCount, CLASSINFO(wxGrid), &wxluatype_wxGrid, wxluabaseclassnames_wxGrid, wxluabaseclassbinds_wxGrid, NULL, NULL, wxGrid_enums, wxGrid_enumCount, &wxLua_wxGrid_delete_function, },
        { wxluaclassname_wxGridCellAttr, wxGridCellAttr_methods, wxGridCellAttr_methodCount, NULL, &wxluatype_wxGridCellAttr, wxluabaseclassnames_wxGridCellAttr, wxluabaseclassbinds_wxGridCellAttr, NULL, NULL, wxGridCellAttr_enums, wxGridCellAttr_enumCount, &wxLua_wxGridCellAttr_delete_function, },
        { wxluaclassname_wxGridCellAttrProvider, wxGridCellAttrProvider_methods, wxGridCellAttrProvider_methodCount, NULL, &wxluatype_wxGridCellAttrProvider, wxluabaseclassnames_wxGridCellAttrProvider, wxluabaseclassbinds_wxGridCellAttrProvider, NULL, NULL, NULL, 0, &wxLua_wxGridCellAttrProvider_delete_function, },
        { wxluaclassname_wxGridCellAutoWrapStringEditor, wxGridCellAutoWrapStringEditor_methods, wxGridCellAutoWrapStringEditor_methodCount, NULL, &wxluatype_wxGridCellAutoWrapStringEditor, wxluabaseclassnames_wxGridCellAutoWrapStringEditor, wxluabaseclassbinds_wxGridCellAutoWrapStringEditor, NULL, NULL, NULL, 0, &wxLua_wxGridCellAutoWrapStringEditor_delete_function, },
        { wxluaclassname_wxGridCellAutoWrapStringRenderer, wxGridCellAutoWrapStringRenderer_methods, wxGridCellAutoWrapStringRenderer_methodCount, NULL, &wxluatype_wxGridCellAutoWrapStringRenderer, wxluabaseclassnames_wxGridCellAutoWrapStringRenderer, wxluabaseclassbinds_wxGridCellAutoWrapStringRenderer, NULL, NULL, NULL, 0, &wxLua_wxGridCellAutoWrapStringRenderer_delete_function, },
        { wxluaclassname_wxGridCellBoolEditor, wxGridCellBoolEditor_methods, wxGridCellBoolEditor_methodCount, NULL, &wxluatype_wxGridCellBoolEditor, wxluabaseclassnames_wxGridCellBoolEditor, wxluabaseclassbinds_wxGridCellBoolEditor, NULL, NULL, NULL, 0, &wxLua_wxGridCellBoolEditor_delete_function, },
        { wxluaclassname_wxGridCellBoolRenderer, wxGridCellBoolRenderer_methods, wxGridCellBoolRenderer_methodCount, NULL, &wxluatype_wxGridCellBoolRenderer, wxluabaseclassnames_wxGridCellBoolRenderer, wxluabaseclassbinds_wxGridCellBoolRenderer, NULL, NULL, NULL, 0, &wxLua_wxGridCellBoolRenderer_delete_function, },
        { wxluaclassname_wxGridCellChoiceEditor, wxGridCellChoiceEditor_methods, wxGridCellChoiceEditor_methodCount, NULL, &wxluatype_wxGridCellChoiceEditor, wxluabaseclassnames_wxGridCellChoiceEditor, wxluabaseclassbinds_wxGridCellChoiceEditor, NULL, NULL, NULL, 0, &wxLua_wxGridCellChoiceEditor_delete_function, },
        { wxluaclassname_wxGridCellCoords, wxGridCellCoords_methods, wxGridCellCoords_methodCount, NULL, &wxluatype_wxGridCellCoords, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxGridCellCoords_delete_function, },
        { wxluaclassname_wxGridCellCoordsArray, wxGridCellCoordsArray_methods, wxGridCellCoordsArray_methodCount, NULL, &wxluatype_wxGridCellCoordsArray, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxGridCellCoordsArray_delete_function, },
        { wxluaclassname_wxGridCellDateTimeRenderer, wxGridCellDateTimeRenderer_methods, wxGridCellDateTimeRenderer_methodCount, NULL, &wxluatype_wxGridCellDateTimeRenderer, wxluabaseclassnames_wxGridCellDateTimeRenderer, wxluabaseclassbinds_wxGridCellDateTimeRenderer, NULL, NULL, NULL, 0, &wxLua_wxGridCellDateTimeRenderer_delete_function, },
        { wxluaclassname_wxGridCellEditor, wxGridCellEditor_methods, wxGridCellEditor_methodCount, NULL, &wxluatype_wxGridCellEditor, wxluabaseclassnames_wxGridCellEditor, wxluabaseclassbinds_wxGridCellEditor, NULL, NULL, NULL, 0, &wxLua_wxGridCellEditor_delete_function, },
        { wxluaclassname_wxGridCellEnumEditor, wxGridCellEnumEditor_methods, wxGridCellEnumEditor_methodCount, NULL, &wxluatype_wxGridCellEnumEditor, wxluabaseclassnames_wxGridCellEnumEditor, wxluabaseclassbinds_wxGridCellEnumEditor, NULL, NULL, NULL, 0, &wxLua_wxGridCellEnumEditor_delete_function, },
        { wxluaclassname_wxGridCellEnumRenderer, wxGridCellEnumRenderer_methods, wxGridCellEnumRenderer_methodCount, NULL, &wxluatype_wxGridCellEnumRenderer, wxluabaseclassnames_wxGridCellEnumRenderer, wxluabaseclassbinds_wxGridCellEnumRenderer, NULL, NULL, NULL, 0, &wxLua_wxGridCellEnumRenderer_delete_function, },
        { wxluaclassname_wxGridCellFloatEditor, wxGridCellFloatEditor_methods, wxGridCellFloatEditor_methodCount, NULL, &wxluatype_wxGridCellFloatEditor, wxluabaseclassnames_wxGridCellFloatEditor, wxluabaseclassbinds_wxGridCellFloatEditor, NULL, NULL, NULL, 0, &wxLua_wxGridCellFloatEditor_delete_function, },
        { wxluaclassname_wxGridCellFloatRenderer, wxGridCellFloatRenderer_methods, wxGridCellFloatRenderer_methodCount, NULL, &wxluatype_wxGridCellFloatRenderer, wxluabaseclassnames_wxGridCellFloatRenderer, wxluabaseclassbinds_wxGridCellFloatRenderer, NULL, NULL, NULL, 0, &wxLua_wxGridCellFloatRenderer_delete_function, },
        { wxluaclassname_wxGridCellNumberEditor, wxGridCellNumberEditor_methods, wxGridCellNumberEditor_methodCount, NULL, &wxluatype_wxGridCellNumberEditor, wxluabaseclassnames_wxGridCellNumberEditor, wxluabaseclassbinds_wxGridCellNumberEditor, NULL, NULL, NULL, 0, &wxLua_wxGridCellNumberEditor_delete_function, },
        { wxluaclassname_wxGridCellNumberRenderer, wxGridCellNumberRenderer_methods, wxGridCellNumberRenderer_methodCount, NULL, &wxluatype_wxGridCellNumberRenderer, wxluabaseclassnames_wxGridCellNumberRenderer, wxluabaseclassbinds_wxGridCellNumberRenderer, NULL, NULL, NULL, 0, &wxLua_wxGridCellNumberRenderer_delete_function, },
        { wxluaclassname_wxGridCellRenderer, wxGridCellRenderer_methods, wxGridCellRenderer_methodCount, NULL, &wxluatype_wxGridCellRenderer, wxluabaseclassnames_wxGridCellRenderer, wxluabaseclassbinds_wxGridCellRenderer, NULL, NULL, NULL, 0, &wxLua_wxGridCellRenderer_delete_function, },
        { wxluaclassname_wxGridCellStringRenderer, wxGridCellStringRenderer_methods, wxGridCellStringRenderer_methodCount, NULL, &wxluatype_wxGridCellStringRenderer, wxluabaseclassnames_wxGridCellStringRenderer, wxluabaseclassbinds_wxGridCellStringRenderer, NULL, NULL, NULL, 0, &wxLua_wxGridCellStringRenderer_delete_function, },
        { wxluaclassname_wxGridCellTextEditor, wxGridCellTextEditor_methods, wxGridCellTextEditor_methodCount, NULL, &wxluatype_wxGridCellTextEditor, wxluabaseclassnames_wxGridCellTextEditor, wxluabaseclassbinds_wxGridCellTextEditor, NULL, NULL, NULL, 0, &wxLua_wxGridCellTextEditor_delete_function, },
        { wxluaclassname_wxGridCellWorker, wxGridCellWorker_methods, wxGridCellWorker_methodCount, NULL, &wxluatype_wxGridCellWorker, wxluabaseclassnames_wxGridCellWorker, wxluabaseclassbinds_wxGridCellWorker, NULL, NULL, NULL, 0, &wxLua_wxGridCellWorker_delete_function, },
        { wxluaclassname_wxGridEditorCreatedEvent, wxGridEditorCreatedEvent_methods, wxGridEditorCreatedEvent_methodCount, CLASSINFO(wxGridEditorCreatedEvent), &wxluatype_wxGridEditorCreatedEvent, wxluabaseclassnames_wxGridEditorCreatedEvent, wxluabaseclassbinds_wxGridEditorCreatedEvent, NULL, NULL, NULL, 0, &wxLua_wxGridEditorCreatedEvent_delete_function, },
        { wxluaclassname_wxGridEvent, wxGridEvent_methods, wxGridEvent_methodCount, CLASSINFO(wxGridEvent), &wxluatype_wxGridEvent, wxluabaseclassnames_wxGridEvent, wxluabaseclassbinds_wxGridEvent, NULL, NULL, NULL, 0, &wxLua_wxGridEvent_delete_function, },
        { wxluaclassname_wxGridRangeSelectEvent, wxGridRangeSelectEvent_methods, wxGridRangeSelectEvent_methodCount, CLASSINFO(wxGridRangeSelectEvent), &wxluatype_wxGridRangeSelectEvent, wxluabaseclassnames_wxGridRangeSelectEvent, wxluabaseclassbinds_wxGridRangeSelectEvent, NULL, NULL, NULL, 0, &wxLua_wxGridRangeSelectEvent_delete_function, },
        { wxluaclassname_wxGridSizeEvent, wxGridSizeEvent_methods, wxGridSizeEvent_methodCount, CLASSINFO(wxGridSizeEvent), &wxluatype_wxGridSizeEvent, wxluabaseclassnames_wxGridSizeEvent, wxluabaseclassbinds_wxGridSizeEvent, NULL, NULL, NULL, 0, &wxLua_wxGridSizeEvent_delete_function, },
        { wxluaclassname_wxGridStringTable, wxGridStringTable_methods, wxGridStringTable_methodCount, CLASSINFO(wxGridStringTable), &wxluatype_wxGridStringTable, wxluabaseclassnames_wxGridStringTable, wxluabaseclassbinds_wxGridStringTable, NULL, NULL, NULL, 0, &wxLua_wxGridStringTable_delete_function, },
        { wxluaclassname_wxGridTableBase, wxGridTableBase_methods, wxGridTableBase_methodCount, CLASSINFO(wxGridTableBase), &wxluatype_wxGridTableBase, wxluabaseclassnames_wxGridTableBase, wxluabaseclassbinds_wxGridTableBase, NULL, NULL, NULL, 0, &wxLua_wxGridTableBase_delete_function, },
        { wxluaclassname_wxGridTableMessage, wxGridTableMessage_methods, wxGridTableMessage_methodCount, NULL, &wxluatype_wxGridTableMessage, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxGridTableMessage_delete_function, },
#endif // wxLUA_USE_wxGrid && wxUSE_GRID

#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
        { wxluaclassname_wxHeaderColumn, wxHeaderColumn_methods, wxHeaderColumn_methodCount, NULL, &wxluatype_wxHeaderColumn, NULL, NULL, NULL, NULL, NULL, 0, &wxLua_wxHeaderColumn_delete_function, },
#endif // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl

#if wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl
        { wxluaclassname_wxHyperlinkCtrl, wxHyperlinkCtrl_methods, wxHyperlinkCtrl_methodCount, CLASSINFO(wxHyperlinkCtrl), &wxluatype_wxHyperlinkCtrl, wxluabaseclassnames_wxHyperlinkCtrl, wxluabaseclassbinds_wxHyperlinkCtrl, NULL, NULL, NULL, 0, &wxLua_wxHyperlinkCtrl_delete_function, },
        { wxluaclassname_wxHyperlinkEvent, wxHyperlinkEvent_methods, wxHyperlinkEvent_methodCount, CLASSINFO(wxHyperlinkEvent), &wxluatype_wxHyperlinkEvent, wxluabaseclassnames_wxHyperlinkEvent, wxluabaseclassbinds_wxHyperlinkEvent, NULL, NULL, NULL, 0, &wxLua_wxHyperlinkEvent_delete_function, },
#endif // wxCHECK_VERSION(2,8,0) && wxUSE_HYPERLINKCTRL && wxLUA_USE_wxHyperlinkCtrl

#if wxLUA_USE_wxJoystick && wxUSE_JOYSTICK
        { wxluaclassname_wxJoystick, wxJoystick_methods, wxJoystick_methodCount, CLASSINFO(wxJoystick), &wxluatype_wxJoystick, wxluabaseclassnames_wxJoystick, wxluabaseclassbinds_wxJoystick, NULL, NULL, NULL, 0, &wxLua_wxJoystick_delete_function, },
        { wxluaclassname_wxJoystickEvent, wxJoystickEvent_methods, wxJoystickEvent_methodCount, CLASSINFO(wxJoystickEvent), &wxluatype_wxJoystickEvent, wxluabaseclassnames_wxJoystickEvent, wxluabaseclassbinds_wxJoystickEvent, NULL, NULL, NULL, 0, &wxLua_wxJoystickEvent_delete_function, },
#endif // wxLUA_USE_wxJoystick && wxUSE_JOYSTICK

#if wxLUA_USE_wxSashWindow && wxUSE_SASH
        { wxluaclassname_wxLayoutAlgorithm, wxLayoutAlgorithm_methods, wxLayoutAlgorithm_methodCount, CLASSINFO(wxLayoutAlgorithm), &wxluatype_wxLayoutAlgorithm, wxluabaseclassnames_wxLayoutAlgorithm, wxluabaseclassbinds_wxLayoutAlgorithm, NULL, NULL, NULL, 0, &wxLua_wxLayoutAlgorithm_delete_function, },
#endif // wxLUA_USE_wxSashWindow && wxUSE_SASH

#if wxLUA_USE_wxGrid && wxUSE_GRID
        { wxluaclassname_wxLuaGridTableBase, wxLuaGridTableBase_methods, wxLuaGridTableBase_methodCount, CLASSINFO(wxLuaGridTableBase), &wxluatype_wxLuaGridTableBase, wxluabaseclassnames_wxLuaGridTableBase, wxluabaseclassbinds_wxLuaGridTableBase, NULL, NULL, NULL, 0, &wxLua_wxLuaGridTableBase_delete_function, },
#endif // wxLUA_USE_wxGrid && wxUSE_GRID

#if wxLUA_USE_wxSashWindow && wxUSE_SASH
        { wxluaclassname_wxQueryLayoutInfoEvent, wxQueryLayoutInfoEvent_methods, wxQueryLayoutInfoEvent_methodCount, CLASSINFO(wxQueryLayoutInfoEvent), &wxluatype_wxQueryLayoutInfoEvent, wxluabaseclassnames_wxQueryLayoutInfoEvent, wxluabaseclassbinds_wxQueryLayoutInfoEvent, NULL, NULL, NULL, 0, &wxLua_wxQueryLayoutInfoEvent_delete_function, },
        { wxluaclassname_wxSashEvent, wxSashEvent_methods, wxSashEvent_methodCount, CLASSINFO(wxSashEvent), &wxluatype_wxSashEvent, wxluabaseclassnames_wxSashEvent, wxluabaseclassbinds_wxSashEvent, NULL, NULL, NULL, 0, &wxLua_wxSashEvent_delete_function, },
        { wxluaclassname_wxSashLayoutWindow, wxSashLayoutWindow_methods, wxSashLayoutWindow_methodCount, CLASSINFO(wxSashLayoutWindow), &wxluatype_wxSashLayoutWindow, wxluabaseclassnames_wxSashLayoutWindow, wxluabaseclassbinds_wxSashLayoutWindow, NULL, NULL, NULL, 0, &wxLua_wxSashLayoutWindow_delete_function, },
        { wxluaclassname_wxSashWindow, wxSashWindow_methods, wxSashWindow_methodCount, CLASSINFO(wxSashWindow), &wxluatype_wxSashWindow, wxluabaseclassnames_wxSashWindow, wxluabaseclassbinds_wxSashWindow, NULL, NULL, NULL, 0, &wxLua_wxSashWindow_delete_function, },
#endif // wxLUA_USE_wxSashWindow && wxUSE_SASH

#if wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl
        { wxluaclassname_wxSettableHeaderColumn, wxSettableHeaderColumn_methods, wxSettableHeaderColumn_methodCount, NULL, &wxluatype_wxSettableHeaderColumn, wxluabaseclassnames_wxSettableHeaderColumn, wxluabaseclassbinds_wxSettableHeaderColumn, NULL, NULL, NULL, 0, &wxLua_wxSettableHeaderColumn_delete_function, },
#endif // wxCHECK_VERSION(3,1,0) && wxUSE_DATAVIEWCTRL && wxLUA_USE_wxDataViewCtrl

#if (wxCHECK_VERSION(2,6,0) && wxUSE_SOUND) && (wxLUA_USE_wxWave)
        { wxluaclassname_wxSound, wxSound_methods, wxSound_methodCount, CLASSINFO(wxSound), &wxluatype_wxSound, wxluabaseclassnames_wxSound, wxluabaseclassbinds_wxSound, NULL, NULL, NULL, 0, &wxLua_wxSound_delete_function, },
#endif // (wxCHECK_VERSION(2,6,0) && wxUSE_SOUND) && (wxLUA_USE_wxWave)

#if wxLUA_USE_wxSplashScreen
        { wxluaclassname_wxSplashScreen, wxSplashScreen_methods, wxSplashScreen_methodCount, CLASSINFO(wxSplashScreen), &wxluatype_wxSplashScreen, wxluabaseclassnames_wxSplashScreen, wxluabaseclassbinds_wxSplashScreen, NULL, NULL, NULL, 0, &wxLua_wxSplashScreen_delete_function, },
        { wxluaclassname_wxSplashScreenWindow, wxSplashScreenWindow_methods, wxSplashScreenWindow_methodCount, CLASSINFO(wxSplashScreenWindow), &wxluatype_wxSplashScreenWindow, wxluabaseclassnames_wxSplashScreenWindow, wxluabaseclassbinds_wxSplashScreenWindow, NULL, NULL, NULL, 0, &wxLua_wxSplashScreenWindow_delete_function, },
#endif // wxLUA_USE_wxSplashScreen

#if wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON )
        { wxluaclassname_wxTaskBarIcon, wxTaskBarIcon_methods, wxTaskBarIcon_methodCount, CLASSINFO(wxTaskBarIcon), &wxluatype_wxTaskBarIcon, wxluabaseclassnames_wxTaskBarIcon, wxluabaseclassbinds_wxTaskBarIcon, NULL, NULL, NULL, 0, &wxLua_wxTaskBarIcon_delete_function, },
        { wxluaclassname_wxTaskBarIconEvent, wxTaskBarIconEvent_methods, wxTaskBarIconEvent_methodCount, CLASSINFO(wxTaskBarIconEvent), &wxluatype_wxTaskBarIconEvent, wxluabaseclassnames_wxTaskBarIconEvent, wxluabaseclassbinds_wxTaskBarIconEvent, NULL, NULL, NULL, 0, &wxLua_wxTaskBarIconEvent_delete_function, },
#endif // wxLUA_USE_wxTaskBarIcon && defined (wxHAS_TASK_BAR_ICON )

#if (defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave)
        { wxluaclassname_wxWave, wxWave_methods, wxWave_methodCount, CLASSINFO(wxWave), &wxluatype_wxWave, wxluabaseclassnames_wxWave, wxluabaseclassbinds_wxWave, NULL, NULL, NULL, 0, &wxLua_wxWave_delete_function, },
#endif // (defined(__WXMSW__) && !wxCHECK_VERSION(2,6,0) && wxUSE_WAVE) && (wxLUA_USE_wxWave)

#if wxUSE_WIZARDDLG && wxLUA_USE_wxWizard
        { wxluaclassname_wxWizard, wxWizard_methods, wxWizard_methodCount, CLASSINFO(wxWizard), &wxluatype_wxWizard, wxluabaseclassnames_wxWizard, wxluabaseclassbinds_wxWizard, NULL, NULL, NULL, 0, &wxLua_wxWizard_delete_function, },
        { wxluaclassname_wxWizardEvent, wxWizardEvent_methods, wxWizardEvent_methodCount, CLASSINFO(wxWizardEvent), &wxluatype_wxWizardEvent, wxluabaseclassnames_wxWizardEvent, wxluabaseclassbinds_wxWizardEvent, NULL, NULL, NULL, 0, &wxLua_wxWizardEvent_delete_function, },
        { wxluaclassname_wxWizardPage, wxWizardPage_methods, wxWizardPage_methodCount, CLASSINFO(wxWizardPage), &wxluatype_wxWizardPage, wxluabaseclassnames_wxWizardPage, wxluabaseclassbinds_wxWizardPage, NULL, NULL, NULL, 0, &wxLua_wxWizardPage_delete_function, },
        { wxluaclassname_wxWizardPageSimple, wxWizardPageSimple_methods, wxWizardPageSimple_methodCount, CLASSINFO(wxWizardPageSimple), &wxluatype_wxWizardPageSimple, wxluabaseclassnames_wxWizardPageSimple, wxluabaseclassbinds_wxWizardPageSimple, NULL, NULL, NULL, 0, &wxLua_wxWizardPageSimple_delete_function, },
#endif // wxUSE_WIZARDDLG && wxLUA_USE_wxWizard


        { 0, 0, 0, 0, 0, 0, 0 },
    };
    count = sizeof(classList)/sizeof(wxLuaBindClass) - 1;

    return classList;
}

// ---------------------------------------------------------------------------
// wxLuaBinding_wxadv() - the binding class
// ---------------------------------------------------------------------------

IMPLEMENT_DYNAMIC_CLASS(wxLuaBinding_wxadv, wxLuaBinding)

wxLuaBinding_wxadv::wxLuaBinding_wxadv() : wxLuaBinding()
{
    m_bindingName   = wxT("wxadv");
    m_nameSpace     = wxT("wx");
    m_classArray    = wxLuaGetClassList_wxadv(m_classCount);
    m_numberArray   = wxLuaGetDefineList_wxadv(m_numberCount);
    m_stringArray   = wxLuaGetStringList_wxadv(m_stringCount);
    m_eventArray    = wxLuaGetEventList_wxadv(m_eventCount);
    m_objectArray   = wxLuaGetObjectList_wxadv(m_objectCount);
    m_functionArray = wxLuaGetFunctionList_wxadv(m_functionCount);
    InitBinding();
}



// ---------------------------------------------------------------------------

wxLuaBinding* wxLuaBinding_wxadv_init()
{
    static wxLuaBinding_wxadv m_binding;

    if (wxLuaBinding::GetBindingArray().Index(&m_binding) == wxNOT_FOUND)
        wxLuaBinding::GetBindingArray().Add(&m_binding);

    return &m_binding;
}
